if ( fadeout )
  {
  d3d_set_projection_ortho ( 0 , 0 , 1280 , 720 , 0 );
  
  var a, c;
  c = c_white;
  a = 1;
  if ( timer < 160 )
    {
    a = timer / 160;
    }
  if ( timer > 200 )
    {
    c = merge_color ( c_white , c_black , min ( 1 , ( timer - 200 ) / 60 ) );
    }
  draw_set_color ( c );
  draw_set_alpha ( a );
  draw_rectangle ( 0 , 0 , 1280 , 720 , 0 );
  draw_set_alpha ( 1 );
  
  if sprite_get_width(global.spr_promo) != 1280 and sprite_get_height(global.spr_promo) != 720
  draw_sprite_stretched_ext(global.spr_promo,0,0,0,1280,720,c_white,a)
  else
  draw_sprite_ext(global.spr_promo,0,0,0,1,1,0,c_white,a)
  
  d3d_set_projection_ortho ( view_xview[0] , view_yview[0] , view_wview[0] , view_hview[0] , view_angle[0] );
  exit;
  }

if ( thanksforplaying )
  {
  d3d_set_projection_ortho ( 0 , 0 , 1280 , 720 , 0 );
  
  var xx, yy, xs, t, a;
  xs = 1;
  a = 1;
  xx = 0;
  yy = 0;
  if ( timer < 20 )
    {
    a = timer / 20;
    xx = -64 + lengthdir_x ( 64 , 90 - ( timer / 20 ) * 90 );
    }
    else
  if ( timer > time - 20 )
    {
    t = ( timer - ( time - 20 ) ) / 20;
    a = 1 - t;
    xx = 64 - lengthdir_x ( 64 , t );
    }
    else
  if ( timer < 0 || timer >= time )
    a = 0; 
  
  texture_set_interpolation ( 1 );
  draw_sprite_ext ( global.msk_stg[2] , 0 , 640 + xx + x , 360 + yy , xs * 0.75 , xs * 0.75 , 0 , c_white , a );
  texture_set_interpolation ( global.dinterpolation );
  
  d3d_set_projection_ortho ( view_xview[0] , view_yview[0] , view_wview[0] , view_hview[0] , view_angle[0] );
  exit;
  }
if ( congratulations )
  {
  d3d_set_projection_ortho ( 0 , 0 , 1280 , 720 , 0 );
  
  var xx, yy, xs, a;
  xs = 1;
  a = 1;
  xx = 0;
  yy = 0;
  if ( timer < 60 )
    {
    xs = 10 - timer / 60 * 9;
    a = timer / 60;
    }
  if ( timer >= 60 && timer < 90 )
    {
    xx = 3 - floor ( ( timer - 60 ) * 0.1 );
    yy = xx;
    if ( timer mod 4 < 2 ) xx *= -1;
    if ( timer mod 2 == 0 ) yy *= -1;
    }
    
  if ( timer == 60 || timer == 62 || timer == 64 )
    {
    draw_set_color ( c_white );
    draw_rectangle ( 0 , 0 , 1280 , 720 , 0 );
    }
  
  texture_set_interpolation ( 1 );
  draw_sprite_ext ( global.msk_stg[obj_classic.difficulty >= 9.5] , 0 , 640 + xx + x , 360 + yy , (xs-squish)*0.75,(xs+squish)*0.75 , 0 , c_white , a );
  texture_set_interpolation ( global.dinterpolation );
  
  d3d_set_projection_ortho ( view_xview[0] , view_yview[0] , view_wview[0] , view_hview[0] , view_angle[0] );
  exit;
  }

if ( results_table )
  {
  d3d_set_projection_ortho ( 0 , 0 , 1280 , 720 , 0 );
  
  var a, bg, l, u, r, d;
  bg = background_index[3];
  l = 144;
  r = 1280 - 144;
  u = 360 - 96 * min ( 1 , extended );
  d = 360 + 96 * min ( 1 , extended );
  
  draw_set_alpha ( 0.75 );
  draw_rectangle_color ( l , u , r , d , c_black , c_black , c_dkgray , c_dkgray , 0 );
  draw_set_alpha ( 1 );
  
  draw_set_blend_mode ( bm_add );
  draw_background_part ( bg , 0 , 0 , 16 , 16 , l - 8 , u - 8 );
  draw_background_part ( bg , 32 , 0 , 16 , 16 , r - 8 , u - 8 );
  draw_background_part ( bg , 0 , 32 , 16 , 16 , l - 8 , d - 8 );
  draw_background_part ( bg , 32 , 32 , 16 , 16 , r - 8 , d - 8 );
  draw_background_part_ext ( bg , 16 , 0 , 16 , 16 , l + 8 , u - 8 , ( r - l ) / 16 - 1 , 1 , c_white , 1 );
  draw_background_part_ext ( bg , 0 , 16 , 16 , 16 , l - 8 , u + 8 , 1 , ( d - u ) / 16 - 1 , c_white , 1 );
  draw_background_part_ext ( bg , 16 , 0 , 16 , 16 , l + 8 , d - 8 , ( r - l ) / 16 - 1 , 1 , c_white , 1 );
  draw_background_part_ext ( bg , 0 , 16 , 16 , 16 , r - 8 , u + 8 , 1 , ( d - u ) / 16 - 1 , c_white , 1 );
  draw_set_blend_mode ( bm_normal );
  
  a = max ( 0 , extended - 1 );
  draw_set_alpha ( a );
  draw_set_font ( fnt_menu3 );
  draw_set_halign ( fa_center );
  draw_set_valign ( fa_center );
  draw_text_color ( 640 , 298 , "RESULTS" , c_black , c_black , c_black , c_black , a );
  draw_text_color ( 640 , 296 , "RESULTS" , c_white , c_white , c_ltgray , c_ltgray , a );
  draw_set_halign ( fa_right );
  draw_text_color ( 600 , 362 , "Hits" , c_black , c_black , c_black , c_black , a );
  draw_text_color ( 600 , 360 , "Hits" , c_white , c_white , c_ltgray , c_ltgray , a );
  draw_text_color ( 600 , 402 , "Hit Percentage" , c_black , c_black , c_black , c_black , a );
  draw_text_color ( 600 , 400 , "Hit Percentage" , c_white , c_white , c_ltgray , c_ltgray , a );
  draw_set_halign ( fa_left );
  var str2;
  str2 = string ( hits ) + "/" + string ( total );
  draw_text_color ( 680 , 362 , str2 , c_black , c_black , c_black , c_black , a );
  draw_text_color ( 680 , 360 , str2 , c_white , c_white , c_ltgray , c_ltgray , a );
  str2 = string ( ( hits / max ( 1 , total ) ) * 100 ) + "%";
  draw_text_color ( 680 , 402 , str2 , c_black , c_black , c_black , c_black , a );
  draw_text_color ( 680 , 400 , str2 , c_white , c_white , c_ltgray , c_ltgray , a );
  draw_set_alpha ( 1 );
  
  d3d_set_projection_ortho ( view_xview[0] , view_yview[0] , view_wview[0] , view_hview[0] , view_angle[0] );
  exit;
  }

if ( credits_entry )
  {
  texture_set_interpolation ( 1 );
  draw_set_font ( fnt_credits );
  draw_set_halign ( fa_center );
  draw_set_valign ( fa_center );
  draw_set_color ( c_black );
  draw_text_transformed ( x - 0.5 , y , str , image_xscale , image_yscale , image_angle );
  draw_text_transformed ( x + 0.5 , y , str , image_xscale , image_yscale , image_angle );
  draw_text_transformed ( x , y - 0.5 , str , image_xscale , image_yscale , image_angle );
  draw_text_transformed ( x , y + 0.5 , str , image_xscale , image_yscale , image_angle );
  draw_set_color ( c_white );
  if ( marked )
    draw_text_transformed_color ( x , y , str , image_xscale , image_yscale , image_angle , c_black , c_black , c_black , c_black , 1 );
    else
  if ( type == 2 )
    draw_text_transformed_color ( x , y , str , image_xscale , image_yscale , image_angle , c_orange , c_orange , c_red , c_red , 1 );
    else
    draw_text_transformed_color ( x , y , str , image_xscale , image_yscale , image_angle , c_white , c_white , c_ltgray , c_ltgray , 1 );
  texture_set_interpolation ( global.dinterpolation );
  exit;
  }

if ( !main_bg )
  exit;

d3d_set_projection ( 64 + lengthdir_x ( 1 , camera_xdir ) , 64 , lengthdir_x ( 1 , camera_ydir ) , 64 , 0 , 0 , 0 , 0, 1 );

var tt, t2, t3;
tt = background_get_texture ( background_index[0] );
draw_set_color ( c_white );
d3d_draw_wall ( -320 , -320 , 320 , 320 , -320 , -320 , tt , 1 , 1 );

tt = background_get_texture ( background_index[1] );
draw_set_color ( c_white );
t2 = background_get_texture ( background_index[2] );

d3d_set_hidden ( false );

var xrot, yrot, zrot, i, w, xx, zz;
xrot = 0;
yrot = 90;
zrot = 270;
draw_set_blend_mode ( bm_add );
d3d_transform_set_rotation_x ( xrot );
d3d_transform_add_rotation_y ( yrot );
d3d_transform_add_rotation_z ( zrot );
d3d_transform_add_translation ( 64 , -32 , 0 );
w = 32;
draw_set_alpha ( 0.5 );
for ( i = -640 * 1 + scroll ; i < 640 * 11 ; i += 640 )
  d3d_draw_cylinder ( -w , -w , i , w , w , i - 640 , tt , 4 , 12 , 0 , 48 );
draw_set_alpha ( 1 );
d3d_transform_set_identity();

t3 = sprite_get_texture ( spr_light , 0 );
w = 8;
for ( i = 0 ; i < sparkles_num ; i += 1 )
  {
  xx = lengthdir_x ( sparkles_dis[i] , sparkles_dir[i] );
  zz = lengthdir_y ( sparkles_dis[i] , sparkles_dir[i] );
  //xx = 0;
  //zz = 0;
  //d3d_draw_wall ( - w + 64 , sparkles_y[i] * 0.3 + 64 , - w , w + 64 , sparkles_y[i] * 0.3 + 64 , + w , t3 , 1 , 1 );
  //sparkles_y[i] = -96;
  if ( sparkles_y[i] < 2500 )
    draw_set_alpha ( 0.25 );
    else
    draw_set_alpha ( 0.25 - 0.25 * ( sparkles_y[i] - 2500 ) / 40 );
  d3d_draw_wall ( xx -w + 64 , -sparkles_y[i] + 64 , zz - w , xx + w + 64 , -sparkles_y[i] + 64 , zz + w , t3 , 1 , 1 );
  }
draw_set_alpha ( 1 );

d3d_transform_set_rotation_x ( xrot );
d3d_transform_add_rotation_y ( yrot );
d3d_transform_add_rotation_z ( zrot );
d3d_transform_add_translation ( 64 , -32 , 0 );
texture_set_interpolation ( 1 );
w = 256;
for ( i = -640 * 1  + scroll ; i < 640 * 22 ; i += 640 )
  d3d_draw_cylinder ( -w , -w , i , w , w , i - 640 , t2 , 4 , 6 , 0 , 24 );
texture_set_interpolation ( global.dinterpolation );
d3d_transform_set_identity();

tt = t3;
w = 40;
draw_set_alpha ( 0.25 );
d3d_draw_wall ( 64 - w , -240 , w , 64 + w , -240 , -w , tt , 1 , 1 );
draw_set_alpha ( 1 );
w = 12;
d3d_draw_wall ( 64 - w , -239 , w , 64 + w , -239 , -w , tt , 1 , 1 );

draw_set_blend_mode ( bm_normal );

d3d_set_projection_ortho ( view_xview[0] , view_yview[0] , view_wview[0] , view_hview[0] , view_angle[0] );