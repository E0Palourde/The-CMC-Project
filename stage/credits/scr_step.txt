if ( timer_speed == 0 )
  exit;

if ( fadeout )
  {
  depth = obj_control.depth + 1;
  timer += 1;
  if ( timer == 100 )
    {
    global . match_playing = 0;
    with ( player )
      {
      moveright = 0;
      moveleft = 0;
      moveup = 0;
      movedown = 0;
      attacking = 0;
      special = 0;
      shieldup = 0;
      grab = 0;
      taunt = 0;
      smash = 0;
      }
    }
  if ( timer <= 200 )
    fade_music ( 1 - timer / 200 );
  if ( timer == 200 )
    stop_music();
  skipper = 0
  
  if ( timer >= 298 )
   {
    for ( i = 0; i < MAX_FIGHTERS; i += 1 )
     {
      for ( u = 0; u < 16; u += 1 )
       {
        if ( obj_control.in_check[i,u] )
         {
          skipper = 1;
          continue;
         }
       }
     }
   }
  
  if timer = 299 and skipper = 0
  timer -= 1
  
  if ( timer == 300 )
    {
    //room_goto ( rm_css );
    //show_question ( "???? " );
    if file_exists("fighter/"+string(db_charname[global.gs_character[0],1+global.gs_form[0]*3])+"/promoart.png")
	file_copy("fighter/"+string(db_charname[global.gs_character[0],1+global.gs_form[0]*3])+"/promoart.png","gfx/promo/"+string(global.gs_character[0])+" - "+string(db_charname[global.gs_character[0],2+global.gs_form[0]*3])+".png")
	else if file_exists(temp_directory+"/fighter/"+string(db_charname[global.gs_character[0],1+global.gs_form[0]*3])+"/promoart.png")
	file_copy(temp_directory+"/fighter/"+string(db_charname[global.gs_character[0],1+global.gs_form[0]*3])+"/promoart.png","gfx/promo/"+string(db_charname[global.gs_character[0],2+global.gs_form[0]*3])+".png")
    
	with ( obj_game_control )
      {
      obj_score_control . no_contest = 1;
      //script_execute ( rule_end_script );
      rule_stock_end();
      exit;
      }
    }
  exit;
  }

if ( thanksforplaying )
  {
  timer += 1;
  depth = 9;
  if ( timer >= time )
    {
    with ( obj_stage_bg ) 
      {
      if ( main_bg )
        boost = 1;
      }
    var o;
    o = instance_create ( 0 , 0 , obj_stage_bg );
    o.fadeout = 1;
    o.parent = parent;
    instance_destroy();
    }
  exit;
  }

if ( congratulations )
  {
  timer += 1;
  depth = 9;
  if ( timer == 50 )
    {
    if ( obj_classic.difficulty >= 9.5 )
      sound_play ( narration_wow_incredible );
      else
      sound_play ( narration_congratulations );
    }
  if ( timer == 170 )
    {
    hspeed = -16;
    gravity_direction = 0;
    gravity = 1;
    }
  if ( gravity == 1 )
    {
    squish = max ( -0.5 , squish - 0.01 );
    if ( x >= 2400 )
      {
      var o;
      o = instance_create ( 0 , 0 , obj_stage_bg );
      o.thanksforplaying = 1;
      o.parent = parent;
      o.time = 200;
      instance_destroy();
      }
    }
  exit;
  }
  
if ( results_table )
  {
  timer += 1;
  depth = 9;
  if ( timer == 3 )
    {
    if ( total > 0 )
    if ( ( hits / total ) >= 0.9 )
      {
      if ( db_stageunlock[36] == 0 )
        {
        record_unlock_stage ( 36 , 2 );
        }
      }
	  
    if ( total > 0 )
    if ( ( hits / total ) >= 0.9 )
      {
      if db_charunlock [ fighter_get_dbid_no_fail("bedr_2b") ] <= 0
        {
		record_unlock_character ( "bedr_2b" );
        }
      }
    }
  if ( timer < 300 )
    {
    if ( extended < 2 )
      extended += 0.1;
    }
    else
    {
    if ( extended > 0 )
      extended -= 0.1;
    if ( extended <= 0.1 )
      {
      parent.credit_index += 1;
      instance_destroy();
      }
    }
  exit;
  }

if ( credits_entry )
  {
  var slow, destroy;
  slow = 0;
  destroy = 0;
  if ( type == 2 )
    slow = 1;
  if ( hx * 2 > ( obj_game_control.camera_boundary_r - obj_game_control.camera_boundary_l ) )
    wave_type = -2;
  if ( wave_type == 6 )
  if ( hx * 4 >= ( obj_game_control.camera_boundary_r - obj_game_control.camera_boundary_l ) )
    wave_type = 0;
  // different behavior depending on wave type
  switch ( wave_type )
    {
    case -2:
      y -= credit_speed;
      if ( y < obj_game_control.death_u )
        instance_destroy();
      break;
    case -1:
      if ( y < obj_game_control.camera_boundary_d && y > obj_game_control.camera_boundary_u )
        y -= credit_speed * 0.9;
        else
        y -= credit_speed * 1.2;
      if ( y < obj_game_control.death_u )
        destroy = 1;
      break;
    case 0:
      if ( !marked )
        direction += wave_speed;
      var w;
      w = min ( 48 , max ( 0 , ( obj_game_control.camera_boundary_r - obj_game_control.camera_boundary_l ) * 0.5 - hx - 64 ) );
      x = xstart + lengthdir_x ( w , direction ) * ( 1 - slow * 0.5 );
      y -= credit_speed;
      if ( y < obj_game_control.death_u )
        destroy = 1;
      break;
    case 1:
    case 2:
      if ( !marked )
      {
      if ( !marked2 )
        {
        marked2 = 1;
        x = obj_game_control.camera_boundary_l + hx + random ( ( obj_game_control.camera_boundary_r - obj_game_control.camera_boundary_l ) - hx * 2 );
        }
      if ( wave_type == 1 )
        {
        x += 2 - slow;
        if ( x >= obj_game_control.camera_boundary_r - hx )
          wave_type = 2;
        }
        else
        {
        x -= 2 - slow;
        if ( x <= obj_game_control.camera_boundary_l + hx )
          wave_type = 1;
        }
      }
      y -= credit_speed;
      if ( y < obj_game_control.death_u )
        destroy = 1;
      break;
    case 3:
      if ( !marked2 )
        {
        timer = floor ( random ( 120 ) );
        marked2 = 1;
        }
      timer += 1 - slow * 0.5;
      if ( timer >= 120 )
        timer -= 120;
      if ( !marked )
        {
        if ( timer < 59 )
          x = obj_game_control.camera_boundary_l + hx + 48;
          else
        if ( timer > 61 && timer < 117 )
          x = obj_game_control.camera_boundary_r - hx - 48;
          else
        if ( timer == 59 || timer == 119 )
          x = obj_game_control.camera_boundary_l + hx + 64;
          else
        if ( timer == 61 || timer == 117 )
          x = obj_game_control.camera_boundary_r - hx - 64;
          else
          x = xstart;
        }
      y -= credit_speed;
      if ( y < obj_game_control.death_u )
        destroy = 1;
      break;
    case 4:
    case 5:
      if ( !marked2 )
        {
        yy = y;
        marked2 = 1;
        }
      if ( !marked )
        direction += wave_speed * ( 1 - ( wave_type == 5 ) * 2 );
      var w;
      w = min ( 48 , max ( 0 , ( obj_game_control.camera_boundary_r - obj_game_control.camera_boundary_l ) * 0.5 - hx - 64 ) );
      x = xstart + lengthdir_x ( w , direction ) * ( 1 - slow * 0.5 );
      y = yy + lengthdir_y ( 8 , direction ) * ( 1 - slow * 0.5 );
      yy -= credit_speed;
      if ( yy < obj_game_control.death_u )
        destroy = 1;
      break;
    case 6:
      if ( !marked )
        direction += wave_speed;
      image_xscale = 1 + lengthdir_x ( 0.5 , direction );
      y -= credit_speed;
      if ( y < obj_game_control.death_u )
        destroy = 1;
      break;
    }
  // entry hitbox
  if ( !marked && credit_speed < 2 )
    {
    var vermin;
    vermin = stage_hitbox ( x - hx * image_xscale , y - hy , x + hx * image_xscale , y + hy );
    if ( vermin > 0 )
      {
      hitbox_hitspark ( vermin , x , y );
      //instance_create ( x , y , obj_spark_explode1 );
      marked = 1;
      }
    }
  if ( destroy )
    {
    parent.credit_shown += 1;
    parent.credit_hit += marked;
    instance_destroy();
    }
  exit;
  }
  
if ( main_bg )
  {
  // background speed stuff
  var dscroll, dsparkle, drot;
  dscroll = 1;
  dsparkle = 1;
  drot = 1;
  if ( boost )
    {
    boost_timer = min ( 1 , boost_timer + 0.005 );
    dscroll = 1 + boost_timer * 9;
    dsparkle = 1 + boost_timer * 19;
    drot = 1 + boost_timer;
    }
  // some background controlling stuff
  scroll -= dscroll;
  if ( scroll < 0 )
    scroll += 640;
  var i;
  for ( i = 0 ; i < sparkles_num ; i += 1 )
    {
    sparkles_dir[i] += sparkles_ds[i];
    sparkles_y[i] -= ( 1 + random ( 1 ) ) * dsparkle;
    if ( sparkles_y[i] < 0 )
      sparkles_y[i] += 2540;
    }
  i = camera_xdir;
  camera_xdir += camera_xdirs * drot;
  if ( camera_xdir >= 360 )
    camera_xdir -= 360;
  if ( sign ( camera_xdir - 180 ) != sign ( i - 180 ) || camera_xdirs == 0 )
    camera_xdirs = 1 + random ( 1 );
  i = camera_ydir;
  camera_ydir += camera_ydirs * drot;
  if ( camera_ydir >= 360 )
    camera_ydir -= 360;
  if ( sign ( camera_ydir - 180 ) != sign ( i - 180 ) || camera_ydirs == 0 )
    camera_ydirs = 1 + random ( 1 );
  
  var start;
  start = 0;
  for ( i = 0 ; i < 6 ; i += 1 )
    {
    if ( global.gs_player[i] != 1 )
      continue;
    if ( obj_control.in_check[i,4] == 1 )
      start = 1;
    }
  if ( start && timer > 360 )
    {
    if ( credit_speed == 1 )
      credit_speed = 8;
      else
      credit_speed = 1;
    with ( obj_stage_bg )
      {
      if ( credits_entry )
        credit_speed = other.credit_speed;
      }
    }
    
  /*if ( keyboard_check_pressed ( vk_space ) )
    {
    if ( !spawneddebug )
      {
      spawneddebug = instance_create ( 0 , 0 , obj_stage_bg );
      spawneddebug.congratulations = 1;
      } else spawndebug.timer = 0;
    }*/
    
  // spawning the credits
  timer += 1;
  if ( timer == 1 )
    {
    with ( player )
      vspeed = fall_speed;
    }
  if ( timer >= 300 )
    {
    credit_timer -= credit_speed;
    if ( credit_timer <= 0 )
      {
      if ( credit_index < credit_events )
        {
        if ( credit_type[credit_index] > 0 )
          {
          var o;
          o = instance_create ( ( obj_game_control.death_r + obj_game_control.death_l ) * 0.5 , obj_game_control.death_d , obj_stage_bg );
          o.credits_entry = 1;
          o.str = credit_text[credit_index];
          //show_message ( string ( o.str ) );
          o.type = credit_type[credit_index];
          // calculate the hitbox size
          draw_set_font ( fnt_credits );
          o.hx = string_width ( o.str ) * 0.5;
          o.hy = string_height ( o.str ) * 0.5;
          o.credit_speed = credit_speed;
          o.wave_type = choose ( 0 , 0 , 1 , 2 , 4 , 5 , 6 );
          o.direction = random ( 360 );
          o.wave_speed = 3 + random ( 2 );
          o.depth = 9 - o.type;
          o.parent = id;
          }
        credit_index += 1;
        }
      credit_timer += 22;
      }
    if ( credit_index == credit_events )
      {
      var a;
      a = 0;
      with ( obj_stage_bg )
        {
        if ( credits_entry )
          a = 1;
        }
      if ( a == 0 )
        {
        //show_message ( "the credits have ended#credits shown: "+string(credit_shown)+"#credits struck: "+string(credit_hit) );
        credit_index = credit_events + 1;
        var o;
        o = instance_create ( 0 , 0 , obj_stage_bg );
        o.results_table = 1;
        o.hits = credit_hit;
        o.total = credit_shown;
        o.parent = id;
        }
      }
    if ( credit_index == credit_events + 2 )
      {
      var o;
      o = instance_create ( 0 , 0 , obj_stage_bg );
      o.congratulations = 1;
      o.parent = id;
      credit_index += 1;
      }
    }
  }