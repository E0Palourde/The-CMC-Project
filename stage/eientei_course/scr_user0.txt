// Layout generation.
// empty space - empty space

map[0,0] = 0;
ti[0,0] = 0;
tx[0,0] = 0;
ty[0,0] = 0;

var str, c, o, i, xx, yy, tn;
w = 0;
h = 0;
//event_user(2);


file = file_bin_open( le_file , 0 );
how_wide = floor(background_get_width(bg_pixel)/32)

work_room_width = file_bin_read_short( file );
work_room_height = file_bin_read_short( file );

w = work_room_width;
h = work_room_height
yy = 0;
while ( yy < h )
  {
  
  show_debug_message("below w = work_room_width")
  for ( i = 1 ; i <= w ; i += 1 )
    {
	show_debug_message("below for ( i = 1 ; i <= w ; i += 1 )")
    c = file_bin_read_short( file );
    tn = c;
    if ( tn == 0)
      {
      map[i-1,yy] = 0;
      }
      else
      {
      map[i-1,yy] = 1;
      ti[i-1,yy] = tn - 1;
      tn -= 1;
      tx[i-1,yy] = tn mod how_wide;
      ty[i-1,yy] = floor ( tn / how_wide );
      }
    }
  yy += 1;
  show_debug_message("below yy += 1")
  }
file_text_close ( file );
show_debug_message("below file_text_close")

for ( x = w - 1 ; x >= 0 ; x -= 1 )
for ( y = h - 1 ; y >= 0 ; y -= 1 )
  {
  if ( map[x,y] == 0 )
    continue;
    show_debug_message("on the tile placing part")
	if upside_down = 1{
		erm = h//32
		epic_y = erm - y
		addendun = 0
		
		pingas = tile_add( bg_pixel , 0 + tx[x,y] * 32 , 0 + ty[x,y] * 32 , 32 , 32 , x * (32*tile_scale) , (epic_y*(32*tile_scale))+addendun , 10 );
		tile_set_scale(pingas,tile_scale,-tile_scale)
	}else{
		//pingas = tile_add( bg_pixel , 0 + tx[x,y] * 32 , 0 + ty[x,y] * 32 , 32 , 32 , x * 32 , y * 32 , 10 );
		pingas = tile_add( bg_pixel , 0 + tx[x,y] * 32 , 0 + ty[x,y] * 32 , 32 , 32 , x * (32*tile_scale) , y * (32*tile_scale) , 10 );
		tile_set_scale(pingas,tile_scale,tile_scale)
		
		
	}
	
    //tile_add( bg_pixel , 1 + tx[x,y] * 34 , 1 + ty[x,y] * 34 , 32 , 32 , x * 24 - 4 , y * 24 - 4 , 9 );
    //pingas = tile_add( bg_pixel , 0 + tx[x,y] * 32 , 0 + ty[x,y] * 32 , 32 , 32 , x * 32 , y * 32 , 10 );
	//tile_set_scale(pingas,1,-1)
	
  }

show_debug_message("before the obj_game_control stuff")
obj_game_control.camera_boundary_l = 0;
obj_game_control.camera_boundary_u = 0;
obj_game_control.camera_boundary_d = h * 32*tile_scale;
obj_game_control.camera_boundary_r = w * 32*tile_scale;
obj_game_control.death_l = -32;
obj_game_control.death_u = -32;
obj_game_control.death_r = obj_game_control.camera_boundary_r + 32;
obj_game_control.death_d = obj_game_control.camera_boundary_d + 32;


show_debug_message("before the obj_game_control stuff")
event_user(1);