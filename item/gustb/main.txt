~~INIT:
gustb_spr = ispr_add_alpha ( "item/gustb/gusty.png" , 1 , 0 , 0 , 15 , 23 );
gustbh_spr = ispr_add_alpha ( "item/gustb/gustyh.png" , 1 , 0 , 0 , 13 , 15 );
gustbnado_spr = ispr_add_alpha ( "item/gustb/nado.png" , 8 , 0 , 0 , 26 , 24 );
gustb_snd = isound_add ( "item/gustb/bicycle.wav" , 0 , 0 );

~~DEINIT:
if ( sprite_exists ( gustb_spr ) )
  spr_delete ( gustb_spr );
if ( sprite_exists ( gustbh_spr ) )
  spr_delete ( gustbh_spr );
if ( sprite_exists ( gustbnado_spr ) )
  spr_delete ( gustbnado_spr );


~~ENTER:
sprite_index = obj_game_control.gustb_spr;
sprite_air = obj_game_control.gustb_spr;
sprite_held = obj_game_control.gustbh_spr;
air_spr_y = -20;
type = "batter";
image_xscale = 0.75;
image_yscale = 0.75;
hit_timer = 0;
shadow = 9;
custom_land = 0;

batter_jab = 1;
batter_stilt = 1;
batter_dash = 0;
batter_ssmash = 1;
batter_nair = 0;
batter_fair = 0;

ammo = 45 + floor ( random ( 12 ) );
animation = 10;

bouncingoff = 0;
firedelay = 0;
playsampleid = 0;


~~LAND:
if ( ammo <= 0 )
  {
  if ( playsampleid > 0 )
    {
    FMODInstanceStop ( playsampleid );
    playsampleid = -1;
    }
  instance_create ( x , y - 4 , obj_smoke_front );
  instance_destroy();
  exit;
  }

hspeed *= 0.25;
vspeed *= -0.25;
if ( bouncingoff == 2 )
  {
  vspeed = -5;
  bouncingoff = 1;
  playsample = 0;
  playsampleid = -1;
  }
  else
  {
  if ( playsampleid > 0 )
    {
    FMODInstanceStop ( playsampleid );
    playsampleid = -1;
    }
  bouncingoff = 0;
  }

~~STEP:
if ( hit_timer > 0 )
  {
  shakex = -2 + floor ( random ( 5 ) );
  shakey = -2 + floor ( random ( 5 ) );
  hit_timer -= 1;
  if ( hit_timer > 2 )
    exit;
  }
shakex = 0;
shakey = 0;
if ( thrown > 0 )
  {
  collision_type = 2;
  can_pick_up = 0.5;
  
  if ( on_floor && on_platform && speed < 0.1 )
    {
    thrown = -99;
    }
  }
  else
  {
  if ( held > 0 )
    bouncingoff = 2;
  collision_type = 0;
  can_pick_up = 1;
  }
  
if ( bouncingoff == 1 )
  {
  rot_speed = sign ( rot_speed ) * choose ( 34 , 35 );
  firedelay -= 1;
  if ( firedelay <= 0 && ammo > 0 )
    {
    firedelay = 4;
    if ( playsample == 0 )
      {
      FMODInstanceStop ( playsampleid );
      playsampleid = sound_play ( obj_game_control.gustb_snd );
      }
    playsample += 1;
    if ( playsample == 9 ) playsample = 0;
    nado = instance_create ( x + lengthdir_x ( 60 , sprite_angle ) , y + lengthdir_y ( 60 , sprite_angle ) , obj_spark );
    nado.speed = 0.5;
    nado.direction = sprite_angle;
    nado.sprite_index = obj_game_control.gustbnado_spr;
    nado.image_xscale = 1.5;
    nado.image_yscale = 1;
    nado.image_speed = 0.75;
    nado.image_alpha = 0.8;
    nado.draw_color_only = 1;
    nado.alpha_add = -0.1;
    nado.alarm[0] = 10;
    nado.image_angle = sprite_angle;
    nado.image_index = 0;
    nado.depth = -5;
    proj = instance_create ( x + lengthdir_x ( 45 , sprite_angle ) , y + lengthdir_y ( 45 , sprite_angle ) , wind );
    //proj.shieldable = 1;
    proj.attacker = self.id;
    proj.timer = 0;
    proj.time = 4;
    //proj.visible = 1;
    proj.image_xscale = 3.1;
    proj.image_yscale = 1.25;
    proj.push_x = lengthdir_x ( 8 , sprite_angle );
    proj.push_y = lengthdir_y ( 8 , sprite_angle );
    //proj.depth = -4;
    //proj.image_alpha = 0.25;
    proj.image_angle = sprite_angle;
    ammo -= 1;
    }
  }

if ( bouncingoff > 0 )
  custom_land = 1;
  else
  custom_land = 0;

~~ITEM CONTACT:
if ( held > 0 ) exit;
if ( thrown <= 0 ) exit;
if ( hit_timer > 0 ) exit;
hit_timer = 9;
hspeed *= -0.3;
if ( y < other.y )
  vspeed = -3;
  else
  vspeed = choose ( 0 , 1 );
thrown = -99;


~~PLAYER CONTACT:
if ( held > 0 ) exit;
if ( hit_timer > 0 ) exit;
if ( thrown <= 0 ) exit;
if ( !item_candamage() ) exit;
if ( !item_candamageatk ( thrown ) ) exit;
hit_timer = 18;
last_hit_proj = create_projectile ( 9 , 90 - sign ( hspeed ) * 52 , 4 + min ( 2 , speed * 0.25 ) , 3.2 , 22 , 7 , kick3 , obj_spark_hit2 , 1 , 1 , 0 , 12 , thrown , 3 , -1 );
hspeed *= -0.3;
vspeed = -3;
thrown = -99;


~~HIT:
if ( held > 0 ) exit;
if ( hit_timer > 0 ) exit;
if ( thrown <= 0 ) exit;
if ( vermin.damage > 2 )
  {
  object_stun ( vermin , 8 );
  hit_timer = 9;
  hspeed *= -0.3;
  vspeed = -3;
  thrown = -99;
  object_stun ( self.id , 6 );
  }


~~CUSTOM:
if ( speed == 0 )
  {
  speed = last_speed;
  direction = last_direction;
  }
  else
  {
  last_speed = speed;
  last_direction = direction;
  }
moving_object = 1;
vspeed -= 0.1;
image_angle = direction + 90;
time = 28;
if ( timer > 2 && timer < 14 )
  {
  if ( random ( 40 ) < 1 )
    instance_create ( x , y , obj_smoke );
  }
if ( timer > 18 )
  {
  hit = 2;
  image_alpha -= 0.08;
  }
if ( image_alpha < 0 )
  instance_destroy();


~~PLAYER EVENT:
if ( timer == -1 )
  {
  sprite_index = item_shoot_sprite;
  image_index = 0;
  state_type = "air_attack";
  timer_speed = 1;
  timer = 0;
  time = 20;
  image_speed = item_shoot_frame / 5;
  held_item.firedelay = 0;
  playsample = 0;
  playsampleid = -1;
  attacking = 1;
  }

if ( air == 0 )
  {
  hspeed *= 0.8;
  }

if ( timer == 6 && attacking )
  {
  timer = 5;
  }
if ( timer == 5 )
  {
  image_index = item_shoot_frame;
  image_speed = image_number / 15;
  item_posupdate();
  shakex = ( round ( held_item.firedelay ) mod 2 ) * ( 1 - facing * 2 );
  if ( held_item.firedelay == 0 )
    {
    held_item.firedelay = 9;
    if ( held_item.ammo == 0 )
      {
      FMODInstanceStop ( playsampleid );
      instance_create ( held_item.x + 21 * ( 1 - facing * 2 ) , held_item.y , obj_smoke );
      held_item.animation = 3;
      exit;
      }
    if ( playsample == 0 )
      {
      FMODInstanceStop ( playsampleid );
      playsampleid = sound_play ( obj_game_control.gustb_snd );
      }
    playsample += 1;
    if ( playsample == 4 ) playsample = 0;
    spark = instance_create ( x , y + 1 , obj_dust_effect );
    spark.facing = facing;
    nado = instance_create ( x , y , obj_spark );
    nado.x = held_item.x + 30 - 60 * facing;
    nado.y = held_item.y;
    nado.hspeed = 3.5 - facing * 7;
    nado.vspeed = -0.5 + random ( 1 );
    nado.sprite_index = obj_game_control.gustbnado_spr;
    nado.loop = 3;
    //nado.image_xscale = 1.5 - facing * 3;
    //nado.image_yscale = 1;
    nado.image_xscale = 0.75 - facing * 1.5;
    nado.image_yscale = choose ( 0.5 , -0.5 );
    nado.image_speed = 0.75;
    nado.image_alpha = 1;
    nado.draw_color_only = 1;
    nado.alpha_add = -0.05;
    nado.alarm[0] = 20;
    nado.xscale_add = 0.125 * sign ( nado.image_xscale );
    nado.yscale_add = 0.083 * sign ( nado.image_yscale );
    nado.image_angle = 0;
    nado.image_index = 0;
    nado.depth = -5;
    proj = instance_create ( x , y , wind );
    //proj.shieldable = 1;
    proj.attacker = self.id;
    proj.timer = 0;
    proj.time = 4;
    proj.x = held_item.x + 45 - 90 * facing;
    proj.y = held_item.y;
    //proj.visible = 1;
    proj.image_xscale = 3.35;
    proj.image_yscale = 1.65;
    proj.push_x = 9 - 18 * facing;
    //proj.depth = -4;
    //proj.image_alpha = 0.25;
    held_item.ammo -= 1;
    }
    else
    {
    held_item.firedelay -= 1;
    }
  }
if ( timer == 6 )
  {
  shakex = 0;
  }
if ( timer == 19 )
  {
  FMODInstanceStop ( playsampleid );
  }
~~END OF FILE