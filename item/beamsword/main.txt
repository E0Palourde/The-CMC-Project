~~INIT:
beamsword_basis_spr = ispr_add_alpha ( "item/beamsword/basis.png" , 1 , 0 , 0 , 7 , 8 );
beamsword_held_spr = ispr_add_alpha ( "item/beamsword/held.png" , 1 , 0 , 0 , 4 , 7 );
beamsword_beam_spr = ispr_add_alpha ( "item/beamsword/beam.png" , 7 , 0 , 0 , 0 , 8 );
beamsword1_snd = isound_add ( "item/beamsword/beamsword1.wav" , 0 , 0 );
beamsword2_snd = isound_add ( "item/beamsword/beamsword2.wav" , 0 , 0 );

~~DEINIT:
if ( sprite_exists ( beamsword_basis_spr ) )
  spr_delete ( beamsword_basis_spr );
if ( sprite_exists ( beamsword_held_spr ) )
  spr_delete ( beamsword_held_spr );
if ( sprite_exists ( beamsword_beam_spr ) )
  spr_delete ( beamsword_beam_spr );

~~ENTER:
sprite_index = obj_items_control.beamsword_basis_spr;
sprite_air = obj_items_control.beamsword_basis_spr;
sprite_held = obj_items_control.beamsword_held_spr;
air_spr_y = -6;
image_xscale = 1;
image_yscale = 1;
hit_timer = 0;
type = "batter";
var i;
for ( i = 0 ; i < 48 ; i += 1 )
  {
  bx[i] = x;
  by[i] = y;
  ba[i] = 90;
  }

~~STEP:
if ( hit_timer > 0 )
  {
  shakex = -2 + floor ( random ( 5 ) );
  shakey = -2 + floor ( random ( 5 ) );
  hit_timer -= 1;
  if ( hit_timer > 2 )
    exit;
  }
shakex = 0;
shakey = 0;
if ( thrown > 0 )
  {
  var i;
  for ( i = 0 ; i < 48 ; i += 1 )
    {
    bx[i] = x;
    by[i] = y;
    ba[i] = 90;
    }
  collision_type = 3;
  can_pick_up = 0.5;
  
  if ( on_floor && on_platform && speed < 0.1 )
    {
    thrown = -99;
    }
  }
  else
  {
  collision_type = 0;
  can_pick_up = 1;
  }

~~ITEM CONTACT:
if ( held > 0 ) exit;
if ( thrown <= 0 ) exit;
if ( hit_timer > 0 ) exit;
hit_timer = 9;
hspeed *= -0.3;
vspeed = -3;
thrown = -99;


~~PLAYER CONTACT:
if ( held > 0 ) exit;
if ( hit_timer > 0 ) exit;
if ( thrown <= 0 ) exit;
if ( !item_candamage() ) exit;
if ( !item_candamageatk ( thrown ) ) exit;
hit_timer = 18;
last_hit_proj = create_projectile ( 8 , 90 - sign ( hspeed ) * 45 , 9 + min ( 2 , speed * 0.2 ) , 2.2 , 15 , 17 , kick2 , obj_spark_hit2 , 1 , 1 , 0 , 12 , thrown , 3 , -1 );
hspeed *= -0.3;
vspeed = -3;
thrown = -99;


~~HIT:
if ( held > 0 ) exit;
if ( hit_timer > 0 ) exit;
if ( thrown <= 0 ) exit;
if ( vermin.damage > 4 )
  {
  object_stun ( vermin , 8 );
  hit_timer = 9;
  hspeed *= -0.3;
  vspeed = -3;
  thrown = -99;
  object_stun ( self.id , 6 );
  }


~~DRAW:
if ( held == -99 )
  {
  exit;
  }
texture_set_interpolation ( 1 );

var i, x1, x2, y1, y2, a1, a2, da, a;
a = 1;
if ( held.image_speed > 0 )
  a = ceil ( 1 / held.image_speed );
if ( a > 47 )
  a = 47;
x1 = x;
y1 = y;
a1 = round ( sprite_angle + 360 ) mod 360;
x2 = bx[a];
y2 = by[a];
a2 = round ( ba[a] + 360 ) mod 360;
da = a2 - a1;
if ( da > 180 )
  a1 += 360;
if ( da < -180 )
  a1 -= 360;
  
var xx, yy, aa, top;
if ( held.attack_type == "item_batter_jab"
  || held.attack_type == "item_batter_stilt"
  || held.attack_type == "item_batter_dash"
  || held.attack_type == "item_batter_ssmash" )
  {
  top = min ( 64 , max ( 24 , round ( point_distance ( x1 , y1 , x2 , y2 ) + da * 0.25 ) ) );
  for ( i = 0 ; i < top ; i += 1 )
    {
    xx = ( x1 * i + x2 * ( top - i ) ) / top;
    yy = ( y1 * i + y2 * ( top - i ) ) / top;
    aa = ( a1 * i + a2 * ( top - i ) ) / top;
    draw_sprite_ext ( obj_items_control.beamsword_beam_spr , held.number , xx + lengthdir_x ( 10 , aa ) ,
      yy + lengthdir_y ( 10 , aa ) , 0.5 , 0.5 , aa , c_white , 0.15 );
    }
  }

draw_sprite_ext ( obj_items_control.beamsword_beam_spr , held.number , x + lengthdir_x ( 10 , sprite_angle ) ,
  y + lengthdir_y ( 10 , sprite_angle ) , 0.5 , 0.5 , sprite_angle , c_white , 1 );
texture_set_interpolation ( global.dinterpolation );


~~PLAYER EVENT:
if ( timer == -1 )
  {
  hspeed = 0;
  sprite_index = item_swing_sprite;
  image_index = 0;
  switch ( attack_type )
    {
    case "item_batter_jab":
      image_speed = item_swing_frame / 6;
      time = 12;
      break;
    case "item_batter_stilt":
    case "item_batter_dash":
      image_speed = item_swing_frame / 10;
      time = 15;
      break;
    case "item_batter_ssmash":
      image_speed = item_swing_frame / 12;
      time = 30;
      break;
    }
  state_type = "air_attack";
  timer_speed = 1;
  timer = 0;
  item_posupdate();
  with ( held_item )
    {
    var i;
    for ( i = 0 ; i < 48 ; i += 1 )
      {
      bx[i] = x;
      by[i] = y;
      ba[i] = sprite_angle;
      }
    }
  }

switch ( attack_type )
  {
  case "item_batter_jab":
    switch ( timer )
      {
      case 6:
        sound_play ( obj_items_control.beamsword1_snd );
        sound_play ( swingsnd5 );
        image_index = item_swing_frame;
        image_speed = ( image_number - image_index ) / ( time - timer );
        item_posupdate();
        create_hitbox ( 9 , 50 + facing * 80 , 3.6 , 3.2 , 7 , 4 ,
          slash1 , obj_spark_hit2 , 1.8 , 0.8 ,
         0 , 0 , self.id , 4 , 0 );
        hitbox.hitbox_x = ( held_item.x - x ) + ( 1 - facing * 2 ) * 8;
        hitbox.hitbox_y = actual_height * 0.5;
        break;
      }
    break;
  case "item_batter_stilt":
  case "item_batter_dash":
    switch ( timer )
      {
      case 10:
        sound_play ( obj_items_control.beamsword1_snd );
        sound_play ( swingsnd5 );
        image_index = item_swing_frame;
        image_speed = ( image_number - image_index ) / ( time - timer );
        item_posupdate();
        create_hitbox ( 12 , 40 + facing * 100 , 4 , 5.6 , 10 , 6 ,
          slash2 , obj_spark_hit3 , 1.8 , 0.8 ,
         0 , 0 , self.id , 4 , 0 );
        hitbox.hitbox_x = ( held_item.x - x ) + ( 1 - facing * 2 ) * 8;
        hitbox.hitbox_y = actual_height * 0.5;
        break;
      }
    break;
  case "item_batter_ssmash":
    switch ( timer )
      {
      case 12:
        sound_play ( obj_items_control.beamsword2_snd );
        sound_play ( swingsnd2 );
        image_index = item_swing_frame;
        image_speed = ( image_number - image_index ) / ( time - timer );
        item_posupdate();
        create_hitbox ( 16 , 30 + facing * 120 , 7 , 7.4 , 14 , 14 ,
          slash3 , obj_spark_hit4 , 1.9 , 0.9 ,
         0 , 0 , self.id , 4 , 0 );
        hitbox.hitbox_x = ( held_item.x - x ) + ( 1 - facing * 2 ) * 8;
        hitbox.hitbox_y = actual_height * 0.5;
        break;
      }
    break;
  }

item_posupdate();
with ( held_item )
  {
  var i;
  for ( i = 47 ; i > 0 ; i -= 1 )
    {
    bx[i] = bx[i-1];
    by[i] = by[i-1];
    ba[i] = ba[i-1];
    }
  bx[0] = x;
  by[0] = y;
  ba[0] = sprite_angle;
  }

~~END OF FILE