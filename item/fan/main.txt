~~INIT:
fan_spr = ispr_add_alpha ( "item/fan/fan.png" , 1 , 0 , 0 , 13 , 15 );
fanh_spr = ispr_add_alpha ( "item/fan/fan2.png" , 1 , 0 , 0 , 1 , 13 );
mask_index = spr_item_mask3;


~~DEINIT:
if ( sprite_exists ( fan_spr ) )
  spr_delete ( fan_spr );
if ( sprite_exists ( fanh_spr ) )
  spr_delete ( fanh_spr );


~~ENTER:
sprite_index = obj_game_control.fan_spr;
sprite_air = obj_game_control.fan_spr;
sprite_held = obj_game_control.fanh_spr;
air_spr_y = -14;
image_xscale = 0.6;
image_yscale = 0.6;
hit_timer = 0;
type = "batter";
weight = 0.1;
max_fall_speed = 3;
shadow = 6;

~~STEP:
if ( hit_timer > 0 )
  {
  shakex = -2 + floor ( random ( 5 ) );
  shakey = -2 + floor ( random ( 5 ) );
  hit_timer -= 1;
  if ( hit_timer > 2 )
    exit;
  }
shakex = 0;
shakey = 0;
if ( thrown > 0 )
  {
  collision_type = 3;
  can_pick_up = 0.5;
  
  if ( on_floor && on_platform && speed < 0.1 )
    {
    thrown = -99;
    }
  }
  else
  {
  collision_type = 0;
  can_pick_up = 1;
  }

~~ITEM CONTACT:
if ( held > 0 ) exit;
if ( thrown <= 0 ) exit;
if ( hit_timer > 0 ) exit;
hit_timer = 9;
hspeed *= -0.3;
vspeed = -3;
thrown = -99;


~~PLAYER CONTACT:
if ( held > 0 ) exit;
if ( hit_timer > 0 ) exit;
if ( thrown <= 0 ) exit;
if ( !item_candamage() ) exit;
if ( !item_candamageatk ( thrown ) ) exit;
hit_timer = 18;
last_hit_proj = create_projectile ( 4 , 90 , 5 + min ( 1.7 , speed * 0.2 ) , 2.7 , 10 , 10 , paperhit , obj_spark_hit3 , 1 , 1 , 0 , 12 , thrown , 3 , -1 );
hspeed *= -0.3;
vspeed = -3;
thrown = -99;


~~HIT:
if ( held > 0 ) exit;
if ( hit_timer > 0 ) exit;
if ( thrown <= 0 ) exit;
if ( vermin.damage > 3 )
  {
  object_stun ( vermin , 8 );
  hit_timer = 9;
  hspeed *= -0.3;
  vspeed = -3;
  thrown = -99;
  object_stun ( self.id , 6 );
  }


~~PLAYER EVENT:
if ( timer == -1 )
  {
  hspeed = 0;
  sprite_index = item_swing_sprite;
  image_index = 0;
  switch ( attack_type )
    {
    case "item_batter_jab":
      image_speed = item_swing_frame / 2;
      time = 6;
      break;
    case "item_batter_stilt":
    case "item_batter_dash":
      image_speed = item_swing_frame / 4;
      time = 9;
      break;
    case "item_batter_ssmash":
      image_speed = item_swing_frame / 9;
      time = 17;
      break;
    }
  state_type = "air_attack";
  timer_speed = 1;
  timer = 0;
  }

switch ( attack_type )
  {
  case "item_batter_jab":
    switch ( timer )
      {
      case 2:
        sound_play ( swingsnd1 );
        image_index = item_swing_frame;
        image_speed = ( image_number - image_index ) / ( time - timer );
        item_posupdate();
        create_hitbox ( 2 , 40 + facing * 100 , 3.4 , 2.2 , 1 , 3 ,
          paperhit , obj_spark_hit1 , 1.1 , 0.7 ,
         0 , 0 , self.id , 4 , 0 );
        hitbox.di *= 3;
        hitbox.hitbox_x = ( held_item.x - x ) + ( 1 - facing * 2 ) * 3;
        hitbox.hitbox_y = actual_height * 0.5;
        break;
      }
    break;
  case "item_batter_stilt":
  case "item_batter_dash":
    switch ( timer )
      {
      case 4:
        sound_play ( swingsnd1 );
        image_index = item_swing_frame;
        image_speed = ( image_number - image_index ) / ( time - timer );
        item_posupdate();
        create_hitbox ( 3 , 40 + facing * 100 , 3.8 , 2.6 , 2 , 7 ,
          paperhit , obj_spark_hit1 , 1.1 , 0.7 ,
         0 , 0 , self.id , 4 , 0 );
        hitbox.di *= 3;
        hitbox.hitbox_x = ( held_item.x - x ) + ( 1 - facing * 2 ) * 3;
        hitbox.hitbox_y = actual_height * 0.5;
        break;
      }
    break;
  case "item_batter_ssmash":
    switch ( timer )
      {
      case 4:
        var o;
        o = instance_create ( held_item.x , held_item.y , obj_spark_effect );
        o.depth -= 2;
        break;
      case 9:
        sound_play ( swingsnd2 );
        image_index = item_swing_frame;
        image_speed = ( image_number - image_index ) / ( time - timer );
        item_posupdate();
        create_hitbox ( 5 , 45 + facing * 90 , 4 , 3.2 , 3 , 15 ,
          paperhit , obj_spark_hit1 , 1.1 , 0.7 ,
         0 , 0 , self.id , 4 , 0 );
        hitbox.di *= 2.4;
        hitbox.hitbox_x = ( held_item.x - x ) + ( 1 - facing * 2 ) * 3;
        hitbox.hitbox_y = actual_height * 0.5;
        break;
      }
    break;
  }
~~END OF FILE