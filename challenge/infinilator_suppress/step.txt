//Check pos

//if (obj_game_control.fighter_slot[0, 0].shieldup) push_test_popup("x: " + string(floor(obj_game_control.fighter_slot[0, 0].x / tile_scale / 32)) + ";   y: " + string(floor(obj_game_control.fighter_slot[0, 0].y / tile_scale / 32)), 4, 600);


doors[0,0] = 67; doors[0,1] = 6;   doors[0,2] = 66; doors[0,3] = 26;
doors[1,0] = 108; doors[1,1] = 6;   doors[1,2] = 109; doors[1,3] = 26;
doors[2,0] = 64; doors[2,1] = 26;   doors[2,2] = 64; doors[2,3] = 39;
doors[3,0] = 111; doors[3,1] = 26;   doors[3,2] = 111; doors[3,3] = 39;
doors[4,0] = 87; doors[4,1] = 39;   doors[4,2] = 87; doors[4,3] = 53;
doors[5,0] = 88; doors[5,1] = 39;   doors[5,2] = 88; doors[5,3] = 53;
doors[6,0] = 70; doors[6,1] = 53;   doors[6,2] = 70; doors[6,3] = 58;
doors[7,0] = 105; doors[7,1] = 53;   doors[7,2] = 105; doors[7,3] = 58;
doors[8,0] = 38; doors[8,1] = 58;   doors[8,2] = 38; doors[8,3] = 68;
doors[9,0] = 70; doors[9,1] = 68;   doors[9,2] = 70; doors[9,3] = 63;
doors[10,0] = 105; doors[10,1] = 68;   doors[10,2] = 105; doors[10,3] = 63;
doors[11,0] = 137; doors[11,1] = 58;   doors[11,2] = 137; doors[11,3] = 68;
doors[12,0] = 36; doors[12,1] = 68;   doors[12,2] = 36; doors[12,3] = 86;
doors[13,0] = 139; doors[13,1] = 68;   doors[13,2] = 139; doors[13,3] = 86;


exitdoors[0,0] = 89; exitdoors[0,1] = 6;
exitdoors[1,0] = 121; exitdoors[1,1] = 39;
exitdoors[2,0] = 89; exitdoors[2,1] = 26;
exitdoors[3,0] = 54; exitdoors[3,1] = 39;
exitdoors[4,0] = 87; exitdoors[4,1] = 63;
exitdoors[5,0] = 45; exitdoors[5,1] = 68;
exitdoors[6,0] = 130; exitdoors[6,1] = 68;
exitdoors[7,0] = 49; exitdoors[7,1] = 86;
exitdoors[8,0] = 126; exitdoors[8,1] = 86;



p = obj_game_control.fighter_slot[0, 0];
doorhighlight = -1;

for (i = 0; i < 14; i+=1) {
	if (p.x >= doors[i,0]*32*tile_scale
	&& p.x <= (doors[i,0]+1)*32*tile_scale
	&& p.y >= doors[i,1]*32*tile_scale
	&& p.y <= (doors[i,1]+1)*32*tile_scale
	) {
		doorhighlight = i;
		if (p.shieldup && !oldshieldup) {
			p.shieldup = 0;
			if ((i == 4 || i == 5) && core_suppress_stage < 1) {
				push_test_popup("This door is locked. Suppress all 4 upper-level cores first.", 4, 240);
				continue;
			}
			if ((i == 12 || i == 13) && core_suppress_stage < 2) {
				push_test_popup("This door is locked. Suppress all 3 middle-level cores first.", 4, 240);
				continue;
			}
			p.ignore_physics = 1;
			p.x = (doors[i,2]+0.5)*32*tile_scale;
			p.y = (doors[i,3]+0.99)*32*tile_scale;
		}
	}
}
for (i = 0; i < 14; i+=1) {
	if (p.x >= doors[i,2]*32*tile_scale
	&& p.x <= (doors[i,2]+1)*32*tile_scale
	&& p.y >= doors[i,3]*32*tile_scale
	&& p.y <= (doors[i,3]+1)*32*tile_scale
	) {
		doorhighlight = i;
		if (p.shieldup && !oldshieldup) {
			p.shieldup = 0;
			p.ignore_physics = 1;
			p.x = (doors[i,0]+0.5)*32*tile_scale;
			p.y = (doors[i,1]+0.99)*32*tile_scale;
		}
	}
}
for (i = 0; i < 9; i+=1) {
	if (p.x >= exitdoors[i,0]*32*tile_scale
	&& p.x <= (exitdoors[i,0]+1 + (i == 4))*32*tile_scale
	&& p.y >= exitdoors[i,1]*32*tile_scale
	&& p.y <= (exitdoors[i,1]+1)*32*tile_scale
	) {
		if (p.shieldup && !oldshieldup) {
			core_suppress_type = i;
			savefighterid = global.gs_character[0];
			gc_end();
			global.gs_character[0] = savefighterid;
			global.gs_player[0] = 1;
			db_challenge[global.current_challenge] = "infinilator_suppress/fight";
			chosen_char[0] = savefighterid;
			css_start_challenge();
			exit;
		}
	}
}
oldshieldup = p.shieldup;



// Target test main script!
//global.gs_can_pause = 0;
// OBV part
if ( time != -1 )
  timer += 1;

disable_cameramoving = 1
obj_game_control.disable_cameramoving = 1
  
// Ending them, states.
if ( timer >= time && time != -1 )
  {
  switch ( state_type )
    {
    case "countdown":
      graphic_timer = HUDANIM_Go;
      global . match_playing = 1;
      state_type = "idle";
      time = -1;
      break;
    case "failure":
      graphic_timer = -1;
      upbeat = 0;
      if ( global.gs_gamemode == "Classic" )
        {
        obj_classic.upbeat = upbeat;
        rules_stagecomplete();
        }
        else
        {
        state_type = "menu";
        menu_alpha = 0;
        time = -1;
		victory = 0
		script_execute ( rule_end_script );
        }
      break;
    case "complete":
      graphic_timer = -1;
      if ( upbeat == 2 )
        {
        bonus_minutes = recordtimer_minutes;
        bonus_seconds = recordtimer_seconds;
        bonus_frames = recordtimer_frames;
        bonus_nickname = pdat[0].tag_str;
        var i, a;
        for ( i = 0 ; i < fps_measure_num ; i += 1 )
          a += fps_measure [ i ];
        a /= fps_measure_num;
        bonus_avgfps = round ( a );
        //record_save_1 ( pdat[0].char_id , 288 );
        }
      if ( global.gs_gamemode == "Classic" )
        {
        obj_classic.upbeat = upbeat;
        rules_stagecomplete();
        }
        else
        {
        state_type = "menu";
        menu_alpha = 0;
        time = -1;
		victory = 1
		script_execute ( rule_end_script );
        }
      break;
    }
  }

if ( state_type == "idle" )
  {
  // Classic mode timeout
  
  if perma_cut_trigger = 0{
	  //trigger_cutscene("cutscenes/eiki_level/start.txt")
	  perma_cut_trigger = 1
  }
  
  if ( global.gs_gamemode == "Challenge" )
    {
    if stop_timer = 0
	t_frames -= 1;
    if ( t_frames < 0 )
      {
      t_frames += 60;
      t_seconds -= 1;
      if ( t_seconds < 0 )
        {
        t_seconds += 60;
        t_minutes -= 1;
        }
      }
    if ( t_seconds == 0 && t_minutes == 0 )
      {
      FMODInstanceStop ( global.bgm_instance );
      graphic_timer = HUDANIM_Failure;
      state_type = "failure";
      global . match_playing = -1;
      timer = 0;
      time = 150;
      exit;
      }
    }
  
  with (player){
	  
	  if number = 1{
		die_cap = 300;
	  }
	  if number = 2{
		die_cap = 300;
	  }
	  
	  if match_loaded = 1
	  exit;
	   
  }
  
  
  
  
  
  

  if ( victory_variable == 1 )
    {
    FMODInstanceStop ( global.bgm_instance );
    if ( recordtimer_minutes < bonus_minutes )
      graphic_timer = HUDANIM_Record;
      else
    if ( recordtimer_minutes == bonus_minutes && recordtimer_seconds < bonus_seconds )
      graphic_timer = HUDANIM_Record;
      else
    if ( recordtimer_minutes == bonus_minutes && recordtimer_seconds == bonus_seconds && recordtimer_frames < bonus_frames )
      graphic_timer = HUDANIM_Record;
      else
      graphic_timer = HUDANIM_Success; 
    if ( graphic_timer == HUDANIM_Record )
      {
      crowd_call ( 0 , 100 );
      upbeat = 2;
      }
      else
      {
      crowd_call ( 0 , 75 );
      upbeat = 1;
      }
    if ( global.gs_gamemode == "Classic" && bonus_minutes == 15 )
      graphic_timer = HUDANIM_Success;
    graphic_timer = HUDANIM_Success; 
    state_type = "complete";
    global . match_playing = -1;
    timer = 0;
    time = 150;
    exit;
    } 
    
  recordtimer_frames += 1;
  if ( recordtimer_frames >= 60 )
    {
    if ( fps_measure_num < 900 )
      {
      fps_measure [ fps_measure_num ] = fps;
      fps_measure_num += 1;
      }
    recordtimer_frames -= 60;
    recordtimer_seconds += 1;
    }
  if ( recordtimer_seconds >= 60 )
    {
    recordtimer_seconds -= 60;
    recordtimer_minutes += 1;
    } 
  if ( recordtimer_minutes >= 15 )
    {
    recordtimer_minutes = 14;
    recordtimer_frames = 59;
    recordtimer_seconds = 59;
    }  
  }