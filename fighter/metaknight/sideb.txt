if ( air >= max_jumps )
    exit;
if ( state_type = "stand" || state_type = "run" || state_type = "jump" )
  {
    state_type = "air_attack";
    attack_type = "sideb";
    timer = 0;
    time = 76;
    sprite_index = sideb_sprite;
    image_speed = 0;
    image_index = 0;
    hspeed = 0;
    temp = drill_sound2; //used to quickly scroll through drill sounds
    tempdirection = facing*180; //used to correct air movement
  }

if ( timer < time )
  {
    switch ( timer )
      {
	case 4: image_index = 1; break;
	case 13: image_index = 2; break;
	case 14: image_index = 3; break;
	case 15: image_index = 4; break;
	case 16: image_index = 5; break;
	case 17: image_index = 6; break;
	case 18: image_index = 7; break;
	case 19: image_index = 8; break;
	case 20: image_index = 9; break;
	case 21: image_index = 10; break;
	case 22: image_index = 11; break;
	case 23: image_index = 12; break;
	case 24: image_index = 13; break;
	case 25: image_index = 14; break;
	case 26: image_index = 15; break;
	case 27: image_index = 16; break;
	case 28: image_index = 2; break;
	case 29: image_index = 3; break;
	case 30: image_index = 4; break;
	case 31: image_index = 5; break;
	case 32: image_index = 6; break;
	case 33: image_index = 7; break;
	case 34: image_index = 8; break;
	case 35: image_index = 9; break;
	case 36: image_index = 10; break;
	case 37: image_index = 11; break;
	case 38: image_index = 12; break;
	case 39: image_index = 13; break;
	case 40: image_index = 14; break;
	case 41: image_index = 15; break;
	case 42: image_index = 16; break;
	case 43: image_index = 2; break;
	case 44: image_index = 3; break;
	case 45: image_index = 4; break;
	case 46: image_index = 5; break;
	case 47: image_index = 6; break;
	case 48: image_index = 7; break;
	case 49: image_index = 8; break;
	case 50: image_index = 9; break;
	case 51: image_index = 10; break;
	case 52: image_index = 11; break;
	case 53: image_index = 12; break;
	case 54: image_index = 13; break;
	case 55: image_index = 14; break;
	case 56: image_index = 15; break;
	case 57: image_index = 16; break;
	case 58: image_index = 2; break;
	case 59: image_index = 3; break;
	case 60: image_index = 4; break;
	case 61: image_index = 5; break;
	case 62: image_index = 6; break;
	case 63: image_index = 7; break;
	case 64: image_index = 8; break;
	case 65: image_index = 17; break;
      }

    fast_fall = 0;
    fast_fall_temp = 0;
if timer > 30
force_edge_grab = 1
    if ( timer = 13 )
      {
	sound_play(drill_sound1);
	sound_play(sideb_voice);
	create_hitbox(3,35+facing*110,5.5,0,5,5,slash2,obj_spark_slash2,0.8,0.7,6,9,self.id,6,3);
	hitbox.di = 1.6;
	speed = 3.5*size;
	gravity = 0;
	direction = facing*180;
	instance_create(x,y,obj_down_impact);
	duster = instance_create(x,y,obj_dust_effect);
	duster.facing = facing;
	spark = instance_create(x,y,obj_spark);
	spark.sprite_index = sideb_effect_sprite;
	spark.image_speed = 0.25;
	spark.image_xscale = size*(1-facing*2);
	spark.image_yscale = size*1;
	spark.x = x;
	spark.y = y-10;
      }
    if ( timer >= 13 && timer <= 63 )
      {
	if spark.image_index >= 3.5 {
	spark.image_index = 0 }
	spark.x = x;
	spark.y = y-10;
	if ( ai )
	  {
	    if ( ai_state = "recover" || offstage )
	      {
		if ( y > nearest_edge.y )
		    moveup = 1;
	      }
	    else
	      {
		if ( enemy.y < y - 5 )
		    moveup = 1;
		if ( enemy.y > y + 5 )
		    movedown = 1;
		if ( x < nearest_edge.x + 5 && nearest_edge.object_index = obj_edge_left && facing ) ||
		   ( x > nearest_edge.x - 5 && nearest_edge.object_index = obj_edge_right && !facing )
		    moveup = 1;
	      }
	  }
	if ( timer >= 56 )
	    speed = 1.8*size;
	else
	    speed = 3.5*size;
	gravity = 0;
	if ( moveup && moveright )
	  {
	    if ( direction < 45 || direction >= 225 )
		direction += 5;
	    else
	    if ( direction > 45 && direction < 225 )
		direction -= 5;
	    if ( direction >= 42 && direction <= 48 )
		direction = 45;
	    tempdirection = direction;
	  }
	else
	if ( moveup && moveleft )
	  {
	    if ( direction < 135 || direction >= 315 )
		direction += 5;
	    else
	    if ( direction > 135 && direction < 315 )
		direction -= 5;
	    if ( direction >= 132 && direction <= 138 )
		direction = 135;
	    tempdirection = direction;
	  }
	else
	if ( movedown && moveright )
	  {
	    if ( direction < 135 || direction > 315 )
		direction -= 3;
	    else
	    if ( direction >= 135 && direction < 315 )
		direction += 3;
	    if ( direction >= 313 && direction <= 317 )
		direction = 315;
	    tempdirection = direction;
	  }
	else
	if ( movedown && moveleft )
	  {
	    if ( direction <= 45 || direction > 225 )
		direction -= 3;
	    else
	    if ( direction > 45 && direction < 225 )
		direction += 3;
	    if ( direction >= 223 && direction <= 227 )
		direction = 225;
	    tempdirection = direction;
	  }
	else
	if ( moveup )
	  {
	    if ( direction < 90 || direction >= 270 )
		direction += 5;
	    else
	    if ( direction > 90 && direction < 270 )
		direction -= 5;
	    if ( direction >= 86 && direction <= 94 )
		direction = 90;
	    tempdirection = direction;
	  }
	else
	if ( movedown )
	  {
	    if ( direction < 90 || direction > 270 )
		direction -= 3;
	    else
	    if ( direction >= 90 && direction < 270 )
		direction += 3;
	    if ( direction >= 268 && direction <= 272 )
		direction = 270;
	    tempdirection = direction;
	  }
	else
	if ( moveright )
	  {
	    if ( direction < 0 || direction >= 180 )
		direction += 4;
	    else
	    if ( direction > 0 && direction < 180 )
		direction -= 4;
	    if ( direction >= 357 && direction <= 3 )
		direction = 0;
	    tempdirection = direction;
	  }
	else
	if ( moveleft )
	  {
	    if ( direction < 0 || direction > 180 )
		direction -= 4;
	    else
	    if ( direction >= 0 && direction < 180 )
		direction += 4;
	    if ( direction >= 177 && direction <= 183 )
		direction = 180;
	    tempdirection = direction;
	  }
	else
	    direction = tempdirection;
	if ( facing )
	    image_angle = direction + 180;
	if ( !facing )
	    image_angle = direction;
	spark.image_angle = image_angle;
	if ( timer mod 4 = 0 )
	  {
	    spark2 = after_image(4,c_white,0.65);
	    spark2.image_angle = image_angle;
	  }
      }
    if ( timer = 18 || timer = 24 || timer = 30 || timer = 36 || timer = 42 || timer = 48 || timer = 54 )
      {
	sound_play(temp);
	temp += 1;
	create_hitbox(1,direction,4.45,0,3,2,slash2,obj_spark_slash2,1.4,1.1,4,11,self.id,5,3);
	hitbox.weight_kb = 1;
      }
    if ( timer = 62 )
      {
	sound_play(drill_sound9);
	create_hitbox(4,40+facing*100,6.2,6.5,6,9,slash3,obj_spark_slash3,1.4,1.1,4,11,self.id,3,4);
	hitbox.hit_stun = 10;
      }
    if ( timer = 64 )
      {
	image_angle = 0;
	spark.image_index = 3.5;
	if ( hitbox.hit )
			{
	hspeed *= 1.4 - ((1-facing*2)=sign(hspeed))*2.8;
	vspeed = -3.7*size;
			}
      }
    if ( timer >= 64 && air = 0 )
      {
	dontrepeat = 0;
	state_type = "land";
	attack_type = "none";
	timer = 0;
	time = 29;
	sprite_index = land_sprite;
	image_angle = 0;
	instance_create(x,y,obj_down_impact);
      }
  }

        if (timer >= 62){
if (attack_success || target.object_index == obj_enemy) && (obj_score_control.stocks[target.number-1] == 1 && dontrepeat = 0){
				if ((target.weight <= .22 && target.percent > 100) || (target.weight > .22 && target.weight < .3 && target.percent > 115) || (target.weight > .3 && target.percent > 125)){
				killspark = instance_create(enemy.x-200,enemy.y-250,obj_spark);
				killspark.sprite_index = killspark_sprite;
				killspark.image_xscale = size * 0.75;
				killspark.image_yscale = size * 0.95;
				killspark.image_yscale = size * 0.95;
				killspark.image_index = 0;
				killspark.image_speed = 0.045;
				killspark.alarm[0] = 80;
				killspark.depth = depth + 2 ;
				sound_play(killscreen_voice);
				screen_shake(30,30);
				freezer  = instance_create(enemy.x,enemy.y,obj_freeze)
				effect_create_above(ef_ellipse,enemy.x,enemy.y+10,1,c_black)
				freezer.alarm[0] = 80
				spark = instance_create ( 0 , 0 , obj_camerazoom );
				spark.camera_l = enemy.x - 30;
				spark.camera_r = enemy.x + 30;
				spark.camera_u = enemy.y - 50;
				spark.camera_d = enemy.y;
				spark.camera_boundary_zoom = 120;
				spark.alarm[0] = 50;
				spark2 = instance_create(enemy.x+8*(1-facing*2),enemy.y-26,obj_spark_hit3)
				spark2.alarm[0] = 50
				dontrepeat = 1;
				}
				}
        
  }

if ( timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" )
  {
    dontrepeat = 0;
	state_type = "fall";
    attack_type = "none";
    timer = 0;
    time = -1;
    air = max_jumps;
  }