fast_fall = 0;
fast_fall_temp = 0;
if ( state_type = "run" || state_type = "stand" || state_type = "jump" && air < max_jumps )
{
  if ( !air )
  {
    state_type = "air_attack";
    hspeed = 0;
    air_move = 1;
  }
  else
    state_type = "air_attack";
  attack_type = "upb";
  sprite_index = upb_sprite;
  image_index = 0;
  image_speed = 0;
  timer = 0;
  time = 55;
  timer_speed = 1;
  if ( moveright = 1 )
    facing = 0;
  if ( moveleft = 1 )
    facing = 1;
}
if ( timer < time )
{
  switch ( timer )
  {
    case 2: image_index = 1; break;
    case 4: image_index = 2; break;
    case 6: image_index = 3; break;
    case 8: image_index = 4; break;
    case 10: image_index = 5; break;
    case 12: image_index = 6; break;
    case 14: image_index = 7; break;
    case 16: image_index = 8; break;
    case 18: image_index = 9; break;
    case 20: image_index = 2; break;
    case 22: image_index = 3; break;
    case 24: image_index = 4; break;
    case 26: image_index = 5; break;
    case 28: image_index = 6; break;
    case 30: image_index = 7; break;
    case 32: image_index = 8; break;
    case 34: image_index = 9; break;
    case 36: image_index = 10; break;
    case 37: image_index = 11; break;
    case 40: image_index = 12; break;
    case 44: image_index = 13; break;
    case 47: image_index = 14; break;
    case 50: image_index = 15; break;
  }
  if ( timer > 25 )
    force_edge_grab = 1;
  if ( timer < 7 )
  {
    vspeed = 0;
    gravity = 0;
  }
  else
    hspeed *= 0.95;
  if ( timer == 7 )
  {
    duster = instance_create ( x , y , obj_down_impact );
    duster.facing = facing;
    sound_play ( upb_voice );
    sound_play ( upb_sound1 );
    create_hitbox ( 1 , angle_correct ( 80 ) , 6.65 , 0.1 , 8 , 3 , punch2 , obj_spark_hit2 , 0.7 , 1.2 , -3 , 16 , self.id , 2 , 2 );
    hitbox.weight_kb = 1;
    create_hitbox2 ( 1 , angle_correct ( 100 ) , 6.65 , 0.1 , 8 , 3 , punch2 , obj_spark_hit2 , 0.7 , 1.2 , 6 , 16 , self.id , 2 , 2 );
    hitbox2.weight_kb = 1;
    vspeed = -6.25 * size;
  }
  if ( timer = 10 || timer = 14 || timer = 17 || timer = 20 || timer = 24 || timer = 27 )
  {
    vspeed -= 0.235 * size * GRAV_MUL;
    create_hitbox ( 1 , 90 , 3.65 , 0.1 , 4 , 3 , punch2 , obj_spark_hit2 , 0.9 , 1.2 , 0 , 16 , self.id , 3 , 2 );
    hitbox.weight_kb = 1;
    hitbox.di = 0.3;
  }
  if ( timer == 37 )
  {
    vspeed -= 0.5 * size;
    sound_play ( upb_sound2 );
    create_hitbox ( 4 , angle_correct ( 120 ) , 7.25 , 4.95 , 8 , 5 , punch3 , obj_spark_hit2 , 1.25 , 1.5 , -6 , 20 , self.id , 5 , 3 );
    create_hitbox2 ( 4 , angle_correct ( 60 ) , 7.25 , 4.95 , 8 , 5 , punch3 , obj_spark_hit2 , 1.25 , 1.5 , 9 , 20 , self.id , 5 , 3 );
  }
  if ( timer >= 37 && timer < 39 )
  {
    image_xscale *= 1.1;
    image_yscale *= 1.1;
  }
}

 if (timer >= 37){
if (attack_success || target.object_index == obj_enemy) && (obj_score_control.stocks[target.number-1] == 1 && dontrepeat = 0){
				if ((target.weight <= .22 && target.percent > 125) || (target.weight > .22 && target.weight < .3 && target.percent > 135) || (target.weight > .3 && target.percent > 150)){
				killspark = instance_create(enemy.x-200,enemy.y-250,obj_spark);
				killspark.sprite_index = killspark_sprite;
				killspark.image_xscale = size * 0.75;
				killspark.image_yscale = size * 0.95;
				killspark.image_yscale = size * 0.95;
				killspark.image_index = 0;
				killspark.image_speed = 0.045;
				killspark.alarm[0] = 80;
				killspark.depth = depth + 2 ;
				sound_play(killscreen_voice);
				screen_shake(30,30);
				freezer  = instance_create(enemy.x,enemy.y,obj_freeze)
				effect_create_above(ef_ellipse,enemy.x,enemy.y+10,1,c_black)
				freezer.alarm[0] = 80
				spark = instance_create ( 0 , 0 , obj_camerazoom );
				spark.camera_l = enemy.x - 30;
				spark.camera_r = enemy.x + 30;
				spark.camera_u = enemy.y - 50;
				spark.camera_d = enemy.y;
				spark.camera_boundary_zoom = 120;
				spark.alarm[0] = 50;
				spark2 = instance_create(enemy.x+8*(1-facing*2),enemy.y-26,obj_spark_hit3)
				spark2.alarm[0] = 50
				dontrepeat = 1;
				}
				}
        
  }

if ( timer >= time - 1 && state_type != "flinch" && state_type != "air_flinch" )
{
  attack_type = "none";
  dontrepeat = 0
  if ( air > 0 )
  {
    state_type = "fall";
    sprite_index = fall_sprite;
    time = -1;
  }
  else
  {
    state_type = "land";
    sprite_index = land_sprite;
    time = 20;
  }
  timer = 0;
}
