if ( state_type == "run" || state_type == "stand" )
  {
  hspeed *= 2.0;
  state_type = "air_attack";
  attack_type = "dash";
  image_speed = 0;
  image_index = 0;
  sprite_index = dash_attack_sprite;
  timer = 0;
  time = 34;
  }
//Water Values--------------------------------------------------------------------------------------------
waterx = x - 5 * (1-facing*2) * size;
watery = y - 20 * size;

///HSpeed--------------------------------------------------------------------------------------------------
if ( timer > 2 && timer < 32 )
  {
  if ( timer mod 4 == 0 )
    {
    var a;
    a = size;
    size *= 0.4;
    sound_play ( splash_sound );
    size = a;
    duster = instance_create ( x , y , obj_dust_effect );
    if ( hspeed > 0.25 )
      duster.facing = 0;
      else
    if ( hspeed < -0.25 )
      duster.facing = 1;
      else
      duster.facing = facing;
    duster.image_xscale *= 0.4;
    duster.image_yscale *= 0.4;
    }
	
  if ( moveright )
    {
    hspeed += 0.3 * size;
    if ( hspeed > run_speed * size ) hspeed = run_speed * size;
    }
  if ( moveleft )
    {
    hspeed -= 0.3 * size;
    if ( hspeed < -run_speed * size ) hspeed = -run_speed * size;
    }
  }
  
/// Target Speed--------------------------------------------------------------------------------------------
if (hitbox.hit = 1 && timer > 1 && timer < 19) 
	{
	target.hspeed = hspeed
	target.vspeed = vspeed
	}	

///Hitboxes---------------------------------------------------------------------------------------------------
if ( timer < time )
  {
    switch ( timer )
      {
		//active 0
		case 1:  image_index = 0; break;
		case 2:  image_index = 1; break;
		case 3:  image_index = 2; break;
		case 4:  image_index = 3; break;
		case 5:  image_index = 4; break;
		case 6: image_index = 5; break;
		case 7: case 11: case 15: image_index = 6; break; //loop
		case 9: case 13: case 17: image_index = 7; break; //loop
		case 19: image_index = 8; break;
		case 21: image_index = 9; break;
		case 23: image_index = 10; break;
		case 25: image_index = 11; break;
		case 27: image_index = 12; break;
      }

  if  ( timer = 3 )
  {
    duster = instance_create ( x , y , obj_dust_effect );
    duster.facing = facing;
    duster.image_speed *= 0.7;
    duster.image_xscale *= 0.7;
    duster.image_yscale *= 0.7;
    hspeed = run_speed * ( 1 - facing * 2 ) * size;
  }
  
  if ( timer = 5 )
  {
  play_attack_voice();
  }
  
  if ( timer >= 7 && timer <= 17 && timer mod 2 = 0)
  {
    create_hitbox ( 3 , 10 + facing * 160 , 4 , 0.5 , 5 , 5 , kick2 , obj_spark_hit2 , 1.16 , 1 , 5 , 10 , self.id , 3 , 2 );
    hitbox.hit_stun = 5;
  }
  
  if ( timer = 19 )
  {
  create_hitbox ( 3 , 50 + facing * 80 , 7 , 3.5 , 5 , 5 , punch4 , obj_spark_hit2 , 1 , 1.16 , 5 , 10 , self.id , 5 , 2 );
  hitbox.hit_stun = 6;
  }
  
  if timer > 19 && movejump = 1 
	{
		state_type = "jump";
		attack_type = "none";
		vspeed = -jump_speed;
		hspeed = 2 * (1-facing*2);

		if (movedown) {floattemp = 0;}
		else {floattemp = 1;}
	}
  
  if timer > 19 && air > 0 {
	interrupt = 1;
	slippery = 10;
	}
  
  if ( timer = 32 ) 
  {
  hspeed = 0; 
  }
  
//Water FX------------------------------------------------------------------------------------------------------------
	  if ( timer >= 7 && timer <= 31 ) 
	{
		water = instance_create( waterx , watery , obj_spark );
		water.sprite_index = water_sprite;
		water.image_xscale = 0.12 * (1-facing*2) * size;
		water.image_yscale = 0.12 * size;
		water.image_index = 0;
		water.image_speed = 0.6;
		water.depth = 1;
		water.image_angle = random(360);
		water.direction = random(360);
		water.speed = 1 * (1-facing*2) * size;
		water.alarm[0] = 15;
		water.x = waterx;
		water.y = watery;
	}
	if ( timer >= 17 && timer <= 31 && water.image_alpha > 0 )
	{
	  water.image_alpha -= 0.2;
	}
	if ( timer = 32 )
	{
	with ( water )
		{
		instance_destroy();
		}
	}
  
  }
if ( timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" )
  {
    if (air > 0){state_type = "jump";}
	else {state_type = "stand";}
    attack_type = "none";
    timer = 0;
    time = -1;
  }