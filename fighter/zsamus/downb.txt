/*if ( ( state_type = "stand" || state_type = "run" || state_type = "crouch" || state_type = "jump" ) && air < max_jumps && can_downb )
  {
	can_downb = 0;
	if ( moveright )
	facing = 0;
    if ( moveleft )
	facing = 1;
    state_type = "air_attack";
    attack_type = "downb";
    timer = 0;
    time = 69;
    sprite_index = downb_sprite;
    image_speed = 0;
    image_index = 0;
    //hspeed = size * (2.5-facing*5);
    air_move = 0;
	target = -99
	target1 = -99
  }

if ( timer < time )
  {
    switch ( timer )
      {
	case 4: image_index = 1; break;
	case 8: image_index = 2; break;
	case 11: image_index = 3; break;
	case 15: image_index = 4; break;
	case 18: image_index = 5; break;
	case 22: image_index = 6; break;
	case 25: image_index = 7; break;
	case 29: image_index = 8; break;
	case 33: image_index = 9; break;
	case 36: image_index = 10; break;
	case 40: image_index = 11; break;
	case 43: image_index = 12; break;
	case 47: image_index = 13; break;
	case 50: image_index = 14; break;
	case 55: image_index = 15; break;
	//
	case 100: image_index = 2; break;
	case 103: image_index = 5; break;
	case 111: image_index = 1; break;
	case 204: image_index = 2; break;
	case 207: image_index = 5; break;
	case 230: image_index = 1; break;
      }

    fast_fall = 0;
    fast_fall_temp = 0;
    if timer > 30
	force_edge_grab = 1
    if ( timer <= 3 )
	intangible = 1;
    if ( timer = 5 )
      {
	sound_play(downb_sound);
	vspeed = -6*size;
	duster = instance_create(x,y,obj_dust_effect);
	duster.facing = facing;
	instance_create(x,y-15*size,obj_spark_effect);
	spark = instance_create(x,y,obj_spark_shockwave);
	spark.image_xscale *= size;
	spark.image_yscale *= 0.2*size;
	spark.image_blend = c_white;
      }
    if ( timer = 7 )
      {
	  
	hspeed = size * (0.5-facing*1);
	vspeed = -11*size;
      }
    if ( timer >= 8 )
	hspeed = size * (1.5-facing*2.5);	
    if ( timer = 10 )
	vspeed = -5*size;	
    if ( timer >= 44 )
	vspeed = 5*size;
    if ( timer >= 48 )
	vspeed = 10*size;
    if ( timer >= 50 )
	vspeed = 4*size;
    if ( timer = 52 )
	vspeed = 2*size;


if timer >33 and timer < 69 {
	    if ( moveright and facing = 0)
		hspeed = 3.5*size;
	    if ( moveleft and facing = 1)
		hspeed = -3.5*size; }





if timer =55 {
burry1 = create_hitbox(14,angle_correct(270),6.7,3.7,14,10,kick3,obj_spark_hit4,0.8,0.8,4,6,self.id,14,3);
}

if timer > 17 && timer < 54 && !instance_exists(instaburry) && target < 0{
instaburry = create_homing_bubble (  0.8,0.8,4,6, self.id , 4 );}


if  target >-1 && timer < 54{
target1 = target
image_speed = 0
timer = 70
time = 95
image_index=15
x = target1.x + 1 * (1-facing*2)
y = target1.y-20
burry2 = create_hitbox_impaler(9,angle_correct(90),6,3,14,18,kick3,obj_spark_hit4,0.8,0.8,4,6,self.id,14,4);
if (instance_exists(hitbox)) {with (hitbox) {instance_destroy();}}
}





	
    if ( timer = 20 )
	intangible = 0;

   /* if ( timer >= 21 && timer <= 65 )
      {
	if ai {
	if (offstage || ai_state = "recover" ) {
	movejump = 1
	if y > nearest_edge.y {
	moveup = 1
	special = 1 }
	else {
	if x < nearest_edge.x {
	moveright = 1
	special = 1
	}
	if x > nearest_edge.x {
	moveleft = 1
	special = 1 }
	}
	}
	else {
	if random (10) > 3
	attacking = 1
	else
	special = 1
	}
	} 1*/
	/*if ( moveup && special )
	  {
	    state_type = "jump";
	    attack_type = "none";
	    timer = 0;
	    time = -1
	    char_upb();
	    exit;
	  }/*
/*if attacking and timer >200 and timer < 240{
	    if ( moveright and facing = 0)
		hspeed = 3.5*size;
		vspeed = 10*size;
	    if ( moveleft and facing = 1)
		hspeed = -3.5*size; 
		vspeed = 10*size;
}	  
	


if sprite_index = downbdair_sprite; {
	     if ( moveright and facing = 0)
		hspeed = 4.5*size;
	    if ( moveleft and facing = 1)
		hspeed = -4.5*size;
		}


/*if timer >= 16 && timer <= 69  && attacking{ // hold
	    timer = 200;
	    time = 240;
	    if ( moveright )
		facing = 0;
	    if ( moveleft )
		facing = 1;
	    sound_play(attack_sound2);
	    sprite_index = downbdair_sprite;
		image_speed = 0.50;
	    image_index = 0;
		if (instance_exists(hitbox)) {with (hitbox) {instance_destroy();}}
}

if timer >= 16 && timer <= 69  && special{ 
	    timer = 100;
	    time = 130;
		if ( moveright )
		facing = 0;
	    if ( moveleft )
		facing = 1;
		image_speed = 0.50;
	    sound_play(attack_sound2);
	    sprite_index = downbdair_sprite;		
		if (instance_exists(hitbox)) {with (hitbox) {instance_destroy();}}

		
}	
if timer = 100{

		downkick2 = create_hitbox(13,angle_correct(40),3.5,8.7,14,10,kick3,obj_spark_hit4,0.9,0.9,3,10,self.id,20,2);
		downkick3 = create_hitbox2(13,323+(-106)*facing,6,8.7,14,10,kick3,obj_spark_hit4,0.4,0.4,9,1,self.id,20,2);
		}
if timer = 200{

		downkick2 = create_hitbox(13,angle_correct(40),3.5,8.7,14,10,kick3,obj_spark_hit4,0.9,0.9,3,10,self.id,20,2);
		downkick3 = create_hitbox2(13,323+(-106)*facing,6,8.7,14,10,kick3,obj_spark_hit4,0.4,0.4,9,1,self.id,20,2);
		}
	    
	  


     // 1 }
    if ( timer = 104 )
      {
	hitbox.damage = 8*size;
	hitbox.bkb = 4*size;
	hitbox.kbg = 3*size;
	hitbox.sfx = kick2;
      }
    if ( air = 0 && timer >= 7 && timer < 200 )
      {
	dontrepeat = 0;
	state_type = "land";
	attack_type = "none";
	timer = 0;
	time = 13;
	sprite_index = land_sprite;
      }

	if timer > 230 && air < max_jumps - 1 && movejump
	interrupt = 1;
	if timer > 200 && air = 0 {
    	state_type = "land";
	attack_type = "none";
	timer = 0;
	time = 15;
	sprite_index = land_sprite;
	} 
  }

  
  
if ( timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" )
  {
    facing = !facing;
    dontrepeat = 0;
	state_type = "jump";
    attack_type = "none";
    timer = 0;
    time = -1;
  }

*/

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// this rework is a wip
if ( ( state_type = "stand" || state_type = "run" || state_type = "crouch" || state_type = "jump" ) && air < max_jumps && can_downb )
  {
	can_downb = 0;
	if ( moveright )
	facing = 0;
    if ( moveleft )
	facing = 1;
    state_type = "air_attack";
    attack_type = "downb";
    timer = 0;
    time = 69;
    sprite_index = downb_sprite;
    image_speed = 0;
    image_index = 0;
    //hspeed = size * (2.5-facing*5);
    air_move = 0;
	target = -99
	target1 = -99
		has_hit = 0;
  }

if ( timer < time )
  {
    switch ( timer )
      {
	case 4: image_index = 1; break;
	case 8: image_index = 2; break;
	case 11: image_index = 3; break;
	case 15: image_index = 4; break;
	case 18: image_index = 5; break;
	case 22: image_index = 6; break;
	case 25: image_index = 7; break;
	case 29: image_index = 8; break;
	case 33: image_index = 9; break;
	case 36: image_index = 10; break;
	case 40: image_index = 11; break;
	case 43: image_index = 12; break;
	case 47: image_index = 13; break;
	case 50: image_index = 14; break;
	case 55: image_index = 15; break;
	//
	case 70: image_index = 1; break;
	case 77: image_index = 2; break;
	case 78: image_index = 3; break;
	case 79: image_index = 4; break;
	case 80: image_index = 5; break;
	case 81: image_index = 6; break;
	case 82: image_index = 7; break;
	case 83: image_index = 8; break;
	case 84: image_index = 9; break;
	case 85: image_index = 10; break;
	case 86: image_index = 11; break;
	case 87: image_index = 12; break;
	case 88: image_index = 13; break;
	case 89: image_index = 14; break;
	
	
	case 90: image_index = 15; break;
	case 91: image_index = 16; break;
	//flip end
	case 92: image_index = 17; break;
	case 93: image_index = 18; break;
	case 94: image_index = 19; break;
	case 95: image_index = 21; break;
	case 96: image_index = 22; break;
	//end
	case 97: image_index = 23; break;
	case 98: image_index = 24; break;
	case 99: image_index = 25; break;
      }

    fast_fall = 0;
    fast_fall_temp = 0;
    if timer > 30
	force_edge_grab = 1
    if ( timer <= 3 )
	intangible = 1;
    if ( timer = 5 )
      {
	sound_play(downb_sound);
	vspeed = -6*size;
	duster = instance_create(x,y,obj_dust_effect);
	duster.facing = facing;
	instance_create(x,y-15*size,obj_spark_effect);
	spark = instance_create(x,y,obj_spark_shockwave);
	spark.image_xscale *= size;
	spark.image_yscale *= 0.2*size;
	spark.image_blend = c_white;
      }
    if ( timer = 7 )
      {	  
	hspeed = size * (0.5-facing*1);
	vspeed = -16*size;
      }
    if ( timer >= 8 )
	hspeed = size * (1.5-facing*2.5);	
    if ( timer = 12 )
	vspeed = -2*size;	
    if ( timer >= 34 )
	vspeed = 8*size;
    if ( timer >= 46 )
	vspeed = 2*size;

    if ( timer = 20 )
	intangible = 0;







if timer =55 {
burry1 = create_hitbox(14,angle_correct(270),6.7,3.7,14,10,kick3,obj_spark_hit4,0.8,0.8,4,6,self.id,14,3);

}

if timer > 17 && timer < 54 && !instance_exists(instaburry) && target < 0{
instaburry = create_homing_bubble (  0.8,0.8,4,6, self.id , 4 );}


if  target >-1 && timer < 54{
target1 = target
image_speed = 0
timer = 70
time = 76
image_index=15
x = target1.x + 1 * (1-facing*2)
y = target1.y-20
burry2 = create_hitbox_impaler(9,angle_correct(90),6,3,14,18,kick3,obj_spark_hit4,0.8,0.8,4,6,self.id,14,4);
burry2.hit=2
if (instance_exists(hitbox)) {with (hitbox) {instance_destroy();}}
}

if timer = 78{

		downkick2 = create_hitbox(13,angle_correct(40),3.5,8.7,14,10,kick3,obj_spark_hit4,0.9,0.9,3,10,self.id,40,4);
		downkick3 = create_hitbox2(13,323+(-106)*facing,6,8.7,14,10,kick3,obj_spark_hit4,0.4,0.4,9,1,self.id,40,4);
		}

   if ( air = 0 && timer >= 7  )
      {
	dontrepeat = 0;
	state_type = "land";
	attack_type = "none";
	timer = 0;
	time = 23;
	sprite_index = downbdairgetup_sprite
      }



if timer >= 16 && timer <= 69  && attacking { 
state_type = "air_attack";
	    timer = 70;
	    time = 95;
	    if ( moveright )
		facing = 0;
	    if ( moveleft )
		facing = 1;
	    sound_play(attack_sound2);
	    sprite_index = downbdair_sprite;
		//image_speed = 0.50;
	    image_index = 0;
		                hspeed = (3 - facing*6)*size;
                vspeed = 16;
		
		if (instance_exists(hitbox)) {with (hitbox) {instance_destroy();}}
	
}

if timer >= 16 && timer <= 69  && special{ 
state_type = "air_attack";
	    timer = 70;
	    time = 95;
		if ( moveright )
		facing = 0;
	    if ( moveleft )
		facing = 1;
		//image_speed = 0.50;
	    sound_play(attack_sound2);
	    sprite_index = downbdair_sprite;
                  hspeed = (3 - facing*6)*size;
                vspeed = 16;      		
		if (instance_exists(hitbox)) {with (hitbox) {instance_destroy();}}
		
		
}

// Keeps facing when flipkickin in direction 
if timer = 95{
  facing = 1-facing;
  }
  	if timer > 86 && air < max_jumps - 1 && movejump{
	interrupt = 1; }
/*
    if hitbox.hit>0 and timer >=70 and timer <76
      {
  facing = 1-facing;
    }
*/

if timer >20 and timer < 95 {
	    if ( moveright and facing = 0)
		hspeed = 3.5*size;
	    if ( moveleft and facing = 1)
		hspeed = -3.5*size; }


//DO NOT TOUCH-----------------------------//////////////////////////////////////////
 if ( timer >= 21 && timer <= 65 )
      {
	if ai {
	if (offstage || ai_state = "recover" ) {
	movejump = 1
	if y > nearest_edge.y {
	moveup = 1
	special = 1 }
	else {
	if x < nearest_edge.x {
	moveright = 1
	special = 1
	}
	if x > nearest_edge.x {
	moveleft = 1
	special = 1 }
	}
	}
	else {
	if random (10) > 3
	attacking = 1
	else
	special = 1
	}
	} 
	if ( moveup && special )
	  {
	    state_type = "jump";
	    attack_type = "none";
	    timer = 0;
	    time = -1
	    char_upb();
	    exit;
	  }
/////////////////////////////////////////////////////////////////////////////////
if attacking and timer >75 {
	    if ( moveright and facing = 0)
                hspeed = (3 - facing*6)*size;
                vspeed = 11;
	    if ( moveleft and facing = 1)
                hspeed = (3 - facing*6)*size;
                vspeed = 11;
}	  
if special and timer >75 {
	    if ( moveright and facing = 0)
                hspeed = (3 - facing*6)*size;
                vspeed = 16;
	    if ( moveleft and facing = 1)
                hspeed = (3 - facing*6)*size;
                vspeed = 16;
}	
}


	if ( moveup && special )
	  {
	    state_type = "jump";
	    attack_type = "none";
	    timer = 0;
	    time = -1
	    char_upb();
	    exit;
	  }





















	
  }

  
  
if ( timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" )
  {
    //facing = !facing;
    dontrepeat = 0;
	state_type = "jump";
    attack_type = "none";
    timer = 0;
    time = -1;
  }

