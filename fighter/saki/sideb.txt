fast_fall = 0
fast_fall_temp = 0
if ( state_type = "stand" || state_type = "run" || state_type = "jump" ) && sbtemp = 0{
        hspeed = 0;
        state_type = "air_attack";
        attack_type = "sideb";
        image_speed = 0.25;
        sprite_index = sideb_sprite;
        image_index=0;
        timer = 0;
        time = 48;
        timer_speed=1;
        if moveright = 1 facing = 0
        if moveleft = 1 facing = 1
        air_move=0
        temp = 0
        temp2 = drill_sound2
        hover = 0
        tempdirection = 0-facing*180
		sbtemp = 1;
		has_hit = 0
		special = 1
}
if timer < time {
    if timer > 20
	force_edge_grab = 1
    state_type = "air_attack";
    if temp
        gravity = 0
    if timer = 13 {
        timer+=1
        image_index+=image_speed
        duster = instance_create(x,y,obj_dust_effect);
        duster.facing = facing;
        sound_play(upb_sound)
        sound_play(choose(attack_voice1,b_voice));
        image_speed = 0.3
        instance_create(x,y,obj_down_impact)
        speed = 8
        direction = facing*180
        }
    if timer >= 14 && timer <= 30 {
        speed = (6.30 - (timer > 25))*size
        temp = 1
    }
}
if temp = 1 {
    if cos(timer*pi)>0.5
        after_image(5,make_color_rgb(174,99,255),0.75)
    if moveup = 1 || (ai && (ai_state = "recover" || offstage || (enemy.y < y-5))) {
        if direction < 90 || direction > 270    {
            direction+=7
            if direction >= 15 && direction < 270
            direction = 15
            tempdirection = direction
        }
        else if direction > 90 && direction < 270 {
            direction-=7
            if direction <= 165
            direction = 165
            tempdirection = direction
        }
    }
    else if (movedown = 1 || (!offstage && ai && enemy.y > y+5 && ai_state != "recover")) && !collision_point(x,y+1,obj_floor,1,1) && !collision_point(x,y+1,obj_platform,1,1) {
        if facing = 0  { 
            direction-=2
            if direction <= 195 && direction > 180
            direction = 195
            tempdirection = direction
        }
        else {
            direction+=2
            if direction >= 345
            direction = 345
            tempdirection = direction
        }
    }
    else {
        //direction += 1-facing*2
        direction = tempdirection
    }
    if facing {
        image_angle = direction-180
        }
    else {
        image_angle = direction
    }
}
if timer = 13 || timer = 16 || timer = 19 || timer = 22 || timer = 25 {
    temp2+=1
    image_index+=image_speed
    create_hitbox(2,direction+7*(1-facing*2),6.1,0,3,5,slash2,obj_spark_slash2,1.3,0.7,10,16,self.id,2,3)
    hitbox.di = 0.5
    hitbox.hit_stun = 4
	hitbox.execute_on_hit = "attacker.has_hit = 1"
    if hitbox.direction = 361
    hitbox.direction = 0
}
if has_hit = 1 and timer <= 28  and timer >= 10{
	target.speed = 6
        target.direction = point_direction(target.x, target.y, x+ 36 * size * (1-facing*2), y - 0)
    }

if timer = 28 {
    if special || attacking || (ai && random(10)>7.5-cpu_level[number-1]*0.5) {
        sprite_index = utilt_sprite
        image_index = 1.7
        image_speed = 0.3
        temp = 0
        vspeed -= size*1.5
    }
    else {
        sound_play(attack_sound1)
        create_hitbox(4,40+facing*100,5.75,0.85,9,7,slash2,obj_spark_slash2,1.3,0.7,10,16,self.id,3,4)
        hitbox.hit_stun = 9
    }
}
if timer = 30 {
    temp = 0
    image_angle = 0
    hspeed = (2-facing*4)*size
    vspeed = -2*size
}
if timer = 34 && sprite_index = utilt_sprite {
    sound_play(attack_sound3)
    create_hitbox(5,67+facing*44,5.4,7.55,9,10,slash2,obj_spark_slash3,1.15,1.1,26,25,self.id,5,4)
    hitbox.hit_stun = 7
}
if timer = 36 && sprite_index = utilt_sprite {
    hitbox.hitbox_x = 18*(1-facing*2)
    hitbox.hitbox_y = 36
}
if vspeed > 0 && (collision_point(x,y+1,obj_platform,1,1) || collision_point(x,y+1,obj_floor,1,1)) && timer >= 39 - temp*4 {
            state_type="land"
            attacking = 0
            temp = 0
            image_angle = 0
            attack_type="none"
            instance_create(x,y,obj_down_impact)
            sprite_index = land_sprite
            image_index = 0
            image_speed = 0
            timer=0
            time=8
}
if (timer >= 34){
if (attack_success || target.object_index == obj_enemy) && (target.object_index == obj_enemy) && (obj_score_control.stocks[target.number-1] == 1 && dontrepeat = 0){
				if ((target.weight <= .22 && target.percent > 110) || (target.weight > .22 && target.weight < .3 && target.percent > 125) || (target.weight > .3 && target.percent > 140)){
				killspark = instance_create(enemy.x-200,enemy.y-250,obj_spark);
				killspark.sprite_index = killspark_sprite;
				killspark.image_xscale = size * 0.75;
				killspark.image_yscale = size * 0.95;
				killspark.image_yscale = size * 0.95;
				killspark.image_index = 0;
				killspark.image_speed = 0.045;
				killspark.alarm[0] = 80;
				killspark.depth = depth + 2 ;
				sound_play(killscreen_voice);
				screen_shake(30,30);
				freezer  = instance_create(enemy.x,enemy.y,obj_freeze)
				effect_create_above(ef_ellipse,enemy.x,enemy.y+10,1,c_black)
				freezer.alarm[0] = 80
				spark = instance_create ( 0 , 0 , obj_camerazoom );
				spark.camera_l = enemy.x - 30;
				spark.camera_r = enemy.x + 30;
				spark.camera_u = enemy.y - 50;
				spark.camera_d = enemy.y;
				spark.camera_boundary_zoom = 120;
				spark.alarm[0] = 50;
				spark2 = instance_create(enemy.x+8*(1-facing*2),enemy.y-26,obj_spark_hit3)
				spark2.alarm[0] = 50
				dontrepeat = 1;
				}
				}
        
  }	   
if timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" {
    attack_type = "none";
    state_type = "jump";
    dontrepeat = 0;
    timer = 0;
    time =-1;
}
        
