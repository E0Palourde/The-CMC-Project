fast_fall = 0
fast_fall_temp = 0
gravity = 0
gravity_lock = 1

if state_type = "jump" || state_type = "stand" || state_type = "run" || state_type = "crouch" {
        if ( cantsideb ) exit;
        state_type = "air_attack"
        attack_type = "sideb"
        image_speed = 0
        sprite_index = sideb_sprite
        image_index=0
        timer = 0
        time = 52
        air_move = 0;
		hitboxtemp = 0
        hspeed = 0;
        vspeed = 0;
        tempdirection = 0-facing*180
        flowmotion = 0;
        temp2 = 0;
    }
    
switch ( timer )
      {
	case 3: image_index = 1; break;
    
	case 13: image_index = 2; break;
	case 16: image_index = 3; break;
	case 19: image_index = 4; break;
	case 21: image_index = 5; break;
	case 24: image_index = 6; break;
	case 27: image_index = 7; break;
	case 30: image_index = 8; break;
	case 33: image_index = 9; break;
	case 36: image_index = 2; break;
	case 39: image_index = 3; break;
	case 36: image_index = 4; break;
	case 39: image_index = 5; break;
	case 42: image_index = 6; break;
    case 45: image_index = 7; break;
    case 48: image_index = 8; break;
    case 51: image_index = 9; break;
      }

if timer = 13
{
sound_play(sideb_sound);
speed = 5 * size;
direction = facing*180
create_hitbox(2,direction+90*(1-facing*2),2.6,0,3,5,magic2,obj_spark_hit4,1.3,0.7,0,16,self.id,34,3)
hitbox.di = 0.5
hitbox.hit_stun = 6
if hitbox.direction = 361
hitbox.direction = 0
}

if timer >= 13 && timer < 48
{
temp = 1;
}

if temp = 1 {
    if cos(timer*pi)>0.5
        after_image(5,c_purple,0.75)
    if moveup = 1 || (ai && (ai_state = "recover" || offstage || (enemy.y < y-5))) {
        if direction < 90 || direction > 270    {
            direction+=2
            if direction >= 45 && direction < 270
            direction = 45
            tempdirection = direction
        }
        else if direction > 90 && direction < 270 {
            direction-=2
            if direction <= 135
            direction = 135
            tempdirection = direction
        }
    }
    else if (movedown = 1 || (!offstage && ai && enemy.y > y+5 && ai_state != "recover")) && !collision_point(x,y+1,obj_floor,1,1) && !collision_point(x,y+1,obj_platform,1,1) {
        if facing = 0  { 
            direction-=2
            if direction <= 195 && direction > 180
            direction = 195
            tempdirection = direction
        }
        else {
            direction+=2
            if direction >= 355
            direction = 355
            tempdirection = direction
        }
    }
    else {
        //direction += 1-facing*2
        direction = tempdirection
    }
    if facing {
        image_angle = direction-180
        }
    else {
        image_angle = direction
    }
}

if timer = 48
{
temp = 0;
}

if timer >= 13 && timer < 48 && flowmotion = 0
{
    
   if attack_success 
   {
    target.state_type = "air_flinch";
	target.attack_type = "none";
	target.sprite_index = target.flinch_sprite;
	target.timer = 0;
	target.time = 49;
	target.timer_speed = 0;
	target.alarm[0] = 2;
    target.x = x + 15 * (1-facing*2) * size;
	target.y = y;
    target.intangible = 0;
   temp = 0;
    if !moveleft || !moveright || !moveup || !movedown
     {
      flowmotion = 1;
     }
   
   if moveright && facing = 0 
     {
      flowmotion = 2;
     }
   
   if moveleft && facing = 1 
     {
      flowmotion = 2;
     }
     
   if moveleft && facing = 0
     {
      flowmotion = 3;
     }
     
   if moveright && facing = 1
     {
      flowmotion = 3;
     }
     
   if moveup && !movedown
     {
      flowmotion = 4;
     }
     
   if movedown && !moveup
     {
      flowmotion = 5;
     }
   }

}

if timer < 100 && flowmotion = 1
{
speed = 0
timer = 100;
time = 116;
sprite_index = uair_sprite
image_index = 0;
direction = tempdirection
image_angle = 0;
}

if flowmotion = 1
{

if timer < 106
{
target.x = x + 15 * (1-facing*2) * size;
target.y = y;
target.state_type = "air_flinch";
target.attack_type = "none";
target.sprite_index = target.flinch_sprite;
target.timer = 100;
target.time = 149;
target.intangible = 0;
target.timer_speed = 0;
target.alarm[0] = 2;
}

switch ( timer )
      {
	case 103: image_index = 1; break;
	case 106: image_index = 2; break;
	case 109: image_index = 3; break;
	case 115: image_index = 4; break;
      }
      
if timer = 106
{
sound_play(attack_sound);
create_hitbox(8,80 + facing * 20,5.7,1.9,8,5,punch2,obj_spark_hit4,1.1,0.7,12,0,self.id,3,3);	
hitbox.hit_stun = 7;
hitbox.hitbox_x = 16-facing*32;
hitbox.hitbox_y = 17;
hitbox.image_xscale = 0.8;
hitbox.image_yscale = 1.3;
vspeed = -4 * size;
}

}

if timer < 100 && flowmotion = 2
{
timer = 100;
time = 139;
sprite_index = ssmash_sprite
image_index = 0;
speed = 0;
image_angle = 0;
}

if flowmotion = 2
{

if timer < 112
{
target.x = x + 15 * (1-facing*2) * size;
target.y = y;
target.state_type = "air_flinch";
target.attack_type = "none";
target.intangible = 0;
target.sprite_index = target.flinch_sprite;
target.timer = 100;
target.time = 149;
target.timer_speed = 0;
target.alarm[0] = 2;
}

switch ( timer )
      {
	case 103: image_index = 1; break;
	case 106: image_index = 2; break;
	case 109: image_index = 3; break;
	case 112: image_index = 4; break;
	case 132: image_index = 5; hspeed *= 0.5; break;
	case 135: image_index = 6; break;
	case 138: image_index = 7; break;
      }
if ( timer = 112 ) 
      {
	sound_play(ssmash_voice2);
	sound_play(attack_sound);
	create_hitbox(8,25+facing*130,6.5,2.15,50,4,punch3,obj_spark_hit4,1.1,0.4,27,13,self.id,30,4);
      }
    if ( timer = 113 )
	hspeed = 6-facing*12;
}



if timer < 100 && flowmotion = 3
{
speed = 0
timer = 100;
time = 130;
sprite_index = jab_sprite3
image_index = 0;
direction = tempdirection
image_angle = 0;
}

if flowmotion = 3
{
if timer < 112
{
target.state_type = "air_flinch";
target.attack_type = "none";
target.sprite_index = target.flinch_sprite;
target.timer = 100;
target.time = 149;
target.intangible = 0;
target.timer_speed = 0;
target.alarm[0] = 2;
target.x = x + 15 * (1-facing*2) * size;
target.y = y;
}
if timer = 100
{
image_index = 0;
if target.facing = 0{
	x = target.x - 20*size
	facing = 0
	}
	if target.facing = 1{
	x = target.x + 20*size
	facing = 1
	}
}

     switch (timer)
    {
    case 104: image_index = 1; break;
	case 108: image_index = 2; break;
	case 112: image_index = 3; break;
	case 116: image_index = 4; break;
	case 120: image_index = 5; break;
	case 124: image_index = 6; break;
	case 128: image_index = 7; break;
    }

if timer = 112
{
sound_play(attack_sound);
create_hitbox(5,20+facing*140,4.7,4.5,8,10,punch2,obj_spark_hit4,1.2,1.2,29,14,self.id,4,3);
}

}

if timer < 100 && flowmotion = 4
{
speed = 0
timer = 100;
time = 162;
sprite_index = fair_sprite
image_index = 0;
direction = tempdirection
image_angle = 0;
}

if flowmotion = 4
{

vspeed = -1 * size;

if timer < 154
{
target.state_type = "air_flinch";
target.attack_type = "none";
target.sprite_index = target.flinch_sprite;
target.timer = 100;
target.time = 149;
target.timer_speed = 0;
target.alarm[0] = 2;
target.x = x + 15 * (1-facing*2) * size;
target.y = y;
target.intangible = 0;
}

switch ( timer )
      {
	case 110: image_index = 1; break;
	case 112: image_index = 2; break;
	case 114: image_index = 3; break;
	case 116: image_index = 4; break;
	case 118: image_index = 5; break;
	case 120: image_index = 6; break;
    case 122: image_index = 0; break;
    case 124: image_index = 1; break;
	case 126: image_index = 2; break;
	case 128: image_index = 3; break;
	case 130: image_index = 4; break;
	case 132: image_index = 5; break;
	case 134: image_index = 6; break;
    case 136: image_index = 0; break;
    case 138: image_index = 1; break;
	case 140: image_index = 2; break;
	case 142: image_index = 3; break;
	case 144: image_index = 4; break;
	case 144: image_index = 5; break;
	case 146: image_index = 6; break;
    case 148: image_index = 0; break;
    case 150: image_index = 1; break;
	case 152: image_index = 2; break;
	case 154: image_index = 3; break;
	case 156: image_index = 4; break;
	case 158: image_index = 5; break;
	case 160: image_index = 6; break;
      }


if timer = 112 || timer = 118 || timer = 124 || timer = 130 || timer = 136 || timer = 142 || timer = 148
{
create_hitbox(1,90,1.15,0,1.75,1,punch2,obj_spark_hit4,0.8,1.2,20,21,self.id,6,3);
}

if timer = 154
{
create_hitbox(3,65+facing*50,6.15,4,1.75,4,punch2,obj_spark_hit4,0.8,1.2,20,21,self.id,4,3);
}

}

if timer < 100 && flowmotion = 5
{
speed = 0
timer = 100;
time = 144;
sprite_index = dsmash_sprite
image_index = 0;
direction = tempdirection
image_angle = 0;
}

if flowmotion = 5
{

if timer < 142
{
target.state_type = "air_flinch";
target.attack_type = "none";
target.sprite_index = target.flinch_sprite;
target.timer = 100;
target.time = 147;
target.timer_speed = 0;
target.alarm[0] = 2;
target.x = x + 15 * (1-facing*2) * size;
target.y = y;
target.intangible = 0;
vspeed = 0;
gravity = 0;
gravity_lock = 2;
}

switch ( timer )
      {
	case 102: image_index = 1; break;
	case 104: image_index = 2; break;
	case 106: image_index = 3; break;
	case 108: image_index = 4; break;
	case 110: image_index = 5; break;
	case 112: image_index = 6; break;
	case 114: image_index = 7; break;
    case 116: image_index = 0; break;
	case 118: image_index = 1; break;
	case 120: image_index = 2; break;
	case 122: image_index = 3; break;
	case 124: image_index = 4; break;
	case 126: image_index = 5; break;
	case 128: image_index = 6; break;
    case 130: image_index = 7; break;
	case 132: image_index = 0; break;
	case 134: image_index = 1; break;
	case 136: image_index = 2; break;
	case 138: image_index = 3; break;
	case 140: image_index = 4; break;
	case 142: image_index = 5; break;
    case 144: image_index = 6; break;
    case 146: image_index = 7; break;
      }

if ( timer = 106 || timer = 110 || timer = 114 || timer = 118 || timer = 122 || timer = 126 || timer = 130 || timer = 134 || timer = 138 )
      {
	create_hitbox(1,90,1,0,5,1,punch2,obj_spark_hit4,1.2,0.9,3,15,self.id,5,4);
	hitbox.di = 0;
      }
	  
    if ( timer = 142 )
      {
	create_hitbox(2,40+facing*100,5.5,3.5,25,4,punch3,obj_spark_hit4,1.2,0.9,3,15,self.id,4,4);
      }

}


if timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" {
    attack_type = "none";
    if air > 0
        state_type = "jump";
    else
        state_type = "stand";
    timer = 0;
    time =-1;
    if !attack_success
    cantsideb = 1;
}