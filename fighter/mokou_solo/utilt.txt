fast_fall = 0;
fast_fall_temp = 0;

if state_type = "stand" || state_type = "run" 
{
	hspeed *= 0.6;
	state_type = "air_attack";
	attack_type = "utilt";
	sprite_index = utiltflip_sprite;
	image_speed = 0;
	image_index = 0;
	timer = 0;
	time = 35;
	timer_speed = 1;
	reversal = 0;
	
	///Projectile Initialization Variables - Streamlines creation of more complex circular projectile patterns. ( Complete Circle: bulletshift * bullettotal = 360 )
	bullettype = 1; //Bullet type referenced in custom scripts with multiple projectile types.
	bulletcount = 0; //Initial bullet count.
	bullettotal = 3; //Total number of bullets created. Don't set this too high or performance will RIP!
	bulletstartpos = 0; //Initial bullet direction.
	bulletshift = 0; //Shifts the direction of the next bulletcount by this amount.
	bulletdirshift = bulletstartpos - bulletcount*bulletshift; //Used in direction calculation.
	bulletscale = 0.5; //Resizes bullet.

	bulletdmg = 0;
	bulletdir = 361;
	bulletbkb = 0;
	bulletkbg = 0;
	bulletshielddmg = 0;
	bullethitlag = 0;
	bulletsound = magic1;
	bulletspark = obj_spark_shock;
	bulletxscale = 0.5;
	bulletyscale = 0.5;
	bulletx = -10;
	//bullety = 30-bulletcount*5;
	bullettime = 99;
	bulletid = self.id;
	bulletscript = char_custom1;

	bullethit = 2;
	bullethitstun = 0;
	bulletblockstun = 0;
	bulletdi = 0;

	bulletspeed = 0;
	rotatespeed = 40;
	explodetime = 40;
}

switch ( timer )
{
	case 4:	 image_index = 1; break;
	case 7:	 sprite_index = utilt_sprite; image_index = 0; break;
	case 13: image_index = 1; break;
	case 17: image_index = 2; break;
	case 20: image_index = 3; break;
	case 23: image_index = 4; break;
	case 26: image_index = 5; break;
	case 30: image_index = 6; break;
	
	
	case 100: sprite_index = utilt2_sprite; image_index = 0; break;
	case 103: image_index = 1; break;
	case 108: image_index = 2; break;
	case 111: image_index = 3; break;
	case 114: image_index = 4; break;
	case 117: image_index = 5; break;
	case 123: image_index = 6; break;
	case 126: image_index = 7; break;
	/*case 129: image_index = 8; break;
	case 132: image_index = 9; break;
	case 135: image_index = 10; break;
	case 138: image_index = 11; break;
	case 141: image_index = 12; break; */
}

if timer < time 
{	
	if timer <= 0 && nobullet = 1
	{
		if moveleft
			facing = 1;
		if moveright
			facing = 0;
		
		timer = 99
		time = 129
	}
	
	///Bullet Version
	if timer < 13
	{
		air_move = 0;
	}
	
	if timer <= 3
	{
		if facing = 0 && moveleft
			facing = 1;
		if facing = 1 && moveright
			facing = 0;
		
		reversal = 1;
	}
	
	if timer = 6
	{
		hspeed = 0;
	}

	if timer = 7
	{
		if ( random ( 2 ) < 1 ) {sound_play( choose( special_voice1, special_voice4, special_voice5 ) );}
		sound_play(charge_sound);
		
		if floattime >= spellcost
		{
			floattime -= spellcost;
			spellcosttimer = spellcosttime;
			effect_create_above(ef_ring,x + 14.80 * (1-facing*2) * size,y - 18.13 * size,0.1,c_silver);
			
			///Projectile For-Loop
			var i;
			for (i = 0; i < bullettotal; i += 1)
			{
				bullety = 30-(bulletcount*5);
				create_projectile(bulletdmg,bulletdir,bulletbkb,bulletkbg,bulletshielddmg,bullethitlag,bulletsound,bulletspark,bulletxscale,bulletyscale,bulletx,bullety,bulletid,bullettime,bulletscript);
				proj.bullettype = bullettype;
				proj.bulletcount = bulletcount;
				proj.bulletstartpos = bulletstartpos;
				proj.bulletshift = bulletshift;
				proj.bulletdirshift = bulletdirshift;
				proj.bulletscale = bulletscale;
				
				proj.bulletdmg = bulletdmg;
				proj.bulletdir = bulletdir;
				proj.bulletbkb = bulletbkb;
				proj.bulletkbg = bulletkbg;
				proj.bulletshielddmg = bulletshielddmg;
				proj.bullethitlag = bullethitlag;
				proj.bulletsound = bulletsound;
				proj.bulletspark = bulletspark;
				proj.bulletxscale = bulletxscale;
				proj.bulletyscale = bulletyscale;
				proj.bulletx = bulletx;
				proj.bullety = bullety;
				proj.bullettime = bullettime;
				proj.bulletid = bulletid;
				
				proj.hit = bullethit;
				proj.facing = facing;
				proj.hit_stun = bullethitstun;
				proj.shield_stun = bulletblockstun;
				proj.di = bulletdi;
				
				proj.direction = bulletdir;
				proj.bulletspeed = bulletspeed;
				proj.rotatespeed = rotatespeed;
				proj.explodetime = explodetime;
				
				bulletcount += 1;
			}
		}
		
		hspeed = -2.5*(1-facing*2)*size;
		vspeed = -4*size;
		
		instance_create(x,y-10*size,obj_spark_effect);
		spark = instance_create(x,y,obj_spark_shockwave);
		spark.image_xscale *= size;
		spark.image_yscale *= 0.2*size;
		spark.image_blend = c_white;
		
		//duster = instance_create(x,y,obj_dust_effect);
		//duster.facing = facing;
	}
	
	/*
	if timer >= 17 && ( attacking || special || smash || grab || movejump || shieldup ) && air > 0
	{
		interrupt = 1;
		flipcanceltimer = time-timer;
	}
	*/
	
	///No Bullet Version
	if timer = 114
	{
		if ( random ( 2 ) < 1 ) {sound_play( choose( mid_voice2, mid_voice4 ) );}
		sound_play ( swingsnd2 );
		vspeed = -5*size
		
		create_hitbox(7,85+facing*10,6.25,1,5,10,mokouhit2,obj_spark_hit1, 0.82 , 0.51 , 14 , 17.20 ,self.id,9,3);
		hitbox.hit_stun = 10;
		hitbox.di = -1;
		hitbox.weight_kb = 1
		
		percent += selfdmg;
		lifemeter += selfdmg * lifemetergain;
	}
	
	if timer = 117
	{
		hitbox.hitbox_x = size * ( 1 - ( facing * 2 ) ) * 12.40
		hitbox.hitbox_y = size * 21.20
		hitbox.image_xscale = size * 0.82
		hitbox.image_yscale = size * 0.57
		hitbox.image_angle = ( 1 - facing * 2 ) * 35.25
	}
}
	
if timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" 
{
	reversal = 0;
	attack_type = "none";
	if air > 0
		state_type = "jump";
	else
		state_type = "stand";
	timer = 0;
	time =-1;
}