if ( state_type = "jump" )
{
	//hspeed = 0;
	vspeed -= 0.1;
	state_type = "air_attack";
	attack_type = "fair";
	sprite_index = fair_sprite;
	image_speed = 0;
	image_index= 0;
	timer = 0;
	time = 32;
	timer_speed= 1;
	
	///Projectile Initialization Variables - Streamlines creation of more complex circular projectile patterns. ( Complete Circle: bulletshift * bullettotal = 360 )
	bullettype = 2; //Bullet type referenced in custom scripts with multiple projectile types.
	bulletcount = 0; //Initial bullet count.
	bullettotal = 5; //Total number of bullets created. Don't set this too high or performance will RIP!
	bulletstartpos = 0; //Initial bullet direction.
	bulletshift = 20; //Shifts the direction of the next bulletcount by this amount.
	bulletdirshift = bulletstartpos - bulletcount*bulletshift; //Used in direction calculation.
	bulletscale = 0.5; //Resizes bullet.
	
	bulletdmg = 2;
	bulletdir = ( ( facing=0 )*( ( 0 + bulletdirshift ) + facing*( 180 - bulletdirshift*2 ) ) ) + ( ( facing=1 )*( 180 - bulletdirshift ) );
	bulletbkb = 4;
	bulletkbg = 3;
	bulletshielddmg = 3.2;
	bullethitlag = 3;
	bulletsound = fire3;
	bulletspark = obj_spark_fire1;
	bulletxscale = 0.5;
	bulletyscale = 0.5;
	bulletx = 14;
	bullety = 6;
	bullettime = 99;
	bulletid = self.id;
	bulletscript = char_custom1;
	
	bullethit = 2;
	bullethitstun = 0;
	bulletblockstun = 0;
	bulletdi = 0.8;
	
	bulletspeed = 3;
	rotatespeed = 0;
	explodetime = 0;
	
	//Blur Variables
	stiltflamescale = 0.19
	stiltflamexshift = 2
	stiltflameyshift = 20
	stiltflameindex = 0
	stiltflametime = 14
	stiltflamespeed = 1
	stiltflamealpha = 1
	stiltflameangle = 50 * (1-facing*2)
	stiltflamezoom = -1
}

switch ( timer )
{
	case 4:	 image_index = 1; break;
	case 8:  image_index = 2; break;
	case 12: image_index = 3; break;
	case 16: image_index = 4; break;
	case 20: image_index = 5; break;
	case 24: image_index = 6; break;
	
	case 100: sprite_index = fair2_sprite; image_index = 0; break;
	case 102: image_index = 1; break;
	case 104: image_index = 2; break;
	case 106: image_index = 3; break;
	case 112: image_index = 4; break;
	case 114: image_index = 5; break;
	case 117: image_index = 6; break;
	case 120: image_index = 3; break;
	case 123: image_index = 2; break;
	case 126: image_index = 1; break;
	case 129: image_index = 0; break;
}

if timer < time 
{	
	if timer <= 0 && nobullet = 1
	{
		timer = 99
		time = 131
	}
	
	///Bullet Version
	if timer = 11
	{	
		sound_play(charge_sound);
		if ( random ( 2 ) < 1 ) {sound_play( choose( special_voice5, special_voice8, special_voice11, special_voice13 ) );}
	}
	
	if timer = 12 && floattime >= spellcost
	{
		floattime -= spellcost;
		spellcosttimer = spellcosttime;
		
		//hspeed = -3 * (1-facing*2) * size;
		effect_create_above(ef_ring,x + 15 * (1-facing*2) * size,y - 15 * size,0.05,c_red);
		
		var i;
		for (i = 0; i < bullettotal; i += 1)
		{
			create_projectile(bulletdmg,bulletdir,bulletbkb,bulletkbg,bulletshielddmg,bullethitlag,bulletsound,bulletspark,bulletxscale,bulletyscale,bulletx,bullety,bulletid,bullettime,bulletscript);
			proj.bullettype = bullettype;
			proj.bulletcount = bulletcount;
			proj.bulletstartpos = bulletstartpos;
			proj.bulletshift = bulletshift;
			proj.bulletscale = bulletscale;
			proj.bulletdirshift = bulletdirshift;
			proj.bulletdir = bulletdir;
			proj.direction = bulletdir;
			proj.bulletspeed = bulletspeed;
			proj.hit = bullethit;
			proj.facing = facing;
			proj.hit_stun = bullethitstun;
			proj.shield_stun = bulletblockstun;
			proj.di = bulletdi;
			
			proj.bulletdmg = bulletdmg;
			proj.bulletbkb = bulletbkb;
			proj.bulletkbg = bulletkbg;
			proj.bulletshielddmg = bulletshielddmg;
			proj.bullethitlag = bullethitlag;
			proj.bulletsound = bulletsound;
			proj.bulletspark = bulletspark;
			proj.bulletxscale = bulletxscale;
			proj.bulletyscale = bulletyscale;
			proj.bulletx = bulletx;
			proj.bullety = bullety;
			proj.bullettime = bullettime;
			proj.bulletid = bulletid;
			
			proj.bullethitstun = bullethitstun;
			
			bulletcount += 1;
		}
	}
	
	///No Bullet Version
	if timer = 114
	{
		if ( random ( 2 ) < 1 ) {sound_play( choose( mid_voice1, mid_voice5, mid_voice6 ) );}
		sound_play(swing_sound4);
		create_hitbox(15,270,4,8,15,11,mokouexplode6,obj_spark_fire1, 0.65 , 0.70 , -4.80 , 8 ,self.id,6,3);
		hitbox.hit_stun = 14;
		hitbox.shake_type = 1;
		hitbox.shake_kb = 5.5;
		hitbox.di = -1; 
		hitbox.shake_ampl = 1.15;
		create_hitbox2(16,300-facing*60,4,8.5,20,16,mokouexplode3,obj_spark_fire1, 0.40 , 1.01 , 9.60 , 18 ,self.id,6,4);
		hitbox2.shake_type = 1;
		hitbox2.shake_kb = 6;
		hitbox2.shake_ampl = 1.25;
		create_hitbox3(15,270,4,8,15,11,mokouexplode6,obj_spark_fire1,0.55 , 0.55 , 4.40 , 0.40 ,self.id,6,3);
		hitbox3.hit_stun = 14;
		hitbox3.shake_type = 1;
		hitbox3.shake_kb = 5.5;
		hitbox3.di = -1; 
		
		percent += selfdmg;
		lifemeter += selfdmg * lifemetergain;
		
		stiltflame = create_blur(x,y,self.id);
		if !blueflame {stiltflame.sprite_index = stiltflame_sprite;}
		if blueflame  {stiltflame.sprite_index = stiltflameblue_sprite;}
		stiltflame.image_xscale = (stiltflamescale*size)*(1-facing*2);
		stiltflame.image_yscale = (stiltflamescale*size);
		stiltflame.x = x + stiltflamexshift *size*(1-facing*2);
		stiltflame.y = y - stiltflameyshift*size;
		stiltflame.image_index = 0;
		stiltflame.image_speed = stiltflamespeed;
		stiltflame.image_alpha = stiltflamealpha;
		stiltflame.image_angle = stiltflameangle;
		stiltflame.alarm[0] = stiltflametime;
		stiltflame.snap = self.id;
		stiltflame.depth = stiltflamezoom;
	}
	
	if timer >= 114
	{
		hitbox2.hitlag_frames = floor( ( 16 + (target.percent*(target.percent<=200))/20 + (10*(target.percent>200)) )*size );
	}
	
	if stiltflame.image_index >= 2 { stiltflame.depth = 1; }

	if air = 0 
	{
		shakex = 0;
		shakey = 0;
		hspeed *= 1.2;
		air_move = 1;
		state_type="land";
		attack_type="none";
		sprite_index = land_sprite;
		timer= 0;
		time= 9; 
	}
}

if ( timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" )
{
	state_type = "jump";
	attack_type = "none";
	sprite_index = jump_sprite;
	image_index = 6;
	timer = 0;
	time = -1;
}