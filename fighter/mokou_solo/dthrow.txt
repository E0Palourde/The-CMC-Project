if ( time = -1 )
{
	hspeed = 0;
	state_type = "attack";
	attack_type = "dthrow";
	timer = 0;
	time = 35;
	sprite_index = dthrow_sprite;
	image_speed = 0;
	image_index = 0;
	target.timer_speed = 0;
	target.alarm[0] = 200;
	looped = 0;
	loopmax = 5;
	
	//Blur Variables
	dsmashpillarscale = 0.60
	dsmashpillarxshift = 22
	dsmashpillaryshift = -2
	dsmashpillartime = 22
	dsmashpillarspeed = 1.5
	dsmashpillarzoom = -2
}

if ( timer < time )
{
	switch ( timer )
	{
		case 10: image_index = 1; break;
		case 13: image_index = 2; break;
		case 17: image_index = 3; break;
		case 21: image_index = 4; break;
		case 26: image_index = 5; break;
		case 31: image_index = 6; break;
		
		case 100: sprite_index = stilt2_sprite; image_index = 0; break;
		case 102: image_index = 1; break;
		case 104: image_index = 2; break;
		case 106: image_index = 3; break;
		case 108: image_index = 4; break;
		case 110: image_index = 5; break;
		case 112: image_index = 6; break;
		case 114: image_index = 7; break;
		case 116: image_index = 8; break;
		case 118: image_index = 9; break;
		case 120: image_index = 10; break;
		case 122: image_index = 11; break;
		case 124: image_index = 12; break;
		case 126: image_index = 13; break;
	}
	
	if timer < 114
	{
		target.x = x + 20 * size * (1-facing*2);
		target.y = y - 0 * size;
		target.state_type = "air_flinch"
	}
	
	if timer = 26
	{
		create_hitbox(1,90,2,0,3,2,fire2,obj_spark_fire1,1.2,1.2,22,10,self.id,3,2);
		/*explosion = instance_create(x+25*size*(1-facing*2) ,y-25 * size,obj_spark_explode1);
		explosion.image_xscale = 2*size;
		explosion.image_yscale = 2*size; */
		hitbox.di = -1
		hitbox.hit_stun = 50
		
		dsmashpillar = create_blur(x,y,self.id);
		if !blueflame {dsmashpillar.sprite_index = dsmashpillar_sprite;}
		if blueflame {dsmashpillar.sprite_index = dsmashpillarblue_sprite;}
		dsmashpillar.image_xscale = (dsmashpillarscale*size)*(1-facing*2);
		dsmashpillar.image_yscale = (dsmashpillarscale*size);
		dsmashpillar.x = x + ( dsmashpillarxshift )*size*(1-facing*2);
		dsmashpillar.y = y - dsmashpillaryshift*size;
		dsmashpillar.image_index = 0;
		dsmashpillar.image_speed = dsmashpillarspeed;
		dsmashpillar.alarm[0] = dsmashpillartime;
		dsmashpillar.snap = self.id;
		dsmashpillar.depth = dsmashpillarzoom;
	}
	
	if timer = 28 && looped < loopmax
	{
		timer = 24;
		looped +=1;
	}
	
	if timer = 34
	{
		timer = 99;
		time = 128;
	}
	
	if timer = 114
	{
		create_throw_box(6,45+facing*90,5.0,6.2,5,8,mokouhit3,obj_spark_hit1, 1.05 , 0.65 , 4.40 , 19.60 ,self.id,1);
		hitbox.hit_stun = 7;
		
		percent += selfdmg;
		lifemeter += selfdmg * lifemetergain;
	}
}

if ( timer >= time - 1 )
{
	looped = 0;
	attack_type = "none";
	state_type = "stand";
	timer = 0;
	time = -1;
}