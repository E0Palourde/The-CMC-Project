fast_fall = 0;
fast_fall_temp = 0;

if ( state_type = "stand" || state_type = "run" || state_type = "jump" )
{
	//vspeed = -0.1
	state_type = "air_attack";
	attack_type = "zair";
	sprite_index = jump_sprite;
	image_index = 0;
	image_speed = 0;
	timer = 0+lastword*8;
	time = 18;
	special = 1;
	air_move = 1;
	upbfly = 0;
	charging = 0+lastword*8;
	chargecheck = 7;
	chargemax = 8;
	lastword = 0;
	
	bullethelltimer = 0; //Shoots when this is zero.
	bullethelltime = 5; //Delay between single shots.
	bulletpattern = 0; //Delay between several rounds of rapidfire shots.
	bulletpatternmax = 5;
	bulletpatterntimer = 0; //Shoots when this is zero.
	bulletpatterntime = 120; 
	
	//Fly Variables
	maxflyspeedv = 4;
	maxflyspeedh = 4;
	flyaccel = 0.2;
	flybrake = 0.08;
	
	//Blur Variables
	spellcirclescale = 0.35
	spellcirclexshift = 0
	spellcircleyshift = 15
	spellcircletime = 50
	spellcirclespeed = 0
	spellcirclezoom = -1
	
	//Blur Variables
	phoenixwingscale = 0.25
	phoenixwingxshift = 0
	phoenixwingyshift = 10
	phoenixwingtime = 999
	phoenixwingspeed = 0.75
	phoenixwingzoom = 1
	
	//Blur Variables
	phoenixwing2_scale = 0.25
	phoenixwing2_xshift = -16
	phoenixwing2_yshift = 35
	phoenixwing2_time = 999
	phoenixwing2_speed = 0
	phoenixwing2_zoom = 1
	wingflip = 0
	wingfliptimer = 0
	wingfliptime = 1
	wingflipspeed = 0.75
	soundtemp = 0;
	
	/// Projectile Initialization Variables - Streamlines creation of more complex circular projectile patterns. ( Complete Circle: bulletshift * bullettotal = 360 )
	bullettype = 4; //Bullet type referenced in custom scripts with multiple projectile types.
	bulletcount = 0; //Initial bullet count. This increases during loops.
	bullettotal = 10; //Total number of bullets created. Loop max. Don't set this too high or performance will RIP!
	bulletcount2 = 0;
	bullettotal2 = 5;
	bulletscale = 0.5; //Resizes bullet.
	
	// Notes - Copypasta all direction related variables into the bullet script or you'll face facing/direction related bugs.
	bulletflip = 0; //Used when creating circular-like bullet patterns starting from vertical center rather than the side. (Example: Any pattern with a bulletstartdir of 90)
	bulletstartdir = 0; //Initial bullet direction.  Use negative numbers for downward angles.
	bulletshift = 36 * (1-bulletflip*2); //Shifts the direction of the next bulletcount by this amount.
	bulletdirshift = bulletstartdir + bulletcount*bulletshift; //Used in direction/angle calculation.
	
	bulletgrab = 3; //Custom variable for editing bullet script when same bullettype is used differently in another move. Can rename.

	bulletdmg = 0;
	bulletdir = 361;
	bulletbkb = 0;
	bulletkbg = 0;
	bulletshielddmg = 5;
	bullethitlag = 0;
	bulletsound = fire3;
	bulletspark = obj_spark_fire1;
	bulletxscale = 0.5;
	bulletyscale = 0.5;
	bulletx = 0;
	bullety = 20;
	bullettime = 99;
	bulletid = self.id;
	bulletscript = char_custom1;

	bullethit = 0;
	bullethitstun = 0;
	bulletblockstun = 0;
	bulletdi = 1;

	bulletangle = ( ( facing=0 )*( ( 0 + bulletdirshift ) + facing*( 180 - bulletdirshift*2 ) ) ) + ( ( facing=1 )*( 180 - bulletdirshift ) )
	bulletspeed = 5;
	rotatespeed = 0;
	bulletcharge = 0;
	explodetime = 99;
}

if ( ai )
{
	if ( offstage )
	{
		var a;
		a = instance_nearest ( x , y , obj_edge );
		moveleft = 0;
		moveright = 0;
		if ( a . x < x )
		moveleft = 1;
		else
		moveright = 1;
		moveup = 1;
	}
	if ( !offstage ) 
	{
		state_type = "jump";
		sprite_index = jump_sprite;
		timer = 0;
		time = -1;
	}
}

switch ( timer )
{
	case 3: image_index = 1; break;
	case 6: image_index = 2; break;
	case 9: image_index = 3; break;
}

if timer < time 
{
	if timer <= 0 && !lastword
	{
		if ( ( moveright && facing = 0 ) || ( moveleft && facing = 1 ) )
		{
			timer = 0;
			time = -1;
			state_type = "jump";
			char_fair();
		}
		if ( ( moveright && facing = 1 ) || ( moveleft && facing = 0 ) )
		{
			timer = 0;
			time = -1;
			state_type = "jump";
			char_bair();
		}
		if moveup
		{
			timer = 0;
			time = -1;
			state_type = "jump";
			char_uair();
		}
		if movedown
		{
			timer = 0;
			time = -1;
			state_type = "jump";
			char_dair();
		}
		if !moveup && !movedown && !moveleft && !moveright
		{
			timer = 0;
			time = -1;
			state_type = "jump";
			char_nair();
		}
	}
	
	if lastword
	{
		super_armor = 9999;
		heavy_armor = 9999;
		hyper_armor = 9999;
		weight = 9999;
		lastwordtemp = 1;
		lastwordtimer += 1
		
		/*
		percent += 1/3600
		if ( percent >= 100 || (state_type = "dead") || ( state_type = "ded" ) ) && lastwordtemp >= 1
		{
			state_type = "ded";
			dead = 1;
			dead_timer = 111;
			lastword = 0;
		}
		*/
		
		if lastwordtimer = 1800
		{
			timer = time;
			lastword = 0;
			lastwordtimer = 0;
		}
	}
	
	if timer > 25 && air > 0 && !lastword
	{
		force_edge_grab = 1;
	}
	
	//Charging
	if timer < ( chargecheck + 1 ) && special
	{
		charging += 1;		
	}
	if timer < ( chargecheck + 1 ) && !special
	{
		special = 0;
	}
	
	if timer = 3
	{
		create_hitbox(8,60+facing*60,7.5,2.5,25,8,mokouexplode6,obj_spark_fire1,0.9,0.8,0,11,self.id,3,5);
		hitbox.hit_stun = 12;
		
		instance_create(x,y+2,obj_down_impact);
		sound_play(mokouexplosion1);
		instance_create(x+(1-facing*2)*size*4,y-12*size,obj_spark_effect);
		instance_create(x,y+4,obj_spark_explode1);
		shaker = instance_create(x,y,obj_shakescreen2);
		shaker.ampl = 1.5;
		shaker.time = 8;
	}
	
	if timer = 4
	{
		vspeed = (-8.5+nobullet)*size
		sound_play(upb_sound)
	}
	
	if timer >= 8 && timer <= 16 && charging >= chargemax
	{
		if ( nobullet = 0 && floattime > 0 ) || lastword
		{
			special = 0;
			sprite_index = upb_sprite;
			image_index = 0;
			image_speed = 1/3;
			upbfly = 1;
			timer = 100;
			time = 999;
		}
		else
			upbfly = 0;
	}
	
	if timer >= 100 && ( upbfly || lastword )
	{
		//Red Bull
		if ( !instance_exists(phoenixwing) )
		{
			phoenixwing = create_blur(x,y,self.id);
			if !blueflame {phoenixwing.sprite_index = phoenixwing_sprite;}
			if blueflame {phoenixwing.sprite_index = phoenixwingblue_sprite;}
			phoenixwing.image_xscale = (phoenixwingscale*size)*(1-facing*2);
			phoenixwing.image_yscale = (phoenixwingscale*size);
			phoenixwing.x = x + ( phoenixwingxshift )*size*(1-facing*2);
			phoenixwing.y = y - phoenixwingyshift*size;
			phoenixwing.image_index = 0;
			phoenixwing.image_speed = phoenixwingspeed;
			phoenixwing.image_alpha = 1
			phoenixwing.alarm[0] = phoenixwingtime;
			phoenixwing.snap = self.id;
			phoenixwing.depth = phoenixwingzoom;
		}
		
		if ( !instance_exists(phoenixwing2) )
		{
			phoenixwing2 = create_blur(x,y,self.id);
			if !blueflame {phoenixwing2.sprite_index = phoenixwing2_sprite;}
			if blueflame {phoenixwing2.sprite_index = phoenixwingblue2_sprite;}
			phoenixwing2.image_xscale = (phoenixwing2_scale*size)*(1-facing*2);
			phoenixwing2.image_yscale = (phoenixwing2_scale*size);
			phoenixwing2.x = x + ( phoenixwing2_xshift )*size*(1-facing*2);
			phoenixwing2.y = y - phoenixwing2_yshift*size;
			phoenixwing2.image_index = 5;
			phoenixwing2.image_speed = phoenixwing2_speed;
			phoenixwing2.image_alpha = 1
			phoenixwing2.alarm[0] = phoenixwing2_time;
			phoenixwing2.snap = self.id;
			phoenixwing2.depth = phoenixwing2_zoom;
		}
		
		if ( !instance_exists(spellcircle) )
		{
			spellcircle = create_blur(x,y,self.id);
			spellcircle.sprite_index = spellcircle_sprite;
			spellcircle.image_xscale = (spellcirclescale*size)*(1-facing*2);
			spellcircle.image_yscale = (spellcirclescale*size);
			spellcircle.x = x + ( spellcirclexshift + (chargeshift * looped) )*size*(1-facing*2);
			spellcircle.y = y - spellcircleyshift*size;
			spellcircle.image_index = 0;
			spellcircle.image_speed = spellcirclespeed;
			spellcircle.alarm[0] = spellcircletime;
			spellcircle.snap = self.id;
			spellcircle.depth = spellcirclezoom;
		}
		
		spellcircle.image_angle += 10 * (1-facing*2);

		//Fly Stuff
		gravity = 0;
		gravity_lock = 1;
		image_angle = 0;
		
		if !lastword
		{
			if floattime > 0 {floattime -= 1;}
			
			if floattime <= 0
			{
				if floattime <= 0 {floattime = 0;}
				timer = time-1;
			}
		}
		
		if ( floattime > 0 ) || lastword
		{
			if timer = time-2
			timer = 100
		}
		
		//Fly Direction
		if moveup {vspeed -= flyaccel}
		if movedown {vspeed += flyaccel}
		if moveleft {hspeed -= flyaccel}
		if moveright {hspeed += flyaccel}
		
		if hspeed > maxflyspeedh {hspeed = maxflyspeedh}
		if hspeed < -maxflyspeedh {hspeed = -maxflyspeedh}
		if vspeed > maxflyspeedv {vspeed = maxflyspeedv}
		if vspeed < -maxflyspeedv {vspeed = -maxflyspeedv}
		
		if (!moveright || !moveleft)
		{
			if hspeed > 0 {hspeed -= flybrake}
			if hspeed < 0 {hspeed += flybrake}
		}
		if (!moveup || !movedown )
		{
			if vspeed < 0 {vspeed += flybrake}
			if vspeed > 0 {vspeed -= flybrake}
		}
		
		if air = 0
		{
			vspeed -= 0.1;
		}
		
		//Fly Facing
		if moveright || moveleft
		{
			if hmovetemp = -1
			{
				if instance_exists(phoenixwing) {with(phoenixwing){instance_destroy();}}
				if instance_exists(phoenixwing2) {with(phoenixwing2){instance_destroy();}}
				
				//Red Bull
				if ( !instance_exists(phoenixwing) )
				{
					phoenixwing = create_blur(x,y,self.id);
					if !blueflame {phoenixwing.sprite_index = phoenixwing_sprite;}
					if blueflame {phoenixwing.sprite_index = phoenixwingblue_sprite;}
					phoenixwing.image_xscale = (phoenixwingscale*size)*(1-facing*2);
					phoenixwing.image_yscale = (phoenixwingscale*size);
					phoenixwing.x = x + ( phoenixwingxshift )*size*(1-facing*2);
					phoenixwing.y = y - phoenixwingyshift*size;
					phoenixwing.image_index = 0;
					phoenixwing.image_speed = phoenixwingspeed;
					phoenixwing.image_alpha = 1
					phoenixwing.alarm[0] = phoenixwingtime;
					phoenixwing.snap = self.id;
					phoenixwing.depth = phoenixwingzoom;
				}

				if ( !instance_exists(phoenixwing2) )
				{
					phoenixwing2 = create_blur(x,y,self.id);
					if !blueflame {phoenixwing2.sprite_index = phoenixwing2_sprite;}
					if blueflame {phoenixwing2.sprite_index = phoenixwingblue2_sprite;}
					phoenixwing2.image_xscale = (phoenixwing2_scale*size)*(1-facing*2);
					phoenixwing2.image_yscale = (phoenixwing2_scale*size);
					phoenixwing2.x = x + ( phoenixwing2_xshift )*size*(1-facing*2);
					phoenixwing2.y = y - phoenixwing2_yshift*size;
					phoenixwing2.image_index = 5;
					phoenixwing2.image_speed = phoenixwing2_speed;
					phoenixwing2.image_alpha = 1
					phoenixwing2.alarm[0] = phoenixwing2_time;
					phoenixwing2.snap = self.id;
					phoenixwing2.depth = phoenixwing2_zoom;
				}
			}
			
			if moveleft 
			{
				facing = 0; 
				if hmovetemp = 0 {hmovetemp = -1;}
				else {hmovetemp = 1;}
			}
			if moveright 
			{
				facing = 1; 
				if hmovetemp = 1 {hmovetemp = -1;}
				else {hmovetemp = 0;}
			}
		}
		
		if !lastword
		{
			//Fly Interrupt
			if attacking || ( special && !moveleft && !moveright && !moveup )  || ( special && ( moveleft || moveright ) && sidebtemp = 0 ) || smash || shieldup || grab || ( movejump && air < max_jumps-1 )
			{
				upbflytemp = 1;
				interrupt = 1;
			}
		}
		
		//Image Loop
		if phoenixwing.image_index >= 21 {phoenixwing.image_index = 0;}
		if image_index > 7 {image_index = 4;}
		
		wingfliptimer += wingflipspeed;
		if wingfliptimer >= wingfliptime
		{
			phoenixwing2.image_index += 1-wingflip*2
			wingfliptimer = 0
		}
		if phoenixwing2.image_index >= 5
		{
			wingflip = 1;
		}
		if phoenixwing2.image_index <= 0
		{
			wingflip = 0;
		}
		
		///BULLET HELL
		if lastword && percent < 100
		{
			if bullethelltimer > 0 {bullethelltimer -= 1;}
			if bullethelltimer < 0 {bullethelltimer = 0;}
			if bulletpatterntimer > 0 {bulletpatterntimer -= 1;}
			if bulletpatterntimer < 0 {bulletpatterntimer = 0;}
			
			if bullethelltimer = 0 && bulletpatterntimer = 0
			{
				if bulletrage = 2 {bulletpatternmax = 12}
				else {bulletpatternmax = 5}
				sound_play(shoot_sound); 
				///Projectile For-Loop (Circle Bullets)
				var i;
				for (i = 0; i < bullettotal; i += 1)
				{
					///Some variables need to go here for some calculations during the loop.
					//bulletx = 30-bulletcount*7
					//bullety = 30-bulletcount*7
					bulletdmg = 4;
					bulletdir = bulletangle;
					bulletbkb = 6*size;
					bulletkbg = 7*size;
					bulletshielddmg = 1;
					bullethitlag = round(10*size);
					bulletcount = i;
					
					create_projectile(bulletdmg,bulletdir,bulletbkb,bulletkbg,bulletshielddmg,bullethitlag,bulletsound,bulletspark,bulletxscale,bulletyscale,bulletx,bullety,bulletid,bullettime,bulletscript);
					proj.bulletflip = bulletflip;
					proj.bullettype = bullettype;
					proj.bulletcount = bulletcount;
					proj.bulletstartdir = bulletstartdir;
					proj.bulletshift = bulletshift;
					proj.bulletdirshift = bulletdirshift;
					proj.bulletscale = bulletscale;
					proj.bulletdmg = bulletdmg;
					proj.bulletdir = bulletdir;
					proj.bulletbkb = bulletbkb;
					proj.bulletkbg = bulletkbg;
					proj.bulletshielddmg = bulletshielddmg;
					proj.bullethitlag = bullethitlag;
					proj.bulletsound = bulletsound;
					proj.bulletspark = bulletspark;
					proj.bulletxscale = bulletxscale;
					proj.bulletyscale = bulletyscale;
					proj.bulletx = bulletx;
					proj.bullety = bullety;
					proj.bullettime = bullettime;
					proj.bulletid = bulletid;
					proj.hit = bullethit;
					proj.facing = facing;
					proj.hit_stun = bullethitstun;
					proj.shield_stun = bulletblockstun;
					proj.di = bulletdi;
					proj.bulletangle = bulletangle;
					proj.bulletspeed = bulletspeed;
					proj.rotatespeed = rotatespeed;
					proj.bulletgrab = bulletgrab;
					proj.bulletcharge = smash_charge;
					proj.explodetime = explodetime;
					proj.shotround = looped;

					bulletcount += 1;
				}
				
				bullethelltimer = bullethelltime
				bulletpattern += 1
			}
			
			if bulletpattern = bulletpatternmax
			{
				bulletpatterntimer = bulletpatterntime; 
				if bulletrage < 2 {bulletrage += 1;}
				else {bulletrage = 0;}
			}
			if bulletpattern > 0 && bulletpatterntimer > 0 {bulletpattern -= 1;}
			if bulletpattern < 0 {bulletpattern = 0;}
			
			if special && floattime > 0
			{	
				if soundtemp = 0
				{
					sound_play(charge_sound);
					sound_play(mokoubird_sound); 
					soundtemp = 1;
				}
				
				///Projectile Loop (Bird Bullets)
				if bulletcount2 < bullettotal2
				{
					///Some variables need to go here for some calculations during the loop.
					//bulletx = 30-bulletcount*7
					//bullety = 30-bulletcount*7
					bulletdmg = 10;
					bulletdir = bulletangle;
					bulletbkb = 7*size;
					bulletkbg = 8*size;
					bulletshielddmg = round(20*size);
					bullethitlag = round(20*size);
					
					create_projectile(bulletdmg,bulletdir,bulletbkb,bulletkbg,bulletshielddmg,bullethitlag,bulletsound,bulletspark,bulletxscale,bulletyscale,bulletx,bullety,bulletid,bullettime,bulletscript);
					proj.bulletflip = bulletflip;
					proj.bullettype = bullettype;
					proj.bulletcount = bulletcount2;
					proj.bulletstartdir = bulletstartdir;
					proj.bulletshift = bulletshift;
					proj.bulletdirshift = bulletdirshift;
					proj.bulletscale = bulletscale;
					proj.bulletdmg = bulletdmg;
					proj.bulletdir = bulletdir;
					proj.bulletbkb = bulletbkb;
					proj.bulletkbg = bulletkbg;
					proj.bulletshielddmg = bulletshielddmg;
					proj.bullethitlag = bullethitlag;
					proj.bulletsound = explodehit3;
					proj.bulletspark = bulletspark;
					proj.bulletxscale = bulletxscale;
					proj.bulletyscale = bulletyscale;
					proj.bulletx = bulletx;
					proj.bullety = bullety;
					proj.bullettime = bullettime;
					proj.bulletid = bulletid;
					proj.hit = bullethit;
					proj.facing = facing;
					proj.hit_stun = bullethitstun;
					proj.shield_stun = bulletblockstun;
					proj.di = bulletdi;
					proj.bulletangle = bulletangle;
					proj.bulletspeed = bulletspeed;
					proj.rotatespeed = rotatespeed;
					proj.bulletgrab = bulletgrab;
					proj.bulletcharge = smash_charge;
					proj.explodetime = explodetime;
					proj.shotround = looped;
					proj.specialtemp = 1;

					bulletcount2 += 1;
					floattime -= spellcost;
					spellcosttimer = spellcosttime;
				}
				if floattime = maxfloattime
				{
					bulletcount2 = 0
					soundtemp = 0;
				}
			}
		}
	}
}

if timer >=time-1 && state_type != "flinch" && state_type != "air_flinch" 
{
	if instance_exists(phoenixwing) {with(phoenixwing){instance_destroy();}}
	if instance_exists(phoenixwing2) {with(phoenixwing2){instance_destroy();}}
	if instance_exists(spellcircle) {with(spellcircle){instance_destroy();}}
	attack_type = "none";
	//if air = 0
		//state_type = "stand";
	//else
		state_type = "jump"
	timer = 0;
	time =-1;
}