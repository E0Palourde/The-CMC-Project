if hiddenskills = 0 {
if ( state_type = "stand" || state_type = "run" || state_type = "jump" )
  {
    if ( moveright )
	facing = 0;
    if ( moveleft )
	facing = 1;
    if ( air = 0 )
      {
		create_hurtbox_precise(self.id, 65, upb_start_mask)
		state_type = "attack";
		attack_type = "upb";
		timer = 0;
		time = 65;
		sprite_index = upb_start_sprite;
		image_speed = 0;
		image_index = 0;
		hspeed = 0;
		temp = 0;
		temp2 = 0; //used for charging
		special = 1
      }
    else
      {
		state_type = "air_attack";
		attack_type = "upb";
		timer = 0;
		time = 60;
		sprite_index = upb_air_sprite;
		image_speed = 0;
		image_index = 0;
		hspeed *= 0.66;
		temp = 1;
		create_hurtbox_precise(self.id, 67, upb_air_mask)

      }
  }

if ( timer < time )
  {
    if ( temp = 0 )
    switch ( timer )
      {
		case 2: image_index = 1; break;
		case 3: image_index = 2; break;
		case 4: image_index = 3; break;
		case 5: image_index = 4; break;
		case 6: image_index = 0; 
			image_speed = 0.4; 
			sprite_index = upb_charge_sprite;
			with(hurtbox)
				{instance_destroy()}
			create_hurtbox_precise(self.id, 66, upb_charge_mask)
			break;
		case 8: image_index = 0; image_speed = 0; break;
		case 9: image_index = 1; break;
		case 10: image_index = 2; break;
		case 11: image_index = 3; break;
		case 12: image_index = 4; break;
		case 13: image_index = 5; break;
		case 14: image_index = 6; break;
		case 15: image_index = 7; break;
		case 16: image_index = 8; break;
		case 17: image_index = 9; break;
		case 18: image_index = 10; break;
		case 19: image_index = 11; break;
		case 20: image_index = 12; break;
		case 21: image_index = 13; break;
		case 22: image_index = 14; break;
		case 23: image_index = 15; break;
		case 24: image_index = 16; break;
		case 25: image_index = 17; break;
		case 26: image_index = 18; break;
		case 27: image_index = 19; break;
		case 28: image_index = 20; break;
		case 29: image_index = 21; break;
		case 30: image_index = 22; break;
		case 31: image_index = 23; break;
		case 32: image_index = 24; break;
		case 33: image_index = 25; break;
		case 34: image_index = 26; break;
		case 35: image_index = 28; break;
		case 36: image_index = 29; break;
		case 37: image_index = 30; break;
		case 38: image_index = 31; break;
		case 39: image_index = 32; break;
		case 40: image_index = 33; break;
		case 41: image_index = 0; break;
		case 42: image_index = 1; break;
		case 43: image_index = 2; break;
		case 44: image_index = 3; break;
		case 45: image_index = 4; break;
		case 46: image_index = 5; break;
		case 47: image_index = 6; break;
		case 48: image_index = 7; break;
		case 49: image_index = 8; break;
		case 50: image_index = 9; break;
		case 51: image_index = 10; break;
		case 52: image_index = 11; break;
		case 53: image_index = 12; break;
		case 54: image_index = 13; break;
		case 55: image_index = 14; break;
		case 56: image_index = 15; break;
		case 57: image_index = 16; break;
		case 58: image_index = 17; break;
		case 59: image_index = 18; break;
		case 60: image_index = 19; break;
		case 61: image_index = 20; break;
		case 62: image_index = 21; break;
		case 63: image_index = 22; break;
		case 64: image_index = 23; break;
		case 65: image_index = 24; break;
		case 66: image_index = 25; break;
		case 67: image_index = 26; break;
		case 68: image_index = 28; break;
		case 69: image_index = 29; break;
		case 70: image_index = 30; break;
		case 71: image_index = 31; break;
		case 72: image_index = 32; break;
		case 73: image_index = 33; break;
		case 74: image_index = 0; break;
		case 75: image_index = 1; break;
		case 76: image_index = 2; break;
		case 77: image_index = 3; break;
		case 78: image_index = 4; break;
		case 79: image_index = 5; break;
		case 80: image_index = 6; break;
		case 81: image_index = 7; break;
		case 82: image_index = 8; break;
		case 83: image_index = 9; break;
		case 84: image_index = 10; break;
		case 85: image_index = 11; break;
		case 86: image_index = 12; break;
		case 87: image_index = 13; break;
		case 88: image_index = 14; break;
		case 89: image_index = 15; break;
		case 90: image_index = 16; break;
		case 91: image_index = 17; break;
		case 92: image_index = 18; break;
		case 93: image_index = 19; break;
		case 94: image_index = 20; break;
		case 95: image_index = 21; break;
		case 96: image_index = 22; break;
		case 97: image_index = 23; break;
		case 98: image_index = 24; break;
		case 99: image_index = 25; break;
		case 100: image_index = 26; break;
		case 101: image_index = 28; break;
		case 102: image_index = 29; break;
		case 103: image_index = 30; break;
		case 104: image_index = 31; break;
		case 105: image_index = 32; break;
		case 106: image_index = 33; break;
		case 107: image_index = 0; break;
		case 108: image_index = 1; break;
		case 109: image_index = 2; break;
		case 110: image_index = 3; break;
		case 111: image_index = 4; break;
		case 112: image_index = 5; break;
		case 113: image_index = 6; break;
		case 114: image_index = 7; break;
		case 115: image_index = 8; break;
		case 116: image_index = 9; break;
		case 117: image_index = 10; break;
		case 118: image_index = 11; break;
		case 119: image_index = 12; break;
		case 120: image_index = 13; break;
		case 121: image_index = 14; break;
		case 122: image_index = 15; break;
		case 123: image_index = 16; break;
		case 124: image_index = 17; break;
		case 125: image_index = 18; break;
		case 126: image_index = 19; break;
		case 127: image_index = 20; break;
		case 128: image_index = 21; break;
		case 129: image_index = 22; break;
		case 130: image_index = 23; break;
		case 131: image_index = 24; break;
		case 132: image_index = 25; break;
		case 133: image_index = 26; break;
		case 134: image_index = 28; break;
		case 135: image_index = 29; break;
		case 136: image_index = 30; break;
		case 137: image_index = 31; break;
		case 138: image_index = 32; break;
		case 139: image_index = 33; break;
		case 140: image_index = 0; break;
		case 141: image_index = 1; break;
		case 142: image_index = 2; break;
		case 143: image_index = 3; break;
		case 144: image_index = 4; break;
		case 145: image_index = 5; break;
		case 146: image_index = 6; break;
		case 147: image_index = 7; break;
		case 148: image_index = 8; break;
		case 149: image_index = 9; break;
		case 150: image_index = 10; break;
		case 151: image_index = 11; break;
		case 152: image_index = 12; break;
		case 153: image_index = 13; break;
		case 154: image_index = 14; break;
		case 155: image_index = 15; break;
		case 156: image_index = 16; break;
		case 158: image_index = 17; break;
		case 160: image_index = 34; with(upbblur){instance_destroy();}  break; //spin end
		case 161: image_index = 35; break;
			case 162: image_index = 36; break;
			case 163: image_index = 37; break;
			case 164: image_index = 38; break;
			case 165: image_index = 39; break;
			case 166: image_index = 40; break;
			case 167: image_index = 41; break;
		case 170: image_index = 42; break;
		case 178: image_index = 45; break;
      }
    if ( temp = 1 ) // Air
    switch ( timer )
      {
		case 2: image_index = 1; break;
		case 3: image_index = 2; break;
		case 4: image_index = 3; break;
		case 5: image_index = 4; break;
		case 6: image_index = 5; break;
		case 7: image_index = 6; break;
		case 8: image_index = 7; break;
		case 9: image_index = 8; break;
		case 10: image_index = 9; break;
		case 11: image_index = 10; break;
		case 12: image_index = 11; break;
		case 14: image_index = 12; break;
		case 16: image_index = 13; break;
		case 18: image_index = 14; break;
		case 20: image_index = 15; break;
		case 22: image_index = 16; break;
		case 24: image_index = 17; break;
		case 26: image_index = 18; break;
		case 28: image_index = 19; break;
		case 30: image_index = 20; break;
		case 32: image_index = 21; break;
		case 34: image_index = 22; break;
		case 36: image_index = 23; break;
		case 38: image_index = 24; break;
		case 40: image_index = 25; break;
		case 42: image_index = 26; break;
		case 44: image_index = 27; break;
		case 46: image_index = 28; break; //last slash
		case 47: image_index = 29; break;
		case 48: image_index = 30; break;
		case 49: image_index = 31; break;
		case 50: image_index = 32; break;
		case 51: image_index = 33; break;
		case 52: image_index = 34; break;
		case 54: image_index = 35; break;
		case 58: image_index = 36; break;
      }
    if ( temp = 1 )
	switch (timer){
        case 4:
       sword_trail = create_sword_trail2(self.id,2,33,10,5,30,upb_texture);
sword_trail.visible_frames = 4;
sword_trail.per_frame_radius = true;
sword_trail.tip_radius[31] = 0;
sword_trail.base_radius[31] = 0;
sword_trail.tip_radius[30] = 0;
sword_trail.base_radius[30] = 0;
sword_trail.tip_radius[29] = -5;
sword_trail.base_radius[29] = -2;
sword_trail.tip_radius[28] = -6;
sword_trail.base_radius[28] = -6;
sword_trail.tip_radius[27] = -26;
sword_trail.base_radius[27] = -16;
sword_trail.tip_radius[26] = -36;
sword_trail.base_radius[26] = -17;
sword_trail.tip_radius[25] = -19;
sword_trail.base_radius[25] = -8;
sword_trail.tip_radius[24] = -1;
sword_trail.base_radius[24] = -3;
sword_trail.tip_radius[23] = -19;
sword_trail.base_radius[23] = -14;
sword_trail.tip_radius[22] = -28;
sword_trail.base_radius[22] = -16;
sword_trail.tip_radius[21] = -40;
sword_trail.base_radius[21] = -14;
sword_trail.tip_radius[20] = -15;
sword_trail.base_radius[20] = -8;
sword_trail.tip_radius[19] = -1;
sword_trail.base_radius[19] = -1;
sword_trail.tip_radius[18] = -20;
sword_trail.base_radius[18] = -13;
sword_trail.tip_radius[17] = -26;
sword_trail.base_radius[17] = -16;
sword_trail.tip_radius[16] = -36;
sword_trail.base_radius[16] = -15;
sword_trail.tip_radius[15] = -19;
sword_trail.base_radius[15] = -16;
sword_trail.tip_radius[14] = -1;
sword_trail.base_radius[14] = 0;
sword_trail.tip_radius[13] = -24;
sword_trail.base_radius[13] = -17;
sword_trail.tip_radius[12] = -22;
sword_trail.base_radius[12] = -11;
sword_trail.tip_radius[11] = -33;
sword_trail.base_radius[11] = -14;
sword_trail.tip_radius[10] = -17;
sword_trail.base_radius[10] = -7;
sword_trail.tip_radius[9] = -1;
sword_trail.base_radius[9] = -2;
sword_trail.tip_radius[8] = -22;
sword_trail.base_radius[8] = -18;
sword_trail.tip_radius[7] = -23;
sword_trail.base_radius[7] = -14;
sword_trail.tip_radius[6] = -35;
sword_trail.base_radius[6] = -9;
sword_trail.tip_radius[5] = -14;
sword_trail.base_radius[5] = -8;
sword_trail.tip_radius[4] = -2;
sword_trail.base_radius[4] = 0;
sword_trail.tip_radius[3] = -17;
sword_trail.base_radius[3] = -13;
sword_trail.tip_radius[2] = -36;
sword_trail.base_radius[2] = -23;
sword_trail.tip_radius[1] = -22;
sword_trail.base_radius[1] = -7;
sword_trail.tip_radius[0] = 10;
sword_trail.base_radius[0] = 5;
with(sword_trail) interpolate_sword_trail();
sword_trail.color_blend = sword_color;
sword_trail.index = 1;
break;
    case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: sword_trail.index += 1; break;
    case 14: case 16:case 18:case 20:case 22:case 24:case 26:case 28: sword_trail.index += 1; break;
    case 30: case 32:case 34: case 36: case 38: case 40: case 42: 
	case 44: sword_trail.index += 1; break;
    case 46: case 47: case 48: case 49: case 50: sword_trail.index += 1; break;
    case 51: with (sword_trail) instance_destroy();

	}

    if ( temp = 0 )
      {
	if ( ai && random(40) > 35 )
	    special = 0;
	if ( timer >= 55 )
	    special = 0;
        if ( timer == 8 )
          {
            instance_create ( x , y , obj_down_impact );
	    sound_play(upbcharge_sound);
          }

	if ( timer >= 8 && timer < 100 && !special )
	  { 
	    temp2 = timer - 2; //-5
	    sound_play(choose(dsmash_voice,usmash_voice));
	    sound_stop(upbcharge_sound);
	    sound_play(spin_sound1);
	    sprite_index = upb_sprite;
		with(hurtbox)
			instance_destroy()
		create_hurtbox_precise(self.id, 98, upb_mask)
	    timer = 100;
	    time = 189;
	    upbblur = create_blur(x,y-22.5*size,self.id);
      upbblur.loop=8;
      upbblur.sprite_index=upb_eff_sprite;
      //upbblur.glow=3;
      upbblur.image_alpha=0.7;
      upbblur.image_speed=0.3;
      upbblur.snap=self.id;
      upbblur.image_xscale=-0.26*(1-facing*2)*size;
      upbblur.image_yscale=0.13*size;
      upbblur.image_angle=angle_correct(5);
      upbblur.depth=depth-1;
	  upbblur.image_blend = sword_color;
	    create_hitbox(10+temp2/5,362,6+temp2/20,7.2+temp2/20,5+temp2/2,6+temp2/5,slash2,obj_spark_slash1,2.6,0.5,1,20,self.id,55,4);
	    if temp2 >= 20 && temp2 < 40
		hitbox.gfx = obj_spark_slash2
	    if temp2 >= 30
		hitbox.sfx = slash3
	    if temp2 >= 40
		hitbox.gfx = obj_spark_slash3
	  }

	if ( timer = 103 || timer = 111 || timer = 119 )
	    sound_play(spin_sound1);
        if ( timer = 120 ) {
		hitbox.damage = 7;
		hitbox.dir = 345-facing*150;
		hitbox.bkb = 6;
		hitbox.kbg = 3.65;
		hitbox.sfx = slash1;
		hitbox.priority = 2;
		}
	if ( timer = 127 || timer = 135 )
	    sound_play(spin_sound2);
	if ( timer = 143 )
	    sound_play(spin_sound3);
	if ( timer = 151 )
	    sound_play(spin_sound4);
	if ( timer = 161 )
	  {
	    sound_play(spin_sound5);
	    //sprite_index = jab_sprite2;
	    //image_speed = 0;
	    //image_index = 3;
	  }
      }

    if ( temp = 1 )
      {
	if timer > 25
	force_edge_grab = 1
	fast_fall = 0;
	fast_fall_temp = 0;
	if timer < 52 && ( vspeed > -2.3*size )
	    vspeed = -2.3*size;
	if ( moveright && hspeed < air_speed * (0.75-facing*1.5) )
	    hspeed += 0.1;
	if ( moveleft && hspeed > -air_speed * (0.75-facing*1.5) )
	    hspeed -= 0.1;

	if ( timer = 3 )
	    sound_play(dsmash_voice);
	if ( timer = 4 || timer = 10 || timer = 16 )
	    sound_play(spin_sound1);
	if ( timer = 22 || timer = 29 )
	    sound_play(spin_sound2);
	if ( timer = 35 )
	    sound_play(spin_sound3);
	if ( timer = 40 )
	    sound_play(spin_sound4);
	if ( timer = 5 )
	  {
	    create_hitbox(4,direction,4.25,0,7,7,slash2,obj_spark_slash2,1,1.2,15,20,self.id,5,3);
	    hitbox.hit_stun = 4;
	    create_hitbox2(4,direction,4.25,0,7,7,slash2,obj_spark_slash2,0.6,0.9,10,14,self.id,5,3);
	    hitbox2.hit_stun = 4;
		hitbox.di = 0.3;
		hitbox2.di = 0.3;
	    vspeed -= 0.2;
	  }
	if ( timer = 10 )
	  {
	    create_hitbox(1,direction,4.75,0,6,4,slash1,obj_spark_slash2,1.1,1.2,-16,13,self.id,5,3);
	    hitbox.hit_stun = 4;
	    hitbox.weight_kb = 1;
	    hitbox.di = -1
	    create_hitbox2(1,direction,4.75,0,6,4,slash1,obj_spark_slash2,0.75,0.9,-11,16,self.id,5,3);
	    hitbox2.hit_stun = 4;
	    hitbox2.weight_kb = 1;
	    hitbox2.di = -1
	    vspeed -= 0.2;
	  }
	if ( timer = 15 )
	  {
	    create_hitbox(1,direction,4.25,0,6,4,slash1,obj_spark_slash2,1,1.2,15,20,self.id,5,3);
	    hitbox.hit_stun = 4;
	    hitbox.weight_kb = 1;
	    hitbox.di = -1
	    create_hitbox2(1,direction,4.25,0,6,4,slash1,obj_spark_slash2,0.6,0.9,10,14,self.id,5,3);
	    hitbox2.hit_stun = 4;
	    hitbox2.weight_kb = 1;
	    hitbox2.di = -1
	    vspeed -= 0.2;
	  }
	if ( timer = 20 )
	  {
	    create_hitbox(1,direction,4.75,0,6,4,slash1,obj_spark_slash2,1.1,1.2,-16,13,self.id,5,3);
	    hitbox.hit_stun = 4;
	    hitbox.weight_kb = 1;
	    hitbox.di = -1
	    create_hitbox2(1,direction,4.75,0,6,4,slash1,obj_spark_slash2,0.75,0.9,-11,16,self.id,5,3);
	    hitbox2.hit_stun = 4;
	    hitbox2.weight_kb = 1;
	    hitbox2.di = -1
	    vspeed -= 0.2;
	  }
	if ( timer = 26 )
	  {
	    create_hitbox(1,direction,4.25,0,6,4,slash1,obj_spark_slash2,1,1.2,15,20,self.id,5,3);
	    hitbox.hit_stun = 4;
	    hitbox.weight_kb = 1;
	    hitbox.di = -1
	    create_hitbox2(1,direction,4.25,0,6,4,slash1,obj_spark_slash2,0.6,0.9,10,14,self.id,5,3);
	    hitbox2.hit_stun = 4;
	    hitbox2.weight_kb = 1;
	    hitbox2.di = -1
	    vspeed -= 0.2;
	  }
	if ( timer = 30 )
	  {
	    create_hitbox(1,direction,4.75,0,6,4,slash1,obj_spark_slash2,1.1,1.2,-16,13,self.id,5,3);
	    hitbox.hit_stun = 4;
	    hitbox.weight_kb = 1;
	    hitbox.di = -1
	    create_hitbox2(1,direction,4.75,0,6,4,slash1,obj_spark_slash2,0.75,0.9,-11,16,self.id,5,3);
	    hitbox2.hit_stun = 4;
	    hitbox2.weight_kb = 1;
	    hitbox2.di = -1
	    vspeed -= 0.2;
	  }
	if ( timer = 35 )
	  {
	    create_hitbox(3,75+facing*30,4.25,0,6,4,slash2,obj_spark_slash2,1,1.2,15,20,self.id,5,3);
	    hitbox.hit_stun = 4;
	    hitbox.weight_kb = 1;
	    hitbox.di = -1
	    create_hitbox2(3,70+facing*40,4.25,0,6,4,slash2,obj_spark_slash2,0.6,0.9,10,14,self.id,5,3);
	    hitbox2.hit_stun = 4;
	    hitbox2.weight_kb = 1;
	    hitbox2.di = -1
	    vspeed -= 0.2;
	  }
	if ( timer = 40 )
	  {
	    create_hitbox(1,direction,4.75,0,6,4,slash1,obj_spark_slash2,1.1,1.2,-16,13,self.id,5,3);
	    hitbox.hit_stun = 4;
	    hitbox.weight_kb = 1;
	    hitbox.di = -1
	    create_hitbox2(1,direction,4.75,0,6,4,slash1,obj_spark_slash2,0.75,0.9,-11,16,self.id,5,3);
	    hitbox2.hit_stun = 4;
	    hitbox2.weight_kb = 1;
	    hitbox2.di = -1
	    vspeed -= 0.2;
	  }
	if ( timer = 46 )
	  {
	    sound_play(spin_sound5);
	    create_hitbox(6,35+facing*110,5.50,6.95,9,11,slash3,obj_spark_slash2,1.5,1.2,2,18,self.id,5,3);
	    hitbox.hit_stun = 3;
	    hitbox.shake_type = 1;
	    hitbox.shake_ampl = 0.4;
	  }
      }
  }
     if (timer >= 46){
if (attack_success || target.object_index == obj_enemy) && (dontrepeat = 0) && obj_score_control.stocks[target.number-1] == 1{
				if ((target.weight <= .22 && target.percent > 115) || (target.weight > .22 && target.weight < .3 && target.percent > 135) || (target.weight > .3 && target.percent > 150)){
				killspark = instance_create(enemy.x-200,enemy.y-250,obj_spark);
				killspark.sprite_index = killspark_sprite;
				killspark.image_xscale = size * 0.75;
				killspark.image_yscale = size * 0.95;
				killspark.image_yscale = size * 0.95;
				killspark.image_index = 0;
				killspark.image_speed = 0.045;
				killspark.alarm[0] = 80;
				killspark.depth = depth + 2 ;
				sound_play(killscreen_voice);
				screen_shake(30,30);
				freezer  = instance_create(enemy.x,enemy.y,obj_freeze)
				effect_create_above(ef_ellipse,enemy.x,enemy.y+10,1,c_black)
				freezer.alarm[0] = 80
				spark = instance_create ( 0 , 0 , obj_camerazoom );
				spark.camera_l = enemy.x - 30;
				spark.camera_r = enemy.x + 30;
				spark.camera_u = enemy.y - 50;
				spark.camera_d = enemy.y;
				spark.camera_boundary_zoom = 120;
				spark.alarm[0] = 50;
				spark2 = instance_create(enemy.x+8*(1-facing*2),enemy.y-26,obj_spark_hit3)
				spark2.alarm[0] = 50
				dontrepeat = 1;
				}
				}
        
  }

     if (timer < 15){
if (attack_success || target.object_index == obj_enemy) && ( dontrepeat = 0 && air == 0) && obj_score_control.stocks[target.number-1] == 1{
				if ((target.weight <= .22 && target.percent > 90) || (target.weight > .22 && target.weight < .3 && target.percent > 100) || (target.weight > .3 && target.percent > 110)){
				killspark = instance_create(enemy.x-200,enemy.y-250,obj_spark);
				killspark.sprite_index = killspark_sprite;
				killspark.image_xscale = size * 0.75;
				killspark.image_yscale = size * 0.95;
				killspark.image_yscale = size * 0.95;
				killspark.image_index = 0;
				killspark.image_speed = 0.045;
				killspark.alarm[0] = 80;
				killspark.depth = depth + 2 ;
				sound_play(killscreen_voice);
				screen_shake(30,30);
				freezer  = instance_create(enemy.x,enemy.y,obj_freeze)
				effect_create_above(ef_ellipse,enemy.x,enemy.y+10,1,c_black)
				freezer.alarm[0] = 80
				spark = instance_create ( 0 , 0 , obj_camerazoom );
				spark.camera_l = enemy.x - 30;
				spark.camera_r = enemy.x + 30;
				spark.camera_u = enemy.y - 50;
				spark.camera_d = enemy.y;
				spark.camera_boundary_zoom = 120;
				spark.alarm[0] = 50;
				spark2 = instance_create(enemy.x+8*(1-facing*2),enemy.y-26,obj_spark_hit3)
				spark2.alarm[0] = 50
				dontrepeat = 1;
				}
				}
        
  }	   	   

}



if hiddenskills = 1 {
if ( state_type = "stand" || state_type = "run" || state_type = "jump" )
  {
	create_hurtbox_precise(self.id, 80, upb_start_mask)
    if ( moveright )
	facing = 0;
    if ( moveleft )
	facing = 1;
    if ( air = 0 )
      {
	state_type = "attack";
	attack_type = "upb";
	timer = 0;
	time = 75;
	sprite_index = upb_start_sprite;
	image_speed = 0;
	image_index = 0;
	hspeed = 0;
	temp = 0;
      }
    else
      {
	state_type = "air_attack";
	attack_type = "upb";
	vspeed = 0
		timer = 0;
		time = 75;
		sprite_index = upb_start_sprite;
	image_speed = 0;
	image_index = 0;
	hspeed *= 0.66;
	temp = 1;
      }
  }
    switch ( timer )
      {
	case 1: image_index = 1; break;
	case 2: image_index = 2; break;
	case 3: image_index = 3; break;
	case 4: image_index = 0; break; //spin start
	case 5: image_index = 1; break;
	case 6: image_index = 2; break;
	case 7: image_index = 3; break;
	case 8: image_index = 4; break;
	case 9: image_index = 5; break;
	case 10: image_index = 6; break;
	case 11: image_index = 7; break;
	case 12: image_index = 8; break;
	case 13: image_index = 9; break;
	case 14: image_index = 10; break;
	case 15: image_index = 11; break;
	case 16: image_index = 12; break;
	case 17: image_index = 13; break;
	case 18: image_index = 14; break;
        case 19: image_index = 15; break;
	case 20: image_index = 16; break;
	case 21: image_index = 17; break;
	case 22: image_index = 18; break;
	case 23: image_index = 19; break;
	case 24: image_index = 20; break;
        case 25: image_index = 21; break;
	case 26: image_index = 22; break;
	case 27: image_index = 23; break;
	case 28: image_index = 24; break;
	case 29: image_index = 25; break;
	case 30: image_index = 26; break;
        case 31: image_index = 27; break;
	case 32: image_index = 28; break;
	case 33: image_index = 29; break;
	case 34: image_index = 30; break;
	case 36: image_index = 31; break;
	case 37: image_index = 32; break;
	case 38: image_index = 33; break;
	case 39: image_index = 2; break;
	case 40: image_index = 3; break;
	case 41: image_index = 4; break;
	case 42: image_index = 5; break;
	case 43: image_index = 6; break;
	case 44: image_index = 7; break;
	case 45: image_index = 8; break;
	case 46: image_index = 9; break;
	case 47: image_index = 12; break;
	case 48: image_index = 14; break;
	case 49: image_index = 17; break;
	case 50: image_index = 34; with(upbblur){instance_destroy();} break; //spin end
	case 51: image_index = 35; break;
	case 52: image_index = 36; break;
	case 53: image_index = 37; break;
	case 54: image_index = 38; break;
	case 55: image_index = 39; break;
	case 56: image_index = 40; break;
	case 57: image_index = 41; break;
	case 58: image_index = 42; break;
	case 61: image_index = 43; break;
	case 62: image_index = 44; break;
	case 66: image_index = 45; break;
      }
	if temp = 1 {
	if timer > 25
	force_edge_grab = 1
	fast_fall = 0;
	fast_fall_temp = 0;
	}
	if timer < 7 && temp = 1
	vspeed = 0
	if ( timer = 7 )
	  {
	    if temp = 1
		vspeed -= 5.4*size
	    sound_play(ssmash_voice);
	    sprite_index = upb_sprite;
	    upbblur = create_blur(x,y-22.5*size,self.id);
      upbblur.loop=8;
      upbblur.sprite_index=upb_eff2_sprite;
      //upbblur.glow=3;
      upbblur.image_alpha=0.8;
      upbblur.image_speed=0.3;
      upbblur.snap=self.id;
      upbblur.image_xscale=-0.26*(1-facing*2)*size;
      upbblur.image_yscale=0.13*size;
      upbblur.image_angle=angle_correct(5);
      upbblur.depth=depth-1;
	  upbblur.image_blend = sword_color;
		with(hurtbox)
			instance_destroy()
		create_hurtbox_precise(self.id, 65, upb_mask)
	    create_hitbox(15,362,6,7.35,15,12,slash3,obj_spark_slash3,2.35,0.7,1,20,self.id,38,4);
	  }
	if ( timer = 15 )
	  {
	    hitbox.damage = 12*size;
	    hitbox.bkb = 5.5 *size
	    hitbox.kbg = 6.5*size;
	    hitbox.hitlag_frames = 7*size;
	    hitbox.sfx = slash2;
	    hitbox.gfx = obj_spark_slash1;
	  }
	if ( timer = 28 )
	  {
	    hitbox.damage = 9*size;
	    hitbox.bkb = 5*size
	    hitbox.kbg = 6*size;
	    hitbox.hitlag_frames = 6*size;
	  }
	if ( timer = 7 || timer = 12 || timer = 20 )
	    sound_play(spin_sound1);
	if ( timer = 27 || timer = 35 )
	    sound_play(spin_sound2);
	if ( timer = 43 )
	    sound_play(spin_sound3);
	if ( timer = 50 )
	  {
	    sound_play(spin_sound4);
	    //sprite_index = jab_sprite2;
	  }
}

if (timer < 15){
if (attack_success || target.object_index == obj_enemy) && ( dontrepeat = 0 && air == 0) && obj_score_control.stocks[target.number-1] == 1{
				if ((target.weight <= .22 && target.percent > 90) || (target.weight > .22 && target.weight < .3 && target.percent > 100) || (target.weight > .3 && target.percent > 110)){
				killspark = instance_create(enemy.x-200,enemy.y-250,obj_spark);
				killspark.sprite_index = killspark_sprite;
				killspark.image_xscale = size * 0.75;
				killspark.image_yscale = size * 0.95;
				killspark.image_yscale = size * 0.95;
				killspark.image_index = 0;
				killspark.image_speed = 0.045;
				killspark.alarm[0] = 80;
				killspark.depth = depth + 2 ;
				sound_play(killscreen_voice);
				screen_shake(30,30);
				freezer  = instance_create(enemy.x,enemy.y,obj_freeze)
				effect_create_above(ef_ellipse,enemy.x,enemy.y+10,1,c_black)
				freezer.alarm[0] = 80
				spark = instance_create ( 0 , 0 , obj_camerazoom );
				spark.camera_l = enemy.x - 30;
				spark.camera_r = enemy.x + 30;
				spark.camera_u = enemy.y - 50;
				spark.camera_d = enemy.y;
				spark.camera_boundary_zoom = 120;
				spark.alarm[0] = 50;
				spark2 = instance_create(enemy.x+8*(1-facing*2),enemy.y-26,obj_spark_hit3)
				spark2.alarm[0] = 50
				dontrepeat = 1;
				}
				}
        
  }	   	   



if ( timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" )
  {
    dontrepeat = 0;
	intangible = 0
    if ( air = 0 )
	state_type = "stand";
    else
	state_type = "fall";
    attack_type = "none";
    timer = 0;
    time = -1;
  }