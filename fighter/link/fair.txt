if (state_type == "jump") {
  state_type = "air_attack";
  attack_type = "fair";
  timer = 0;
  time = 42;
  sprite_index = fair_sprite;
  image_speed = 0;
  image_index = 1;
  vspeed -= 0.1;
  create_hurtbox_precise(self.id, 45, fair_mask)

}

//Congratulations! You found the secret Easter Egg. Your prize is wondering who put this here.

if (timer < time) {
  switch ( timer ) {
    case 2: image_index = 2; break;
    case 4: image_index = 3; break;
    case 6: image_index = 4; break;
    case 8: image_index = 5; break;
    case 10: image_index = 6; break;
    case 12: image_index = 7; break;
    case 14: image_index = 8; break;
    case 16: image_index = 9; break;
    case 18: image_index = 10; break;
    case 20: image_index = 11; break;
    case 22: image_index = 12; break;
    case 25: image_index = 13; break;
    case 28: image_index = 14; break;
    case 32: image_index = 15; break;
    case 35: image_index = 16; break;
    case 37: image_index = 17; break;
    case 40: image_index = 18; break;
  }

  switch (timer){
    // First trail
    case 4:
      sword_trail = create_sword_trail2(self.id,3,9,0,0,30,sword_texture);
      sword_trail.visible_frames = 3;
      sword_trail.per_frame_radius = true;
      sword_trail.tip_radius[6] = 0;
      sword_trail.base_radius[6] = 0;
      sword_trail.tip_radius[5] = 9;
      sword_trail.base_radius[5] = 0;
      sword_trail.tip_radius[4] = 42;
      sword_trail.base_radius[4] = 24;
      sword_trail.tip_radius[3] = 17;
      sword_trail.base_radius[3] = 5;
      sword_trail.tip_radius[2] = 17;
      sword_trail.base_radius[2] = 2;
      sword_trail.tip_radius[1] = 5;
      sword_trail.base_radius[1] = 3;
      sword_trail.tip_radius[0] = 0;
      sword_trail.base_radius[0] = 0;
      with(sword_trail) interpolate_sword_trail();
      sword_trail.index = 0;
      sword_trail.depth = depth + 0.1;
      sword_trail.color_blend = sword_color;
      break;
    case 6: sword_trail.index = 1; break;
    case 8: sword_trail.index = 2; break;
    case 10: sword_trail.index = 3; break;
    case 12: sword_trail.index = 4; sword_trail.depth = depth - 0.1; break;
    case 14: sword_trail.index = 5; break;
    case 15: sword_trail.visible_frames = 2; break;
    case 16: sword_trail.visible_frames = 1; sword_trail.index = 6; break;
    case 17: sword_trail.visible_frames = 0.5; break;
    case 18: with(sword_trail) instance_destroy(); break;
    // Second trail
    case 22:
      sword_trail = create_sword_trail2(self.id,11,14,0,0,30,sword_texture);
      sword_trail = create_sword_trail2(self.id,11,14,0,0,30,sword_texture);
      sword_trail.visible_frames = 1;
      sword_trail.per_frame_radius = true;
      sword_trail.tip_radius[3] = -9;
      sword_trail.base_radius[3] = -1;
      sword_trail.tip_radius[2] = -19;
      sword_trail.base_radius[2] = -8;
      sword_trail.tip_radius[1] = -23;
      sword_trail.base_radius[1] = 2;
      sword_trail.tip_radius[0] = 0;
      sword_trail.base_radius[0] = 0;
      with(sword_trail) interpolate_sword_trail();
      sword_trail.index = 1;
      sword_trail.depth = depth + 0.1;
      sword_trail.color_blend = sword_color;
      break;
    case 25: sword_trail.index = 2; sword_trail.depth = depth - 0.1; break;
    case 28: sword_trail.index = 3; sword_trail.visible_frames = 2; break;
    case 29: case 30: case 31: sword_trail.visible_frames -= (1/4)*2; break;
    case 32: with (sword_trail) instance_destroy(); break;
  }


  if (timer == 10) {
    sound_play(swing_sound3);
    create_hitbox(9, 55 + facing * 70, 2, 2.4, 1.4, 7, slash2, obj_spark_slash2, 1.3, 1.1, 24, 23, self.id, 5, 2);
    hitbox.hit_stun = 0.5;
    hitbox.hitshake_type = 1;
  }
  if (timer == 23) {
    sound_play(swing_sound2);
    create_hitbox(9, 30 + facing * 120, 4.2, 6.95, 15, 5, slash2, obj_spark_slash1, 1.3, 1.1, 27, 26, self.id, 4, 3);
    hitbox.hit_stun = 4;
  }

  if (air == 0) {
    state_type = "land";
    attack_type = "none";
    timer = 0;
    time = 9;
    image_speed = 0.7;
    sprite_index = fairland_sprite;
  }
}

   if (timer >= 23){
if (attack_success || target.object_index == obj_enemy) && (obj_score_control.stocks[target.number-1] == 1 && dontrepeat = 0){
				if ((target.weight <= .22 && target.percent > 115) || (target.weight > .22 && target.weight < .3 && target.percent > 135) || (target.weight > .3 && target.percent > 150)){
				killspark = instance_create(enemy.x-200,enemy.y-250,obj_spark);
				killspark.sprite_index = killspark_sprite;
				killspark.image_xscale = size * 0.75;
				killspark.image_yscale = size * 0.95;
				killspark.image_yscale = size * 0.95;
				killspark.image_index = 0;
				killspark.image_speed = 0.045;
				killspark.alarm[0] = 80;
				killspark.depth = depth + 2 ;
				sound_play(killscreen_voice);
				screen_shake(30,30);
				freezer  = instance_create(enemy.x,enemy.y,obj_freeze)
				effect_create_above(ef_ellipse,enemy.x,enemy.y+10,1,c_black)
				freezer.alarm[0] = 80
				spark = instance_create ( 0 , 0 , obj_camerazoom );
				spark.camera_l = enemy.x - 30;
				spark.camera_r = enemy.x + 30;
				spark.camera_u = enemy.y - 50;
				spark.camera_d = enemy.y;
				spark.camera_boundary_zoom = 120;
				spark.alarm[0] = 50;
				spark2 = instance_create(enemy.x+8*(1-facing*2),enemy.y-26,obj_spark_hit3)
				spark2.alarm[0] = 50
				dontrepeat = 1;
				}
				}
        
  }	   




if (timer >= time - 1 && state_type != "flinch" && state_type != "air_flinch") {
  dontrepeat = 0;
  state_type = "jump";
  attack_type = "none";
  timer = 0;
  time = -1;
}