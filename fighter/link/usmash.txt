if (state_type = "stand" || state_type = "run") {
    state_type = "attack";
    attack_type = "usmash";
    timer = 0;
    time = 70;
    sprite_index = usmash_sprite;
    image_speed = 0;
    image_index = 0;
    charge_frame = 4;
    hspeed = 0;
	create_hurtbox_precise(self.id, 70, usmash_mask)

}

if (timer < time) {
    switch (timer) {
		case 3:  image_index = 1;  break;
        case 7:  image_index = 2;  break;
        case 10: image_index = 3;  break;
        case 12: image_index = 4;  break;
        case 16: image_index = 5;  break;
        case 21: image_index = 6;  break;
        case 22: image_index = 7;  break;
        case 25: image_index = 8;  break;
        case 27: image_index = 9;  break;
        case 30: image_index = 10; break;
        case 33: image_index = 11; break;
        case 36: image_index = 12; break;
        case 38: image_index = 13; break;
        case 41: image_index = 14; break;
        case 46: image_index = 15; break;
        case 49: image_index = 16; break;
        case 53: image_index = 17; break;
        case 59: image_index = 18; break;
        case 64: image_index = 19; break;    
    }
	
	switch (timer) {
		//{ First Trail
		case 7:
			sword_trail = create_sword_trail2(self.id,2,5,10,5,30,sword_texture);
			sword_trail.per_frame_radius = true;
			sword_trail.tip_radius[3] = -25;
			sword_trail.base_radius[3] = -10;
			sword_trail.tip_radius[2] = -42;
			sword_trail.base_radius[2] = -17;
			sword_trail.tip_radius[1] = -15;
			sword_trail.base_radius[1] = -1;
			sword_trail.tip_radius[0] = 10;
			sword_trail.base_radius[0] = 5;
			sword_trail.index = 0;
			sword_trail.visible_frames = 3;
            sword_trail.color_blend = sword_color;
			with(sword_trail) interpolate_sword_trail();
			break;
		case 10: sword_trail.index = 1; break;
		case 12: sword_trail.index = 2; break;
		case 16: sword_trail.index = 3; break;
		case 17: case 18: case 19: case 20: sword_trail.visible_frames -= (1/5)*3; break;
		case 21: with (sword_trail) instance_destroy(); break;
		//}
		//{ second trail
		case 22:
			sword_trail = create_sword_trail2(self.id,7,10,10,5,30,sword_texture);
			sword_trail.visible_frames = 3;
			sword_trail.per_frame_radius = true;
			sword_trail.tip_radius[3] = -6;
			sword_trail.base_radius[3] = -4;
			sword_trail.tip_radius[2] = -27;
			sword_trail.base_radius[2] = -13;
			sword_trail.tip_radius[1] = -31;
			sword_trail.base_radius[1] = -10;
			sword_trail.tip_radius[0] = 10;
			sword_trail.base_radius[0] = 5;
            sword_trail.color_blend = sword_color;
			with(sword_trail) interpolate_sword_trail();
            sword_trail.color_blend = sword_color;
			break;
		case 25: sword_trail.index = 1; break;
		case 27: sword_trail.index = 2; break;
		case 30: sword_trail.index = 3; break;
		case 31: case 32: case 33: case 34: sword_trail.visible_frames -= (1/5)*3; break;
		case 35: with (sword_trail) instance_destroy(); break;
		//}
		//{ Third Trail
		case 36:
			sword_trail = create_sword_trail2(self.id,12,16,10,5,30,sword_texture);
			sword_trail.visible_frames = 3;
			sword_trail.per_frame_radius = true;
			sword_trail.tip_radius[4] = -1;
			sword_trail.base_radius[4] = 0;
			sword_trail.tip_radius[3] = -30;
			sword_trail.base_radius[3] = -14;
			sword_trail.tip_radius[2] = -32;
			sword_trail.base_radius[2] = -13;
			
			sword_trail.tip_radius[1] = -23;
			sword_trail.base_radius[1] = -10;
			sword_trail.tip_radius[0] = 10;
			sword_trail.base_radius[0] = 5;
            sword_trail.color_blend = sword_color;
			with(sword_trail) interpolate_sword_trail();
            sword_trail.color_blend = sword_color;
            break;
		case 38: sword_trail.index = 1; break;
		case 41: sword_trail.index = 2; break;
		case 46: sword_trail.index = 3; break;
		case 45: case 48: sword_trail.visible_frames -= (1/2)*2; break;
		case 49: sword_trail.index = 4; break;
		case 50: with (sword_trail) instance_destroy(); break;
		//}
	}
	
	
	//{ First hit
    if (timer = 8) {
        sound_play(usmash_voice);
        sound_play(swing_sound2);
        create_hitbox(2, angle_correct(115), 4.5, 0, 6, 5, slash2, obj_spark_slash1, 1, 1.3, 23, 18, self.id, 10, 3);
        hitbox.hit_stun = 7;
        hitbox.di = 0.5;
        hitbox.charge_dmg = 0.3;
        hitbox.charge_kb = 0;
        hitbox.charge_hitlag = 0.5;
        instance_create(x + size * (5 - facing * 10), y - 23 * size, obj_spark_effect);
    }
    if (timer = 10) {
        hitbox.dir = angle_correct(110);
        hitbox.bkb = 4
        hitbox.hitbox_x = (25 - facing * 36) * size;
        hitbox.hitbox_y = 40 * size;
    }
    if (timer = 13) {
        hitbox.dir = 90
        hitbox.bkb = 3.5
        hitbox.hitbox_x = -20 * (1-facing*2)*size;
        hitbox.hitbox_y = 45 * size;
    }
    if (timer == 16) {
        hitbox.dir = 65 + facing * 50
        hitbox.bkb = 4.5
        hitbox.damage = 3 * size;
        hitbox.shield_damage = 3 * size;
        hitbox.hitlag_frames = 2 * size;
        hitbox.hitbox_x = size * (-27 + facing * 54);
        hitbox.hitbox_y = 20 * size;
    }
	//}
	
	//{ Second Hit
    if (timer = 22) {
        sound_play(swing_sound2);
        create_hitbox(2, 90, 3.5, 0, 6, 5, slash2, obj_spark_slash1, 1, 1.3, 23, 18, self.id, 10, 3);
        hitbox.hit_stun = 8;
        hitbox.di = 0.6;
        hitbox.charge_dmg = 0.3;
        hitbox.charge_kb = 0;
        hitbox.charge_hitlag = 0.5;
    }
    if (timer = 25) {
        hitbox.hitbox_x = 10 * size * (1-facing*2);
        hitbox.hitbox_y = 41 * size;
    }
    if (timer = 27) {
        hitbox.hitbox_x =  -16 * size * (1-facing*2);
        hitbox.hitbox_y = 36 * size;
    }
    if (timer = 30) {
        hitbox.damage = 3 * size;
        hitbox.bkb = 5 * size;
        hitbox.shield_damage = 3 * size;
        hitbox.hitlag_frames = 2 * size;
        hitbox.hitbox_x = -27 * size * (1-facing*2);
        hitbox.hitbox_y = 20 * size;
    }
	//}

    if (timer = 38) {
        sound_play(swing_sound4);
        create_hitbox(6, 90, 5.85, 6.95, 11, 6, slash3, obj_spark_slash2, 1, 1.3, 25, 37, self.id, 11, 3);
        hitbox.charge_dmg = 0.3;
        hitbox.charge_kb = 1.1;
    }
    if (timer = 41) {
        hitbox.hitbox_x = -25 * size * (1-facing*2);
        hitbox.hitbox_y = 55 * size;
    }
    if (timer = 44) {
        hitbox.damage = 6 * size;
        hitbox.shield_damage = 3 * size;
        hitbox.hitlag_frames = 5 * size;
        hitbox.hitbox_x = -35 * size * (1-facing*2);
        hitbox.hitbox_y = 15 * size;
    }
}

if (timer >= 38){
if (attack_success || target.object_index == obj_enemy) && (dontrepeat = 0) && obj_score_control.stocks[target.number-1] == 1{
				if ((target.weight <= .22 && target.percent > 105) || (target.weight > .22 && target.weight < .3 && target.percent > 115) || (target.weight > .3 && target.percent > 135)){
				killspark = instance_create(enemy.x-200,enemy.y-250,obj_spark);
				killspark.sprite_index = killspark_sprite;
				killspark.image_xscale = size * 0.75;
				killspark.image_yscale = size * 0.95;
				killspark.image_yscale = size * 0.95;
				killspark.image_index = 0;
				killspark.image_speed = 0.045;
				killspark.alarm[0] = 80;
				killspark.depth = depth + 2 ;
				sound_play(killscreen_voice);
				screen_shake(30,30);
				freezer  = instance_create(enemy.x,enemy.y,obj_freeze)
				effect_create_above(ef_ellipse,enemy.x,enemy.y+10,1,c_black)
				freezer.alarm[0] = 80
				spark = instance_create ( 0 , 0 , obj_camerazoom );
				spark.camera_l = enemy.x - 30;
				spark.camera_r = enemy.x + 30;
				spark.camera_u = enemy.y - 50;
				spark.camera_d = enemy.y;
				spark.camera_boundary_zoom = 120;
				spark.alarm[0] = 50;
				spark2 = instance_create(enemy.x+8*(1-facing*2),enemy.y-26,obj_spark_hit3)
				spark2.alarm[0] = 50
				dontrepeat = 1;
				}
				}
        
  }


if (timer >= time - 1 && state_type != "flinch" && state_type != "air_flinch") {
    dontrepeat = 0;
    state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
}