if hiddenskills = 0 {
if ( state_type = "stand" || state_type = "run" || state_type = "jump" )
  {
    state_type = "air_attack";
    attack_type = "sideb";
    timer = 0;
	time = 33;
	sprite_index = sideb_boom_sprite;
	hspeed *= 0.4;
    image_speed = 0;
    image_index = 0;
	if air=0
	{
		hurtboxtemp=1
		create_hurtbox_precise(self.id, 38, sideb_boom_mask)
	}
	else
	{
		hurtboxtemp=2
		create_hurtbox_precise(self.id, 38, sideb_boom_air_mask)
	}
  }

if ( timer < time )
  {
    switch ( timer )
      {
	case 2: image_index = 1; break;
	case 4: image_index = 2; break;
	case 5: image_index = 3; break;
	case 6: image_index = 4; break;
	case 7: image_index = 5; break;
	case 8: image_index = 6; break;
	case 10: image_index = 7; break;
	case 12: image_index = 8; break;
	case 14: image_index = 9; break;
	case 16: image_index = 10; break;
	case 19: image_index = 11; break;
	//case 20: image_index = 7; break;
	//case 23: image_index = 8; break;
	//case 26: image_index = 9; break;
	case 29: image_index = 12; break;
	case 32: image_index = 13; break;
	case 35: image_index = 14; break;
	case 38: image_index = 15; break;
	case 40: image_index = 16; break;
      }

       if timer >= 0 {
	     if air > 0 {
					if hurtboxtemp=1 && instance_exists(hurtbox)
					{
						with(hurtbox)
							instance_destroy()
						create_hurtbox_precise(self.id, 33, sideb_boom_air_mask)
						hurtboxtemp=0
					}
                sprite_index = sideb_boom_air_sprite;
                }
              else {
					if hurtboxtemp=2 && instance_exists(hurtbox)
					{
						with(hurtbox)
							instance_destroy()
						create_hurtbox_precise(self.id, 33, sideb_boom_mask)
						hurtboxtemp=0
					}
                sprite_index = sideb_boom_sprite;
              }
	}

	if ( timer = 16 && !instance_exists(boomerang) )
	  {
	    sound_play(boomerang_sound);
	    create_projectile(7,70+facing*40,5.5,2.2,12,3,kick2,obj_spark_hit2,0.9,0.9,20,17,self.id,200,char_custom2);
	    boomerang = proj;
	    proj.hit_stun = 6;
	    proj.shield_stun = 1;
	  }
	if ( air = 0 )
	    hspeed = 0;
      }
}
if hiddenskills = 1 {
if ( state_type = "stand" || state_type = "run" || state_type = "jump" )
  {
    state_type = "air_attack";
    attack_type = "sideb";
    timer = 0;
    if air = 0 {
		time = 65;
		sprite_index = roll2_sprite; //shield
		temp = 0;
    		image_index = 0;
	}
    else {
		time = 110
		temp = 1
		create_hurtbox_precise(self.id, 110, jumpslice_mask)

		sprite_index = jumpslice_sprite
		fast_fall = 0;
		fast_fall_temp = 0;
		vspeed = 0;
		hspeed = 0
		air_move = 0;
    		image_index = 1;
	}
    image_speed = 0;
    image_index = 0;
  }
    if temp = 0 {
    switch ( timer )
      {
	case 0: image_index = 0; break;
	case 2: image_index = 1; break;
	case 4: image_index = 2; break;
	case 8: image_index = 3; break;
	case 10: image_index = 4; break;
	case 12: image_index = 5; break;
	case 14: image_index = 6; break;
	case 16: image_index = 7; break;
	case 18: image_index = 8; break;
	case 20: image_index = 9; break;
	case 22: image_index = 10; break;
	case 25: image_index = 11; break;
	case 29: image_index = 12; break;
	case 30: image_index = 0; break;
	case 33: image_index = 1; break;
	case 34: image_index = 2; break;
	case 35: image_index = 3; break;
	case 36: image_index = 4; break;
	case 37: image_index = 5; break;
	case 40: image_index = 6; break;
	case 43: image_index = 7; break;
	case 47: image_index = 8; break;
	case 53: image_index = 9; break;
	case 58: image_index = 10; break;
	case 63: image_index = 11; break;
      }
     switch(timer){
  case 33:  sword_trail = create_sword_trail2(self.id,2,10,1,4,30,sword_texture2);
            sword_trail.per_frame_radius = true;
			      sword_trail.color_blend = sword_color;
            sword_trail.index = 0;
            sword_trail.tip_radius[7] = 1;
            sword_trail.base_radius[7] = 0;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.tip_radius[6] = 4;
            sword_trail.base_radius[6] = 13;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.tip_radius[5] = 6;
            sword_trail.base_radius[5] = 5;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.tip_radius[4] = 7;
            sword_trail.base_radius[4] = 0;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.tip_radius[3] = 24;
            sword_trail.base_radius[3] = 0;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.tip_radius[2] = 11;
            sword_trail.base_radius[2] = 5;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.tip_radius[1] = 6;
            sword_trail.base_radius[1] =3;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.tip_radius[0] = 1;
            sword_trail.base_radius[0] = 1;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.visible_frames = 1; break;
	case 34: sword_trail.index += 1; break;
	case 36: sword_trail.index += 1; break;
	case 37: sword_trail.index += 1; sword_trail.visible_frames = 2; break;
	case 40: sword_trail.index += 1; break;
	case 43: sword_trail.index += 1; break;
	case 47: sword_trail.index += 1; break;
	case 53: sword_trail.index += 1; break;
	case 55: sword_trail.visible_frames = 1; break;
	case 58: with (sword_trail) instance_destroy(); break;
      }

	if ( timer = 6 )
	  {
	    sprite_index = roll2_sprite;
	    sound_play(roll_dodge_snd);
	    intangible = 1;
	    hspeed = size * (2.5-facing*5);
	  }
	if ( timer = 15 )
	  {
	    create_hitbox(1,70+facing*40,5,0,1,2,kick1,obj_spark_hit1,0.7,0.7,0,13,self.id,5,1);
	    hitbox.hit_stun = 10;
		hitbox.di = 0;
	  }
	if ( timer >= 7 && timer <= 15 )
	    hspeed = size * (3-facing*6);
	if ( timer >= 16 && timer <= 29 )
	    hspeed = size * (2-facing*4);
	if ( timer = 29 )
	    intangible = 0;
	if ( timer = 30 )
	  {
		create_hurtbox_precise(self.id, 110, backslice_mask)
	    state_type = "air_attack";
	    sprite_index = backslice_sprite;
	    hspeed = size * (1-facing*2);
	    vspeed = -3.5*size;
	  }
	if ( timer = 37 )
	  {
	    sound_play(attack_voice2);
	    sound_play(swing_sound2);
            create_hitbox(15,120-facing*60,6,6.8,18,9,slash3,obj_spark_slash2,1.5,1.3,-32,27,self.id,7,2);
	    //create_hitbox(15,120-facing*60,6,6.8,18,9,slash3,obj_spark_slash2,0.8,1.05,-20,33,self.id,7,2);
	    hitbox.shield_stun = 1.25;
	  }
	if ( timer = 40 )
	  {
	    air = 1;
	    hitbox.damage = 12*size;
	    hitbox.dir = 145-facing*110;
	    hitbox.bkb = 6.95*size;
	    hitbox.kbg = 6.35*size;
	    hitbox.shield_damage = 16;
	    hitbox.hitlag_frames = 7*size;
	    hitbox.sfx = slash2;
	  }
	if ( timer >= 56 && air = 0 )
	  {
	    state_type = "land";
	    attack_type = "none";
	    timer = 0;
	    time = 15;
	    sprite_index = land_sprite;
	  }
}
	if temp = 1 {
    switch ( timer )
      {
	case 3: image_index = 1; break;
	case 5: image_index = 2; break;
	case 7: image_index = 3; break;
	case 9: image_index = 4; break;
	case 12: image_index = 5; break; //slice 1
	case 14: image_index = 6; break;
	case 16: image_index = 7; break;
	case 18: image_index = 8; break;
	case 20: image_index = 9; break;
	case 21: image_index = 10; break;
	case 23: image_index = 11; break;
	case 25: image_index = 12; break;
	case 27: image_index = 13; break;
	case 30: image_index = 14; break; //slice 2
	case 32: image_index = 15; break;
	case 34: image_index = 16; break;
	case 36: image_index = 17; break;
	case 38: image_index = 18; break;
	case 40: image_index = 19; break;
	case 42: image_index = 20; break;
	case 44: image_index = 21; break;
	case 45: image_index = 22; break;
	case 47: image_index = 23; break;
	case 49: image_index = 24; break;
	case 50: image_index = 25; break;
	case 52: image_index = 26; break; //slice 3
	//case 62: image_index = 5; break;
	//case 65: image_index = 6; break;
	case 101: sprite_index = fair_sprite; with(hurtbox) {instance_destroy()} image_index = 0; break;
	case 120: image_index = 7; break; //land
	//case 124: image_index = 6; break;
	case 128: image_index = 8; break;
	case 132: image_index = 9; break;
	case 136: image_index = 10; break;
	case 140: image_index = 11; break;
	case 144: image_index = 12; break;
      }

    switch(timer){
  case 3:  sword_trail = create_sword_trail2(self.id,1,10,1,4,30,sword_texture2);
            sword_trail.per_frame_radius = true;
            sword_trail.index = 0;
            sword_trail.tip_radius[9] = 0;
            sword_trail.base_radius[9] = 0;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.tip_radius[8] = 0;
            sword_trail.base_radius[8] = 0;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.tip_radius[7] = -2;
            sword_trail.base_radius[7] = 0;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.tip_radius[6] = -6;
            sword_trail.base_radius[6] = 13;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.tip_radius[5] = -12;
            sword_trail.base_radius[5] = 5;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.tip_radius[4] = -12;
            sword_trail.base_radius[4] = 0;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.tip_radius[3] = -11;
            sword_trail.base_radius[3] = 0;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.tip_radius[2] = -6;
            sword_trail.base_radius[2] = 5;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.tip_radius[1] = -3;
            sword_trail.base_radius[1] =0;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.tip_radius[0] = 1;
            sword_trail.base_radius[0] = 1;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.visible_frames = 1; break;
	case 5: sword_trail.index += 1; break;
	case 7: sword_trail.index += 1; break;
	case 9: sword_trail.index += 1; sword_trail.visible_frames = 2; break;
	case 12: sword_trail.index += 1; break;
	case 14: sword_trail.index += 1; break;
	case 16: sword_trail.index += 1; break;
	case 18: sword_trail.index += 1; sword_trail.visible_frames = 1; break;
	case 20: with (sword_trail) instance_destroy(); break;
	case 27:  sword_trail = create_sword_trail2(self.id,13,20,1,4,30,sword_texture2);
            sword_trail.per_frame_radius = true;
            sword_trail.index = 0;
            sword_trail.tip_radius[3] = -13;
            sword_trail.base_radius[3] = 0;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.tip_radius[2] = -9;
            sword_trail.base_radius[2] = 0;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.tip_radius[1] = 35;
            sword_trail.base_radius[1] =0;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.tip_radius[0] = 1;
            sword_trail.base_radius[0] = 1;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.visible_frames = 1;
            sword_trail.depth=depth+1; break;
	case 30: sword_trail.index += 1; break;
	case 32: sword_trail.index += 1; sword_trail.depth=depth-1; break;
	case 34: sword_trail.index += 1; sword_trail.visible_frames = 2; break;
	case 35: sword_trail.visible_frames = 1; break;
	case 36: with (sword_trail) instance_destroy(); break;
	case 47:  sword_trail = create_sword_trail2(self.id,23,27,1,4,30,sword_texture2);
            sword_trail.per_frame_radius = true;
            sword_trail.index = 0;
            sword_trail.tip_radius[3] = 19;
            sword_trail.base_radius[3] = 0;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.tip_radius[2] = 6;
            sword_trail.base_radius[2] = 0;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.tip_radius[1] = 2;
            sword_trail.base_radius[1] =0;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.tip_radius[0] = 1;
            sword_trail.base_radius[0] = 1;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.visible_frames = 3; break;
	case 49: sword_trail.index += 1; break;
	case 50: sword_trail.index += 1; break;
	case 52: sword_trail.index += 1; break;
	case 58: sword_trail.visible_frames = 2; break;
	case 64: sword_trail.visible_frames = 1; break;
	case 70: sword_trail.visible_frames = 0.3; break;
	case 76: with (sword_trail) instance_destroy(); break;
      }
	if timer < 3 {
	hspeed = 0
	vspeed = 0
	}
	if timer >= 3 && timer < 12 {
		vspeed = -1*size;
		hspeed = 2*(1-facing*2)*size
	}
	if timer = 12 {
	    sound_play(swing_sound1)
	    sound_play(attack_voice2);
	    create_hitbox(5,40+facing*100,5.85,0,10,9,slash2,obj_spark_slash2,1.8,1.2,22,18,self.id,7,2);
	    hitbox.di = -1
	    hitbox.weight_kb = 1
	}
	if timer >= 12 && timer < 21 {
		vspeed *= 0.95;
		hspeed *= 0.95;
	}
	if timer >= 21 && timer < 30 {
		vspeed = -1*size;
		hspeed = 2*(1-facing*2)*size
	}
	if timer = 30 {
	    sound_play(swing_sound2)
	    sound_play(attack_voice4);
	    create_hitbox(5,40+facing*100,5.85,0,10,9,slash2,obj_spark_slash2,1.5,1.1,18,24,self.id,7,2);
	    hitbox.di = -1
	    hitbox.weight_kb = 1
	}
	if timer >= 30 && timer < 40 {
		vspeed *= 0.95;
		hspeed *= 0.95;
		if hspeed < 2*(1-facing*2)
		hspeed = 2*(1-facing*2)
		if vspeed > -1
		vspeed = -1
	}
	if timer >= 40 && timer < 52 {
		vspeed = -0.5*size;
		hspeed = 3*(1-facing*2)*size
	}
	if timer = 44
	    sound_play(dsmash_voice);
	if timer = 52 {
	    sound_play(swing_sound3);
	    sound_play(spin_sound5);
	    create_hitbox(5,320-facing*100,5,1.7,15,12,slash3,obj_spark_slash3,1,1.5,24,23,self.id,53,3);
	}
	if timer >= 52 && timer < 101 {
		vspeed = 3*size;
		hspeed = 2*(1-facing*2)*size
		force_edge_grab = 1
	}
	if ( timer >= 1 && timer < 59 && air = 0 )
	  { with (sword_trail){instance_destroy();}
	    state_type = "land";
	    attack_type = "none";
	    timer = 0;
	    time = 15;
	    sprite_index = land_sprite;
	  }
	    if air = 0 && timer >= 59 && timer < 101
	      {
	  with (sword_trail){instance_destroy();}
		timer = 119
		time = 150
				with(hurtbox)
					instance_destroy()
                create_hurtbox_precise(self.id, 40, dash_attack_mask)
				sprite_index = dash_attack_sprite;
                image_index = 7;
        	downimpact = instance_create(x+20-facing*40,y,obj_down_impact)
		downimpact.image_blend = c_blue
		sound_play(dair_land_sound);
		create_hitbox(18,60+facing*60,6.5,6.9,24,15,slash3,obj_spark_slash3,1.6,0.6,20,8,self.id,12,3);
		hitbox.hit_stun = 10;
		hitbox.ground_only = 1
		vspeed = 0;
		hspeed = 0;
		screen_shake(6,5);
	      }
	if timer > 118 {
		hspeed = 0
		vspeed = 0
		slide = 0
		}
	}
}

if ( timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" )
  {
    intangible = 0
    if ( air = 0 )
	state_type = "stand";
    else
	state_type = "jump";
    attack_type = "none";
    timer = 0;
    time = -1;
  }