if hiddenskills = 0 {
if ( state_type = "stand" || state_type = "run" || state_type = "jump" )
  {
    special = 1;
    state_type = "air_attack";
    attack_type = "b";
    timer = 0;
    time = 90;
    sprite_index = b_sprite;
    image_speed = 0;
    image_index = 0;
    temp = 0; //used for charge
    temp2 = 0 //full charge visual
	if air=0
		create_hurtbox_precise(self.id, 90, b_mask)
	else
		create_hurtbox_precise(self.id, 90, b_air_mask)
  }

if ( timer < time )
  {
    switch ( timer )
      {
	case 3: image_index = 1; break;
	case 6: image_index = 2; break;
	case 9: image_index = 3; break;
	case 12: image_index = 4; break;
	case 15: image_index = 5; break;
	case 18: image_index = 6; break;
	case 21: image_index = 7; break;
	case 24: image_index = 8; break;
	case 27: image_index = 9; break;
	case 30: image_index = 10; break;
	case 33: sprite_index = b_charge_sprite; image_index = 0; image_speed = 0.4; break;
	case 100: image_index = 1; break;
	case 102: image_index = 2; break;
	case 104: image_index = 3; break;
	case 106: image_index = 4; break;
	case 108: image_index = 5; break;
	case 110: image_index = 6; break;
	case 112: image_index = 7; break;
	case 114: image_index = 8; break;
	case 116: image_index = 9; break;
	case 118: image_index = 10; break;
	case 120: image_index = 11; break;
      }
if timer <= 5 && ((moveleft && !facing) || (moveright && facing)) {
    		facing = 1-facing;
		hspeed *= -1;
 		 }
    if ( ai && ( ai_state = "recover" || distance_to_object(enemy) < 19 + random(7) ) )
	special = 0;
    if ( air = 0 )
	hspeed = 0;
    if timer >= 0 and timer <= 32 {
	     if air > 0 {
                sprite_index = b_air_sprite;
                }
              else {
                sprite_index = b_sprite;
              }
	}
    if timer >= 33 and timer <= 74 {
	     if air > 0 {
				if timer=34 && instance_exists(hurtbox)
				{
					with(hurtbox)
						instance_destroy()
					create_hurtbox_precise(self.id, 6999, b_air_charge_mask)
				}
				
                sprite_index = b_air_charge_sprite;
                }
              else {
				if timer=34 && instance_exists(hurtbox)
				{
					with(hurtbox)
						instance_destroy()
					create_hurtbox_precise(self.id, 6999, b_charge_mask)
				}
                sprite_index = b_charge_sprite;
              }
	}
    if timer = 71 {
	sound_play(bow_charged_sound);
	}
    if ( timer = 74 && special = 1 ) {
	temp2 -= 1
	if temp2 <= 0 {
        spark = instance_create(x+19*(1-facing*2)*size,y-18*size,obj_spark_shockwave)
        spark.image_xscale *= 0.25*size
        spark.image_yscale *= 0.25*size
        spark.image_blend = c_white
	temp2 = 8
	}
	timer = 72
	if air=0
		{
			with(hurtbox)
				instance_destroy()
			create_hurtbox_precise(self.id, 6999, b_charge_mask)
		}
	else
		{
			with(hurtbox)
				instance_destroy()
			create_hurtbox_precise(self.id, 6999, b_air_charge_mask)
		}
	}
    if timer = 10
    sound_play(bow_sound);
    if timer >= 100 {
	     if air > 0 {
            sprite_index = b_air_release_sprite;
                }
         else {
            sprite_index = b_release_sprite;
			
			  }
	}
    if ( !special && timer >= 20 && timer < 100 )
      {
        image_speed = 0;
		if air>0
		{
			sprite_index = b_air_release_sprite;
			image_index=0
			with(hurtbox)
				instance_destroy()
			create_hurtbox_precise(self.id, 6999, b_air_release_mask)
		}
		else
		{
        sprite_index = b_release_sprite;
        image_index = 1;
			with(hurtbox)
				instance_destroy()
			create_hurtbox_precise(self.id, 6999, b_release_mask)
		}			
	temp = timer - 20;
	timer = 100;
	time = 122;
	sound_play(arrow_sound);
	sound_stop(bow_sound);
	sound_stop(bow_charged_sound);
	create_projectile(4+temp/5,35+facing*110,4+temp/20,2+temp/20,4+temp/2,3+temp/10,slash1,obj_spark_slash1,0.8,0.8,16,21,self.id,60,char_custom1);
        proj.use_palette = "number";
        proj.sprite_index = arrow_sprite
        proj.depth = depth - 0.1;
      }
  }
}
if hiddenskills = 1 {
if ( state_type = "stand" || state_type = "run" || state_type = "jump" )
  {
    state_type = "air_attack";
    attack_type = "b";
    timer = 0;
    if air = 0 {
	time = 29;
	create_hurtbox_precise(self.id, 29, sideb_mask)
	sprite_index = sideb_sprite;
	hspeed = 0;
	temp = 0; //
	}
    else {
		create_hurtbox_precise(self.id, 50, helm_mask)

		time = 50;
		sprite_index = helm_sprite;
		temp = 1;
	}
    image_speed = 0;
    image_index = 0;
  }
    if ( temp = 0 ) //Shield Attack
    switch ( timer )
      {
	case 2: image_index = 1; break;
	case 3: image_index = 2; break;
	case 4: image_index = 3; break;
	case 6: image_index = 4; break;
	case 8: image_index = 5; break;
	//case 12: image_index = 3; break;
	case 16: image_index = 6; break;
	case 20: image_index = 7; break;
	case 24: image_index = 0; break;
      }
    if ( temp = 1 ) //Helm Splitter
    switch ( timer )
      {
	case 1: image_index = 0; break;
	case 3: image_index = 1; break;
	case 5: image_index = 2; break;
	case 7: image_index = 3; break;
	case 8: image_index = 4; break;
	case 13: image_index = 5; break;
	case 15: image_index = 6; break;
	case 18: image_index = 7; break;
	case 22: image_index = 4; break;
	//case 27: image_index = 7; break;
	case 33: image_index = 3; break;
	case 37: image_index = 8; break;
	//case 41: image_index = 10; break;
      }
  
  switch ( timer )
      {
	case 5: sword_trail = create_sword_trail2(self.id,2,8,28,4,30,sword_texture2);
          sword_trail.per_frame_radius = true;
          with(sword_trail) interpolate_sword_trail();
          sword_trail.index = 0;
          sword_trail.visible_frames = 1;
            sword_trail.tip_radius[5] = 28;
            sword_trail.base_radius[5] = 11;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.tip_radius[4] = 36;
            sword_trail.base_radius[4] = 20;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.tip_radius[3] = 25;
            sword_trail.base_radius[3] = 12;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.tip_radius[2] = 38;
            sword_trail.base_radius[2] = 11;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.tip_radius[1] = 42;
            sword_trail.base_radius[1] =6;
            with(sword_trail) interpolate_sword_trail();
            sword_trail.tip_radius[0] = 1;
            sword_trail.base_radius[0] = 1;
            with(sword_trail) interpolate_sword_trail(); break;
	case 7: sword_trail.index += 1; break;
	case 8: sword_trail.index += 1; sword_trail.visible_frames = 2; break;
	case 13: sword_trail.index += 1; break;
	case 15: sword_trail.index += 1; break;
	case 18: sword_trail.index += 1; break;
	case 22: sword_trail.index = 2;break;
	case 24: sword_trail.index = 2; sword_trail.visible_frames = 1.5; break;
	case 26: sword_trail.index = 2; sword_trail.visible_frames = 1; break;
	case 28: sword_trail.index = 2; sword_trail.visible_frames = 0.5; break;
	case 31: sword_trail.index = 2; sword_trail.visible_frames = 0.3; break;
	case 33:  with (sword_trail) instance_destroy(); break;
      }
    if ( temp = 0 ) //Shield Attack
      {
	if timer = 6
	    hspeed = 3.5-facing*7
	if ( timer = 8 )
	  {
	    sound_play(attacksnd1);
	    create_hitbox(2,45+facing*90,3.8,0,100,5,kick1,obj_spark_hit1,0.6,0.6,20,20,self.id,7,2);
	    hitbox.hit_stun = 14;
	    hitbox.di = 0.3;
	    hitbox.reflect = 1;
	  }
	if timer = 9
	    hspeed = 0
	if ( ai && timer = 24 )
	  {
	    special = 1;
	  }
	if ( timer >= 22 && special )
	  {
		timer = 0;
		time = 50;
		with (hurtbox)
			instance_destroy()
		create_hurtbox_precise(self.id, 50, helm_mask)
		sprite_index = helm_sprite;
		temp = 1;
	  }
      }
    if ( temp = 1 ) //Helm Splitter
      {
	if ( timer = 1 )
	  {
	    hspeed = size * (3-facing*6);
	    vspeed = -2.75*size;
	  }
	if ( timer >= 3 && timer <= 9 )
	    hspeed = size * (3-facing*6);
	if ( timer = 8 )
	  {
	    air = 1;
	    sound_play(attack_voice3);
	    sound_play(swing_sound3);
	    create_hitbox(12,50+facing*80,5.4,6.95,20,8,slash3,obj_spark_slash3,0.4,0.65,4,27,self.id,16,2);
	    hitbox.hit_stun = 6;
	    hitbox.armor_break = 1;
	    hitbox.shield_kb *= 0.5
	  }
	if ( timer = 10 )
	  {
	    hitbox.damage = 11*size;
	    hitbox.dir = 150-facing*120;
	    hitbox.bkb = 5.4*size;
	    hitbox.kbg = 6.95*size;
	    hitbox.shield_damage = 18*size;
	    hitbox.hitlag_frames = 9*size;
	    hitbox.image_xscale = 0.9*size;
	    hitbox.image_yscale = 1*size;
	    hitbox.hitbox_x = size * (16-facing*32);
	    hitbox.hitbox_y = 10*size;
	  }
	if ( timer = 15 )
	  {
	    hitbox.damage = 9*size;
	    hitbox.dir = 120-facing*60;
	    hitbox.bkb = 5.4*size;
	    hitbox.kbg = 6.95*size
	    hitbox.shield_damage = 16*size;
	    hitbox.hitlag_frames = 8*size;
	    hitbox.image_xscale = 1*size;
	    hitbox.image_yscale = 0.85*size;
	    hitbox.hitbox_x = size * (-17+facing*34);
	    hitbox.hitbox_y = 7*size;
	  }
	if ( timer = 18 )
	  {
	    hitbox.damage = 10*size;
	    hitbox.dir = 110-facing*40;
	    hitbox.bkb = 5.4*size;
	    hitbox.kbg = 6.95*size
	    hitbox.shield_damage = 14*size;
	    hitbox.hitlag_frames = 7*size;
	    hitbox.sfx = slash2;
	    hitbox.image_xscale = 0.7*size;
	    hitbox.image_yscale = 0.9*size;
	    hitbox.hitbox_x = size * (-5+facing*10);
	    hitbox.hitbox_y = 30*size;
	  }
	if ( timer >= 11 && air = 0 )
	  {
	    state_type = "land";
	    attack_type = "none";
	    timer = 0;
	    time = 19;
	    sprite_index = land_sprite;
	  }
      }
}

if ( timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" )
  {
    intangible = 0
    if ( air = 0 )
	state_type = "stand";
    else
	state_type = "jump";
    attack_type = "none";
    timer = 0;
    time = -1;
  }