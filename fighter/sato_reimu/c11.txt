depth = attacker.depth + 2

if hit = 1
reimu.floattime += 20

leTimer += 1

if timer < 20 and speed > 0
speed -= 0.1

if timer = 20
speed = 0

if leTimer >= 20{

}



if is_hit = 0{
	
	gravity = 0.08

if collision_circle(x,y,30,attack_box,false,true){
is_hitbox = 1
is_proj = 0}
else if collision_circle(x,y,30,projectile_box,false,true){
is_hitbox = 0
is_proj = 1}

if collision_circle(x,y,30,attack_box,false,true)
or collision_circle(x,y,30,projectile_box,false,true){
  if is_hitbox
  theObj = collision_circle(x,y,30,attack_box,false,true);
  else if is_proj
  theObj = collision_circle(x,y,30,projectile_box,false,true);
  
  if  theObj.is_yin_yang_ball = 0 and theObj.is_yin_yang_ball_things = 0 and theObj.ignore_yin_yang_ball = 0{
  
  
    if theObj.hit < 1 {
	
	hits += 1
	deSpeed = 0
	flinchtimer = 0
  flinchtime = 15
  
  //sound_play(kick2)
  FMODSoundPlay(theObj.sfx)
  //instance_create(x,y-10,theObj.gfx)
	
        hasbeenhit = 1
        if theObj.dir <= 10
            dir = 0
        else if (theObj.dir >= 170 && theObj.dir <= 180)
            dir = 180
        else if theObj.dir = 361 || theObj.dir = 362
            dir = 0 + (theObj.x<x)*180
        else
            dir = theObj.dir
		
		if theObj.ball_angle != 0{
			dir = theObj.ball_angle
		}
		
		
		vermin = theObj
        
		
		if theObj.ball_push != 0{
			next_speed += theObj.ball_push
		}else{
			next_speed += (vermin.bkb + vermin.kbg) * 0.7
		}
		
		if next_speed > 15
		next_speed = 15
		
        next_direction = dir
        image_speed = 0
        hit_time = theObj.hitlag_frames
        predator = theObj.attacker.id
        hitbox_hitspark ( vermin , ( vermin.x + x ) * 0.5 , ( vermin.y + y - 8 ) * 0.5 );
//object_stun ( vermin , vermin.hitlag_frames );
        speed *= 0.1
		
		leTimer = 30
		is_hit = 1
    }
  
  }
  
  }


}
else if is_hit = 1{
	gravity = 0
	
flinchtimer += 1

deSpeed = 0



if flinchtimer = 1{
speed += next_speed
direction = next_direction
hit = 0
}



if flinchtimer >= flinchtime{
	//hit = 2
//deSpeed = 40
//leSPD = speed
is_hit = 0
}


}

image_angle += 5*speed


if deSpeed > 0{
deSpeed -= 1

speed -= leSPD * 0.012

//if deSpeed = 1
//speed = 0

}



on_floor = 0;
on_platform = 0;
next_to_lwall = 0;
next_to_rwall = 0;

while ( collision_line ( x , y , x + actual_width , y - ac2 , obj_leftwall , 1 , 1 ) || collision_line ( x , y - actual_height , x + actual_width , y - ac2 , obj_leftwall , 1 , 1 ) )
    x -= 1;
while ( collision_line ( x , y , x - actual_width , y - ac2 , obj_rightwall , 1 , 1 ) || collision_line ( x , y - actual_height , x - actual_width , y - ac2 , obj_rightwall , 1 , 1 ) ) 
    x += 1;
while ( collision_rectangle ( x - 2 , y - 2 , x + 2 , y + sprite_height*0.5 , obj_floor , 1 , 1 ) )
    y -= 1;
if ( vspeed >= 0 )
    while ( collision_rectangle ( x - 2 , y - 2 , x + 2 , y + sprite_height*0.5 , obj_platform , 1 , 1 ) )
	y -= 1;
while ( collision_rectangle ( x - 2 , y -sprite_height*0.5 - 4 , x + 2 , y -sprite_height - 2, obj_ceiling , 1 , 1 ) )
    y += 1;


if ( collision_rectangle ( x - 2 , y - 2 , x + 2 , y + 1 + sprite_height*0.5 , obj_floor , 1 , 1 ) )
    on_floor = 1;
if ( vspeed >= 0 && collision_rectangle ( x - 2 , y - 2 , x + 2 , y + 1 + sprite_height*0.5 , obj_platform , 1 , 1 ) )
    on_platform = 1;
if ( collision_rectangle ( x - 2 , y -sprite_height*0.5 - 4 , x + 2 , y -sprite_height*0.5 - 1 , obj_ceiling , 1 , 1 ) )
    on_ceil = 1;
if ( collision_line ( x + 1 , y , x + actual_width + 1 , y - ac2 , obj_leftwall , 1 , 1 ) || collision_line ( x + 1 , y - actual_height , x + actual_width + 1 , y - ac2 , obj_leftwall , 1 , 1 ) ) 
  next_to_rwall = 1;
if ( collision_line ( x - 1 , y , x - actual_width - 1 , y - ac2 , obj_rightwall , 1 , 1 ) || collision_line ( x - 1 , y - actual_height , x - actual_width - 1 , y - ac2 , obj_rightwall , 1 , 1 ) )  
  next_to_lwall = 1;



if ( on_floor || on_platform || on_ceil ) and countdownD <= 0
  {
    direction=-direction
	countdownD = 15
	//vspeed = 0;
  }

if countdownD > 0
countdownD -= 1


if ( speed != 0 && ( next_to_lwall || next_to_rwall ) )  and countdownS <= 0{
	    direction=-direction+180
		countdownS = 15
		//hspeed = -hspeed;
		//image_xscale = -image_xscale
		}

if countdownS > 0
countdownS -= 1

if countdownCI > 0
countdownCI -= 1

if x > view_xview + view_hview*1.8 and speed >= 2 and countdownCI <= 0{
savedir=-direction+180
direction=-direction+180

countdownCI = 15

}

if x < view_xview and speed >= 2 and countdownCI <= 0{
savedir=-direction+180
direction=-direction+180

countdownCI = 15
}

if y < view_yview and speed >= 2 and countdownCI <= 0{
savedir = -direction
direction=-direction

countdownCI = 15
}

if y > view_yview + view_hview and speed >= 2 and countdownCI <= 0{
savedir = -direction
direction=-direction

countdownCI = 15
}


while ( x > view_xview + view_hview*1.8 )
    x -= 1;
while ( x < view_xview ) 
    x += 1;
while ( y > view_yview + view_hview )
    y -= 1;
while ( y < view_yview  )
    y += 1;






if leTimer = 600{
with (lePlatform){instance_destroy();}
instance_destroy();
}