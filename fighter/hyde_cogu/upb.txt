fast_fall = 0
fast_fall_temp = 0
if state_type = "run" || state_type = "stand" || state_type = "jump"{
    attacking = 0;
    special = 0;
    timer = 0;
	state_type = "air_attack"
    attack_type = "upb"
    image_speed = 0;
    sprite_index = upb_sprite;
    image_index=0;
    time = 33;
    timer_speed=1;
    if (moveright = 1 && !ai) || (ai && x < nearest_edge.x)
     facing = 0
    if (moveleft = 1 && !ai) || (ai && x > nearest_edge.x) 
     facing = 1
}
        if timer < time {
		state_type = "air_attack"
		 switch ( timer )
      {
	case 3: image_index = 0; break;
	case 6: image_index = 1; break;
	case 9: image_index = 2; break;
	case 12: image_index = 3; break;
	case 15: image_index = 4; break;
	case 18: image_index = 5; break;
	case 21: image_index = 6; break;
	case 24: image_index = 7; break;
	case 27: image_index = 8; break;
	case 30: image_index = 8; break;
	
	  }
	  
	  if timer = 12 or timer = 15 or timer = 18 or timer = 21 or timer = 24 or timer = 27 {
		  create_hitbox ( 2 , 85+facing*10 , 5.5 , 0.2 , 15 , 3 , unibslash1 , obj_spark_slash3 , 1.32 , 1.91 , 24.25 , 20.25 , self.id , 6 , 2 );
 swordslash = create_spark(0,61,self.id);
    swordslash.sprite_index = swordslash4_sprite;
    swordslash.image_speed = 0.5;
    swordslash.image_alpha = 1;
    swordslash.image_xscale = image_xscale*3.9;
    swordslash.image_yscale = image_yscale*3.9;
    swordslash.depth = depth - 0.1;
    swordslash.snap = self.id
	hitbox.di = 0
	  }
	  
	  if timer >= 12 and timer < 33 {
		  vspeed =  -6
		  hspeed = 1-facing*2
	  }
	  
	  if timer = 12 {
		  sound_play(insulator3_voice);
		  sound_play(upb_voice);
	  }
	  
	  if timer = 30 {
		   create_hitbox ( 2 , 85+facing*10 , 4.25 , 4.8 , 15 , 7 , unibslash3 , obj_spark_slash3 , 1.32 , 1.91 , 24.25 , 20.25 , self.id , 6 , 2 );


	  }
	  if timer = 31
		{	
			attack_type = "none"
			air = max_jumps
			movejump = 0;
			state_type = "fall";
			}
	  
	  if attack_success and timer < 30 {
	  	target.x = x + 17 * (1-facing*2)
	    target.y = y
		}
	
        }

		   if (timer >= 30){
if (attack_success || target.object_index == obj_enemy) && (obj_score_control.stocks[target.number-1] == 1 && dontrepeat = 0){
				if ((target.weight <= .22 && target.percent > 110) || (target.weight > .22 && target.weight < .3 && target.percent > 120) || (target.weight > .3 && target.percent > 130)){
				killspark = instance_create(enemy.x-200,enemy.y-250,obj_spark);
				killspark.sprite_index = killspark_sprite;
				killspark.image_xscale = size * 0.75;
				killspark.image_yscale = size * 0.95;
				killspark.image_yscale = size * 0.95;
				killspark.image_index = 0;
				killspark.image_speed = 0.045;
				killspark.alarm[0] = 80;
				killspark.depth = depth + 2 ;
				sound_play(killscreen_voice);
				screen_shake(30,30);
				freezer  = instance_create(enemy.x,enemy.y,obj_freeze)
				effect_create_above(ef_ellipse,enemy.x,enemy.y+10,1,c_black)
				freezer.alarm[0] = 80
				spark = instance_create ( 0 , 0 , obj_camerazoom );
				spark.camera_l = enemy.x - 30;
				spark.camera_r = enemy.x + 30;
				spark.camera_u = enemy.y - 50;
				spark.camera_d = enemy.y;
				spark.camera_boundary_zoom = 120;
				spark.alarm[0] = 50;
				spark2 = instance_create(enemy.x+8*(1-facing*2),enemy.y-26,obj_spark_hit3)
				spark2.alarm[0] = 50
				dontrepeat = 1;
				}
				}
        
  }	 
if timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" {
	
		dontrepeat = 0;
		attack_type = "none"
		if air > 0
        state_type = "fall";
        else
        state_type = "stand";
        timer = 0;
        time =-1;
    }
	
