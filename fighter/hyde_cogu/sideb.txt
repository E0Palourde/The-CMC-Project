fast_fall = 0
fast_fall_temp = 0
if nosideb > 0 {break}
if state_type = "jump" || state_type = "stand" || state_type = "run" || state_type = "crouch" {
        if ( cantsideb ) exit;
        state_type = "air_attack"
        attack_type = "sideb"
        image_speed = 0
        sprite_index = sideb_sprite
        image_index=0
        timer = 0
        time = 55
		special = 1
    }

if ( timer < time )
  {
state_type = "air_attack"
  switch ( timer )
      {
	case 2: image_index = 0; break;
	case 4: image_index = 1; break;
	case 6: image_index = 2; break;
	case 8: image_index = 3; break;
	case 12: image_index = 4; break;
	case 16: image_index = 5; break;
	case 20: image_index = 6; break;
	case 24: image_index = 7; break;
	case 28: image_index = 8; break;
	case 32: image_index = 9; break;
	case 66: image_index = 0; break; //////2nd part
	case 70: image_index = 1; break;
	case 74: image_index = 2; break;
	case 78: image_index = 3; break;
	case 82: image_index = 4; break;
	case 86: image_index = 5; break;
	case 90: image_index = 6; break;
	case 94: image_index = 7; break;
	case 98: image_index = 8; break;
	case 102: image_index = 9; break;
	case 106: image_index = 10; break;
	case 110: image_index = 11; break;
	case 114: image_index = 12; break;
	case 140: image_index = 0; break; //////3rd part
	case 144: image_index = 1; break;
	case 148: image_index = 2; break;
	case 152: image_index = 3; break;
	case 156: image_index = 4; break;
	case 160: image_index = 5; break;
	case 164: image_index = 6; break;
	case 168: image_index = 7; break;
	case 172: image_index = 8; break;
	case 176: image_index = 9; break;
	case 180: image_index = 10; break;

      }
	  
	  if attack_success = 1 and timer < 152 {
	  target.x = x + 14 * (1-facing*2)
	  target.y = y
	  }
	  
	  if timer > 1 {
	  air_move = 0
	  }
	  
	  if timer >= 1 and timer < 8 {
		  hspeed = 0
	  }
	  
	  if timer = 8 {
create_hitbox ( 4 , 60+facing*60 , 7.5 , 0 , 8 , 4 , unibslash1 , obj_spark_slash3 , 1.32 , 1.91 , 24.25 , 20.25 , self.id , 6 , 2 );
hitbox.di = 0
hitbox.hit_stun = 30
 swordslash = create_spark(-25,51,self.id);
    swordslash.sprite_index = newswordslash_sprite;
    swordslash.image_speed = 0.5;
    swordslash.image_alpha = 1;
    swordslash.image_xscale = image_xscale*1;
    swordslash.image_yscale = image_yscale*1;
    swordslash.depth = depth - 0.1;
    swordslash.snap = self.id
	sound_play(insulator1_voice);
	sound_play(sideb_voice);
	vspeed = -6
	hspeed = 2-facing*4
	hitbox.weight_kb = 0
}

if timer >= 20 and timer < 36 and special = 1 {
	timer = 65
	time = 124
	sprite_index = fairsideb_sprite
	image_index = 0
}

if timer >= 33 and timer < 48 and attacking = 1 {
	interrupt = 1;
}

if timer = 78 {
	 create_hitbox ( 5 , 40+facing*100 , 7.7 , 0 , 10 , 5 , unibslash2 , obj_spark_hit2 , 1.3 , 1.22 , 23.69 , 18.84 , self.id , 3 , 2 );
	   hitbox.di = 0
	   hitbox.hit_stun = 30
	   swordslash = create_spark(-33,-8,self.id);
    swordslash.sprite_index = newswordslash_sprite;
    swordslash.image_speed = 0.5;
    swordslash.image_alpha = 0.8;
    swordslash.image_xscale = image_xscale*1.3;
    swordslash.image_yscale = image_yscale*1.41;
    swordslash.depth = depth - 0.1;
    swordslash.snap = self.id
	swordslash.image_angle = 86 * (1-facing*2)
	sound_play(insulator2_voice);
	sound_play(sideb2_voice);
	vspeed = -6
	hspeed = 3-facing*6
	hitbox.weight_kb = 1
}

if timer >= 98 and timer < 102 and special = 1 {
	timer = 139
	time = 190
	sprite_index = bairsideb_sprite
	image_index = 0
}

if timer = 152 {
	 create_hitbox ( 6 , 275-facing*10 , 5.5 , 6.9 , 12 , 10 , unibslash3 , obj_spark_slash3 , 1.72 , 1.91 , 22.75 , 20.25 , self.id , 2 , 2 );
	   swordslash = create_spark(-44,76,self.id);
    swordslash.sprite_index = newswordslash_sprite;
    swordslash.image_speed = 0.5;
    swordslashslash.image_alpha = 1;
    swordslash.image_xscale = image_xscale*1.8;
    swordslash.image_yscale = image_yscale*1.5;
    swordslash.depth = depth - 0.1;
    swordslash.snap = self.id
	sound_play(insulator3_voice);
	sound_play(sideb3_voice);
}


if air = 0 and timer > 139 {
	dontrepeat = 0;
	cantsideb = 300
        state_type="land";
        attack_type="none";
        sprite_index = land_sprite;
        timer=0;
        time=6; }
  
	  
	  
	  
  }
   if (timer >= 153){
if (attack_success || target.object_index == obj_enemy) && (obj_score_control.stocks[target.number-1] == 1 && dontrepeat = 0 && target.offstage){
				if ((target.weight <= .22 && target.percent > 100) || (target.weight > .22 && target.weight < .3 && target.percent > 120) || (target.weight > .3 && target.percent > 130)){
				killspark = instance_create(enemy.x-200,enemy.y-250,obj_spark);
				killspark.sprite_index = killspark_sprite;
				killspark.image_xscale = size * 0.75;
				killspark.image_yscale = size * 0.95;
				killspark.image_yscale = size * 0.95;
				killspark.image_index = 0;
				killspark.image_speed = 0.045;
				killspark.alarm[0] = 100;
				killspark.depth = depth + 2 ;
				sound_play(killscreen_voice);
				screen_shake(30,30);
				freezer  = instance_create(enemy.x,enemy.y,obj_freeze)
				effect_create_above(ef_ellipse,enemy.x,enemy.y+10,1,c_black)
				freezer.alarm[0] = 10
				spark = instance_create ( 0 , 0 , obj_camerazoom );
				spark.camera_l = enemy.x - 30;
				spark.camera_r = enemy.x + 30;
				spark.camera_u = enemy.y - 50;
				spark.camera_d = enemy.y;
				spark.camera_boundary_zoom = 120;
				spark.alarm[0] = 70;
				spark2 = instance_create(enemy.x+8*(1-facing*2),enemy.y-26,obj_spark_hit3)
				spark2.alarm[0] = 70
				dontrepeat = 1;
				}
				}
        
  }	 

if timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" {
    dontrepeat = 0;
	cantsideb = 50
	attack_type = "none";
    if air > 0
        state_type = "jump";
    else
        state_type = "stand";
    timer = 0;
    time =-1;
    
}