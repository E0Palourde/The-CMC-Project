fast_fall = 0;
fast_fall_temp = 0;
thunder_height = 100;

if ( state_type = "run" || state_type = "stand" || state_type = "jump" || state_type = "crouch" )
  {
    attacking = 0;
    moveleft = 0;
    moveright = 0;
    if hspeed < 2 && hspeed > -2
        hspeed = 0;
    attack_type = "downb";
    if air = 0 {
        state_type = "air_attack";
        hspeed = 0; }
    else {
        state_type = "air_attack";
	      air_move = 0;
        }
        image_speed = 0;
        sprite_index = downb_sprite;
        image_index = 0;
        timer = 0;
        time = 75;
        sound_play(downb_voice)
        timer_speed=1;
        temp=0
  }

if ( timer < time ) {
  //cloud sprite switch
  switch (timer)
  {
    case 13:
      cloud = instance_create(self.x,self.y-(thunder_height+120),obj_spark); //position of cloud is a bit off...

      flare01 = instance_create(cloud.x,cloud.y,obj_spark);
      flare01.sprite_index = downb_flare01_sprite;
      flare01.image_speed = 0;
      flare01.image_xscale = 0.2;
      flare01.image_yscale = 0.2;
      flare01.depth = -2
      flare01.image_alpha = 0.7
      flare02 = instance_create(cloud.x,cloud.y,obj_spark);
      flare02.sprite_index = downb_flare02_sprite;
      flare02.image_speed = 0;
      flare02.image_xscale = 0.125;
      flare02.image_yscale = 0.125;
      flare02.depth = -1
      flare03 = instance_create(cloud.x,cloud.y,obj_spark);
      flare03.sprite_index = downb_flare02_sprite;
      flare03.image_speed = 0;
      flare03.image_xscale = 0.15;
      flare03.image_yscale = 0.15;
      flare03.depth = -1
      flare03.image_alpha = 0.7

      cloud.alarm[0] = 40;
      flare01.alarm[0] = 40;
      flare02.alarm[0] = 40;
      flare03.alarm[0] = 40;
	  cloud.sprite_index = downb_cloud_sprite;
	  cloud.depth = 0;
	  cloud.image_speed = 0;
	  break;
	case 1: image_index = 1; break;
	case 2: image_index = 2; break;
	case 3: image_index = 3; break;
	case 4: image_index = 4; break;
	case 5: image_index = 5; break;
	case 6: image_index = 6; break;
	case 7: image_index = 7; break;
	case 8: image_index = 8; break;
	case 9: image_index = 9; break;
	case 10: image_index = 10; break;
	case 11: image_index = 11; break;
	case 12: image_index = 12; break;
	case 13: image_index = 13; break;
	case 14: image_index = 14; break;
	case 15: image_index = 15; break;
	case 16: image_index = 16; break;
	case 17: image_index = 17; break;
	case 18: image_index = 18; break;
	case 19: image_index = 19; break;
	case 20: image_index = 20; break;
	case 21: image_index = 21; break;
	case 22: image_index = 22; break;
	case 23: image_index = 23; break;
	case 24: image_index = 24; break;
	case 25: image_index = 25; break;
	case 26: image_index = 26; break;
	case 27: image_index = 27; break;
	case 28: image_index = 28; break;
	case 29: image_index = 29; break;
	case 30: image_index = 30; break;
	case 31: image_index = 31; break;
	case 32: image_index = 32; break;
	case 33: image_index = 33; break;
	case 34: image_index = 34; break;
	case 35: image_index = 35; break;
	case 37: image_index = 36; break;
	case 40: image_index = 37; break;
	case 43: image_index = 38; break;
	case 46: image_index = 39; break;
	case 49: image_index = 40; break;
	case 52: image_index = 41; break;
	case 55: image_index = 42; break;
	case 58: image_index = 43; break;
	case 61: image_index = 44; break;
	case 64: image_index = 45; break;
	case 67: image_index = 46; break;
	case 70: image_index = 47; break;

	case 101: image_index = 1;
	case 102: image_index = 2; break;
	case 103: image_index = 3; break;
	case 104: image_index = 4; break;
	case 105: image_index = 5; break;
	case 106: image_index = 6; break;
	case 107: image_index = 7; break;
	case 108: image_index = 8; break;
	case 109: image_index = 9; break;
	case 110: image_index = 10; break;
	case 111: image_index = 11; break;
	case 112: image_index = 12; break;
	case 113: image_index = 13; break;
	case 114: image_index = 14; break;
	case 115: image_index = 15; break;
	case 116: image_index = 16; break;
	case 117: image_index = 17; break;
	case 118: image_index = 18; break;
	case 119: image_index = 19; break;
	case 120: image_index = 20; break;
	case 121: image_index = 21; break;
	case 122: image_index = 22; break;
	case 123: image_index = 23; break;
	case 124: image_index = 24; break;
  }

  if ( timer >= 125 && timer <= 140 && air = 0 ) {
	image_index = timer - 100;
  }
  if ( timer >= 125 && timer <= 126 && air > 0 ) {
	image_index = 24;
  }
  if timer <= 5 && ((moveleft && !facing) || (moveright && facing)) {
    facing = 1-facing;
	hspeed *= -1;
  }
  if timer = 2 {
	duster = instance_create(x-6+facing*12,y,obj_dust_effect);
	duster.facing = facing;
	duster.image_xscale = 0.15;
	duster.image_yscale = 0.15;
	duster2 = instance_create(x+6-facing*12,y,obj_dust_effect);
	duster2.facing = abs(facing-1);
	duster2.image_xscale = 0.15;
	duster2.image_yscale = 0.15;
  }
  if timer = 9 {
    spawner = create_projectile(0,270,0,0,0,0,-1,-1,1.2,1.25,0,18,self.id,50,char_custom2);
    spawner.hit = 2
  }
  if timer = 13 {
	crown = gfx_ef_crown ( x , y );
	crown.image_speed = crown.image_speed/2
  }
  if timer = 13 {
    sound_play(downb_sound);
  }
}

if air = 0 {
  air_move = 0
  hspeed=0
}
if hspeed > 2
	hspeed = 2
if hspeed < -2
	hspeed = -2


 if (timer >= 15){
if (attack_success || target.object_index == obj_enemy) && (dontrepeat = 0) && target.offstage && obj_score_control.stocks[target.number-1] == 1{
				if ((target.weight <= .22 && target.percent > 120) || (target.weight > .22 && target.weight < .3 && target.percent > 135) || (target.weight > .3 && target.percent > 150)){
				killspark = instance_create(enemy.x-200,enemy.y-250,obj_spark);
				killspark.sprite_index = killspark_sprite;
				killspark.image_xscale = size * 0.75;
				killspark.image_yscale = size * 0.95;
				killspark.image_yscale = size * 0.95;
				killspark.image_index = 0;
				killspark.image_speed = 0.045;
				killspark.alarm[0] = 80;
				killspark.depth = depth + 2 ;
				sound_play(killscreen_voice);
				screen_shake(30,30);
				freezer  = instance_create(enemy.x,enemy.y,obj_freeze)
				effect_create_above(ef_ellipse,enemy.x,enemy.y+10,1,c_black)
				freezer.alarm[0] = 80
				spark = instance_create ( 0 , 0 , obj_camerazoom );
				spark.camera_l = enemy.x - 30;
				spark.camera_r = enemy.x + 30;
				spark.camera_u = enemy.y - 50;
				spark.camera_d = enemy.y;
				spark.camera_boundary_zoom = 120;
				spark.alarm[0] = 50;
				spark2 = instance_create(enemy.x+8*(1-facing*2),enemy.y-26,obj_spark_hit3)
				spark2.alarm[0] = 50
				dontrepeat = 1;
				}
				}
        
  }	   

if (timer > 15){
if (attack_success || target.object_index == obj_enemy) && (dontrepeat = 0) && obj_score_control.stocks[target.number-1] == 1  {
				if ((target.weight <= .22 && target.percent > 100) || (target.weight > .22 && target.weight < .3 && target.percent > 110) || (target.weight > .3 && target.percent > 120)){
				killspark = instance_create(enemy.x-200,enemy.y-250,obj_spark);
				killspark.sprite_index = killspark_sprite;
				killspark.image_xscale = size * 0.75;
				killspark.image_yscale = size * 0.95;
				killspark.image_yscale = size * 0.95;
				killspark.image_index = 0;
				killspark.image_speed = 0.045;
				killspark.alarm[0] = 80;
				killspark.depth = depth + 2 ;
				sound_play(killscreen_voice);
				screen_shake(30,30);
				freezer  = instance_create(enemy.x,enemy.y,obj_freeze)
				effect_create_above(ef_ellipse,enemy.x,enemy.y+10,1,c_black)
				freezer.alarm[0] = 80
				spark = instance_create ( 0 , 0 , obj_camerazoom );
				spark.camera_l = enemy.x - 30;
				spark.camera_r = enemy.x + 30;
				spark.camera_u = enemy.y - 50;
				spark.camera_d = enemy.y;
				spark.camera_boundary_zoom = 120;
				spark.alarm[0] = 50;
				spark2 = instance_create(enemy.x+8*(1-facing*2),enemy.y-26,obj_spark_hit3)
				spark2.alarm[0] = 50
				dontrepeat = 1;
				}
				}
        
  }	   
	
if timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" {
  attack_type = "none";
  state_type = "stand";
  dontrepeat = 0
	with (cloud)
		instance_destroy();
	with (flare01)
		instance_destroy();
	with (flare02)
		instance_destroy();
	with (flare03)
		instance_destroy();
  
  if air > 0 {
	
    state_type = "jump";
	sprite_index = jump_sprite;
	image_index = 24;
	image_speed = 0;
  }
  timer = 0;
  time =-1;
}
