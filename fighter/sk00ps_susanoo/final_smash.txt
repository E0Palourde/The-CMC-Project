if state_type = "stand" || state_type = "run" || state_type = "jump" || state_type = "shielding" {
        hspeed = 0;
        state_type = "air_attack";
        attack_type = "final_smash";
        image_speed = 0;
        sprite_index = fs_sprite;
        image_index=0;
        timer = 0;
        time = 760;
        timer_speed=1;
        intangible = 1;
        final_smashes+=1
	sound_play(astral_snd);
        smash_power = 0
        air_move=0
		astralfinish = 0;
	astralvoicetemp = choose(1,2);
	duster = instance_create ( 0 , 0 , obj_freeze );
	duster.dontpause = self.id;
	duster.alarm[0] = 62;
	
	nero_dummy = instance_create(x,y,obj_spark);
	nero_dummy.image_speed = 0;
	nero_dummy.image_alpha = 0;
	nero_dummy.depth = -25;
	nero_dummy.image_yscale = ysize;
	nero_dummy.image_xscale = xsize*(1-facing*2);
	nero_dummy.alarm[0] = 99999
	nero_dummy.number = number
	
	enemy_dummy = instance_create(x,y,obj_spark);
	enemy_dummy.image_speed = 0;
	enemy_dummy.image_alpha = 0;
	enemy_dummy.depth = -26;
	enemy_dummy.image_yscale = target.ysize;
	enemy_dummy.image_xscale = target.xsize*(1-facing*2);
	enemy_dummy.alarm[0] = 99999
	enemy_dummy.number = target.number
}
speed=0
gravity_lock = 1;
if ( timer < time ){

switch ( timer )
    {
	case 3: image_index = 1; break;
	case 6: image_index = 2; break;
	case 9: image_index = 3; break;
	case 12: image_index =4; break;
	case 15: image_index = 2; break;
	case 18: image_index = 3; break;
	case 21: image_index = 4; break;
	case 24: image_index = 2; break;
	case 27: image_index = 3; break;
	case 30: image_index = 4; break;
	case 33: image_index = 2; break;
	case 36: image_index = 3; break;
	case 39: image_index = 4; break;
	case 42: image_index = 2; break;
	case 45: image_index = 3; break;
	case 48: image_index = 4; break;
	case 51: image_index = 2; break;
	case 54: image_index = 3; break;
	case 57: image_index = 4; break;
	case 60: image_index = 5; break;
	case 63: image_index = 6; break;
	case 66: image_index = 7; break;
	case 70: image_index = 8; break;
	case 74: image_index = 9; break;
	case 78: image_index = 7; break;
	case 82: image_index = 8; break;
	case 86: image_index = 9; break;
	case 90: sprite_index = fs_sprite2; image_index = 19; break;
	case 94: image_index = 20; break;
	case 98: image_index = 21; break;
	
	case 103: image_index = 7; break;
	case 106: image_index = 8; break;
	case 109: image_index = 9; break;
	case 112: image_index = 7; break;
	case 115: image_index = 8; break;
	case 118: image_index = 9; break;
	case 121: image_index = 7; break;
	case 124: image_index = 8; break;
	case 127: image_index = 9; break;
	case 130: image_index = 7; break;
	case 133: image_index = 8; break;
	case 136: image_index = 9; break;
	case 139: image_index = 7; break;
	case 142: image_index = 8; break;
	case 145: image_index = 9; break;
	case 148: image_index = 10; break;
	
	case 154: image_index = 11; break;
	case 157: image_index = 12; break;
	case 160: image_index = 13; break;
	case 163: image_index = 11; break;
	case 166: image_index = 12; break;
	case 169: image_index = 13; break;
	case 172: image_index = 11; break;
	case 175: image_index = 12; break;
	case 178: image_index = 13; break;
	case 181: image_index = 11; break;
	case 184: image_index = 12; break;
	case 187: image_index = 13; break;
	case 190: image_index = 11; break;
	case 193: image_index = 12; break;
	case 196: image_index = 13; break;
	case 199: image_index = 11; break;
	case 202: image_index = 12; break;
	case 205: image_index = 13; break;
	case 208: image_index = 11; break;
	case 211: image_index = 12; break;
	case 214: image_index = 13; break;
	case 217: sprite_index = fs_sprite2; image_index = 0; break; //14
	case 223: image_index = 1; break; //15
	case 229: image_index = 2; break; //16
	case 237: image_index = 3; break; //17
	case 245: image_index = 4; break; //18
	case 253: image_index = 5; break; //19
	case 261: image_index = 6; break; //20
	case 267: image_index = 7; break; //21
	case 273: image_index = 8; break; //22
	case 279: image_index = 9; break; //23
	case 285: image_index = 10; break; //24
	case 288: image_index = 11; break; //25
	case 291: image_index = 12; break; //26
	case 294: image_index = 10; break;
	case 297: image_index = 11; break;
	case 300: image_index = 12; break;
	case 303: image_index = 10; break;
	case 306: image_index = 11; break;
	case 309: image_index = 12; break;
	case 312: image_index = 10; break;
	case 315: image_index = 11; break;
	case 318: image_index = 12; break;
	case 321: image_index = 10; break;
	case 324: image_index = 11; break;
	case 327: image_index = 12; break;
	case 330: image_index = 10; break;
	case 333: image_index = 11; break;
	case 336: image_index = 12; break;
	case 339: image_index = 10; break;
	case 342: image_index = 11; break;
	case 345: image_index = 12; break;
	case 348: image_index = 10; break;
	case 351: image_index = 11; break;
	case 354: image_index = 12; break;
	case 357: image_index = 10; break;
	case 360: image_index = 11; break;
	case 363: image_index = 12; break;
	case 366: image_index = 13; break;//27
	case 369: image_index = 14; break;//28
	case 372: image_index = 15; break;//29
	case 375: image_index = 16; break;//30
	case 378: image_index = 17; break;//31
	case 381: image_index = 18; break;//32
	case 381: image_index = 16; break;
	case 384: image_index = 17; break;
	case 387: image_index = 18; break;
	case 390: image_index = 16; break;
	case 393: image_index = 17; break;
	case 396: image_index = 18; break;
	case 399: image_index = 16; break;
	case 402: image_index = 17; break;
	case 405: image_index = 18; break;
	case 408: image_index = 16; break;
	case 411: image_index = 17; break;
	case 414: image_index = 18; break;
	case 417: image_index = 16; break;
	case 420: image_index = 17; break;
	case 423: image_index = 18; break;
	case 426: image_index = 16; break;
	case 429: image_index = 17; break;
	case 432: image_index = 18; break;
	case 435: image_index = 16; break;
	case 438: image_index = 17; break;
	case 441: image_index = 18; break;
	case 444: image_index = 16; break;
	case 447: image_index = 17; break;
	case 450: image_index = 18; break;
	case 453: image_index = 16; break;
	case 456: image_index = 17; break;
	case 459: image_index = 18; break;
	case 462: image_index = 16; break;
	case 465: image_index = 17; break;
	case 468: image_index = 18; break;
	case 471: image_index = 16; break;
	case 474: image_index = 17; break;
	case 477: image_index = 18; break;
	case 480: image_index = 16; break;
	case 483: image_index = 16; break;
	case 486: image_index = 17; break;
	case 489: image_index = 18; break;
	case 492: image_index = 16; break;
	case 495: image_index = 17; break;
	case 498: image_index = 18; break;
	case 501: image_index = 16; break;
	case 504: image_index = 17; break;
	case 507: image_index = 18; break;
	case 510: image_index = 16; break;
	case 513: image_index = 17; break;
	case 516: image_index = 18; break;
	case 519: image_index = 16; break;
	case 522: image_index = 17; break;
	case 525: image_index = 18; break;
	case 528: image_index = 16; break;
	case 531: image_index = 16; break;
	case 534: image_index = 17; break;
	case 537: image_index = 18; break;
	case 540: image_index = 16; break;
	case 543: image_index = 17; break;
	case 546: image_index = 18; break;
	case 549: image_index = 16; break;
	case 552: image_index = 17; break;
	case 555: image_index = 18; break;
	case 558: image_index = 16; break;
	case 561: image_index = 17; break;
	case 564: image_index = 18; break;
	case 567: image_index = 16; break;
	case 570: image_index = 17; break;
	case 573: image_index = 18; break;
	case 576: image_index = 16; break;
	case 579: image_index = 17; break;
	case 582: image_index = 18; break;
	
	case 700: sprite_index = win_sprite; image_index = 9; break;
	case 706: sprite_index = win_sprite; image_index = 10; break;
	case 712: sprite_index = win_sprite; image_index = 11; break;
	case 718: sprite_index = win_sprite; image_index = 12; break;
	case 724: sprite_index = win_sprite; image_index = 9; break;
	case 730: sprite_index = win_sprite; image_index = 10; break;
	case 736: sprite_index = win_sprite; image_index = 11; break;
	case 742: sprite_index = win_sprite; image_index = 12; break;
	case 748: sprite_index = win_sprite; image_index = 9; break;
	case 754: sprite_index = win_sprite; image_index = 10; break;
	case 760: sprite_index = win_sprite; image_index = 11; break;
	
	case 1100: sprite_index = win_sprite; image_index = 9; break;
	case 1106: sprite_index = win_sprite; image_index = 10; break;
	case 1112: sprite_index = win_sprite; image_index = 11; break;
	case 1118: sprite_index = win_sprite; image_index = 12; break;
	case 1124: sprite_index = win_sprite; image_index = 9; break;
	case 1130: sprite_index = win_sprite; image_index = 10; break;
	case 1136: sprite_index = win_sprite; image_index = 11; break;
	case 1142: sprite_index = win_sprite; image_index = 12; break;
	case 1148: sprite_index = win_sprite; image_index = 9; break;
	case 1154: sprite_index = win_sprite; image_index = 10; break;
	case 1160: sprite_index = win_sprite; image_index = 11; break;
	case 1166: sprite_index = win_sprite; image_index = 9; break;
	case 1172: sprite_index = win_sprite; image_index = 10; break;
	case 1178: sprite_index = win_sprite; image_index = 11; break;
	case 1184: sprite_index = win_sprite; image_index = 9; break;
	case 1190: sprite_index = win_sprite; image_index = 10; break;
	case 1196: sprite_index = win_sprite; image_index = 11; break;
	case 1202: sprite_index = win_sprite; image_index = 9; break;
	case 1208: sprite_index = win_sprite; image_index = 10; break;
	case 1214: sprite_index = win_sprite; image_index = 11; break;
	case 1220: sprite_index = win_sprite; image_index = 9; break;
	case 1226: sprite_index = win_sprite; image_index = 10; break;
	case 1230: sprite_index = win_sprite; image_index = 11; break;
	case 1236	: image_index = 12	; break;
case 1242	: image_index = 9	; break;
case 1248	: image_index = 10	; break;
case 1254	: image_index = 11	; break;
case 1260	: image_index = 12	; break;
case 1266	: image_index = 9	; break;
case 1272	: image_index = 10	; break;
case 1278	: image_index = 11	; break;
case 1284	: image_index = 12	; break;
case 1290	: image_index = 9	; break;
case 1296	: image_index = 10	; break;
case 1302	: image_index = 11	; break;
case 1308	: image_index = 12	; break;
case 1314	: image_index = 9	; break;
case 1320	: image_index = 10	; break;
case 1326	: image_index = 11	; break;
case 1332	: image_index = 12	; break;
case 1338	: image_index = 9	; break;
case 1344	: image_index = 10	; break;
case 1350	: image_index = 11	; break;
case 1356	: image_index = 12	; break;
case 1362	: image_index = 9	; break;
case 1368	: image_index = 10	; break;
case 1374	: image_index = 11	; break;
case 1380	: image_index = 12	; break;
case 1386	: image_index = 9	; break;
case 1392	: image_index = 10	; break;
case 1398	: image_index = 11	; break;
case 1404	: image_index = 12	; break;
case 1410	: image_index = 9	; break;
case 1416	: image_index = 10	; break;
case 1422	: image_index = 11	; break;
case 1428	: image_index = 12	; break;
case 1434	: image_index = 9	; break;
case 1440	: image_index = 10	; break;
case 1446	: image_index = 11	; break;
case 1452	: image_index = 12	; break;
case 1458	: image_index = 9	; break;
case 1464	: image_index = 10	; break;
case 1470	: image_index = 11	; break;
case 1476	: image_index = 12	; break;
case 1482	: image_index = 9	; break;
case 1488	: image_index = 10	; break;
case 1494	: image_index = 11	; break;
    }
	if timer = 6 {
	crest_fx = create_spark ( 10 , 30 , crest_fx_sprite , 0 , 1*(1-facing*2) , 1 );
	crest_fx.depth = 1;
	crest_fx.image_alpha = 0;
	crest_fx.image_blend = c_red;
	}
	if timer >= 6 && timer <= 14 {
	crest_fx.image_xscale -= 0.05
	crest_fx.image_yscale -= 0.05
	}
	if timer >= 6 && timer <= 20 {
	crest_fx.image_alpha += 0.05
	}
	if timer >= 48 && timer <= 58 {
	crest_fx.image_xscale += 0.05
	crest_fx.image_yscale += 0.05
	crest_fx.image_alpha -= 0.1
	}
	if timer = 3 {
	if astralvoicetemp = 1 {
	sound_play(astral_voice1);
	}
	if astralvoicetemp = 2 {
	sound_play(astral_voice2);
	}
	}
	if timer = 60 {
	sound_play(upb_snd1);
	sound_play(cfswing3);
	}
	if timer = 63 {
	create_hitbox(5,angle_correct(90),1,0,-1,4,cfhit4,obj_spark_hit4,1.05 , 1.25, 19.43 , 19.14 ,self.id,6,5);
	}
	if timer >= 63 && timer <= 69 && hitbox.hit = 1 {
	time = 766;
	timer = 103;
	spark = instance_create ( 0 , 0 , obj_camerazoom );
	spark.camera_l = x - 8;
	spark.camera_r = x + 8;
	spark.camera_u = y - 4 - actual_height;
	spark.camera_d = y + 4;
	spark.camera_boundary_zoom = 100;
	spark.alarm[0] = 700;
	duster = instance_create ( 0 , 0 , obj_freeze );
	duster.dontpause = self.id;
	duster.alarm[0] = 596;
	}
	if timer >= 103 && timer < 700 {
	target.x = x;
	target.y = y;
	target.sprite_index = target.down_sprite;
	target.timer_speed = 0;
	target.ignore_physics = 1;
	}
	nero_dummy.sprite_index = sprite_index;
	nero_dummy.image_index = image_index;
	enemy_dummy.sprite_index = target.sprite_index;
	enemy_dummy.image_index = target.image_index;
	if timer = 103 {
	blackscreen = create_spark(0,0,self.id);
	blackscreen.depth = -18;
	blackscreen.image_alpha = 0;
	blackscreen.image_speed = 0;
	blackscreen.x = view_xview - 30;
	blackscreen.y = view_yview - 30;
	blackscreen.sprite_index = blackscreen_sprite;
	blackscreen.image_yscale = view_hview * 1000;
	blackscreen.image_xscale = view_hview * 1000;
	nero_dummy.image_alpha = 1;
	enemy_dummy.image_alpha = 1;
	if target.percent >= 100 {
	astralfinish = 1;
	fs_music = tempmus_play2 ( astralmusicshort , 1100 , 1 )
	}
	}
	if timer >= 103 && timer <= 113 {
	blackscreen.image_alpha += 0.1;
	}
	if timer = 145 {
    fs_floor_fx = instance_create ( x , y , obj_custom_gfx );
    fs_floor_fx.depth = -19;
    fs_floor_fx.draw_script = char_custom9;
    fs_floor_fx.keepmain = keepmain;
    fs_floor_fx.image_alpha = 0;
    fs_floor_fx.sprite_index = fs_floor_fx_sprite;
	fs_floor_fx.image_xscale = 0.2*(1-facing*2)
	fs_floor_fx.image_yscale = 0.2;
	fs_floor_fx.is_solid = true;
	if obj_score_control.stocks[target.number] <= 1 || instance_exists(obj_training) {
		susanoowin = 1;
	}
	}
	if timer < 1150 {
	fs_floor_fx.x += 13 * ( 1 - facing * 2 );
    if ( fs_floor_fx.x >= 0 ) fs_floor_fx.x -= 720;
    if ( fs_floor_fx.x < -720 ) fs_floor_fx.x += 720;
	}
	if timer >= 145 && timer <= 155 {
	fs_floor_fx.image_alpha += 0.1;
	}
	if timer = 148 {
	sound_play(smash_snd);
	if astralvoicetemp = 1 {
	sound_play(astral_voice3);	
	}
	if astralvoicetemp = 2 {
	sound_play(astral_voice4);	
	}
	fsproj = create_projectile(30,361,1,0,-1,1,cfhit4,obj_spark_hit4,1 , 1, 0 , 0 ,self.id,2,no_script);
	fsproj.depth = -99;
	slashspark = instance_create(x,y,obj_spark_hit4);
	slashspark.depth = -100
	}
	if timer >= 148 {
	enemy_dummy.speed = 10*(1-facing*2);
	enemy_dummy.direction = 40*(1-facing*2);
	enemy_dummy.sprite_index = target.flinch_sprite;
	}
	if timer = 223 {
	sound_play(bjudgment_snd1);
	if astralvoicetemp = 1 {
	sound_play(astral_voice5);	
	}
	if astralvoicetemp = 2 {
	sound_play(astral_voice6);	
	}
	}
	if timer = 229 {
	fs_fx2 = create_spark ( 11 , 39 , fs_fx2_sprite , 0.16 , 0.31*(1-facing*2) , 0.31 );
	fs_fx2.loop = 99;
	fs_fx2.depth = -24;
	}
	if fs_fx2.image_index >= 12 && timer < 366 {
		fs_fx2.image_index = 9;
	}
	if timer = 366 {
		fs_fx2.image_index = 12;
	}
	if timer = 273 {
	sound_play(bjudgment_snd1);
	}
	if timer = 285 {
	sound_play(fs_snd1);
	}
	if timer = 366 {
	sound_play(fs_snd2);
	}
	if timer = 372 {
	screen_shake(10,10);
	slash_fx = create_spark ( 0 , 30 , slash_eff_sprite , 0 , 0.4*(1-facing*2) , 0.2 );
	slash_fx.image_angle=random(360)
	slash_fx.y = random_range(y-0,y-60);
	slash_fx.alarm[0] = 10;
	if astralfinish = 1 {
	slashspark = instance_create(x,y-21.60*size,obj_spark_slash3);
	slashspark.depth = -100
	sound_play(astralcfslash);
	fsproj = create_projectile(3,361,1,0,-1,1,-1,obj_spark_slash3,1 , 1, 0 , 0 ,self.id,2,no_script);
	}
	}
	if fs_fx2.image_index >= 14  {
		fs_fx2.image_speed = 0;
		fs_fx2.image_index = 14;
	}
	if timer = 366 {
		fs_fx2.image_index = 12;
	}
	if timer >= 372 && timer <= 650 && timer mod 7 = 0 {
	screen_shake(7,7);
	}
	if timer >= 217 && timer <= 372 && timer mod 7 = 0 {
	screen_shake(1,1);
	}
	if timer >= 285 && timer <= 363 && timer mod 15 = 0 {
	if astralfinish = 1 {
	slashspark = instance_create(x,y-21.60*size,obj_spark_slash3);
	slashspark.depth = -100
	sound_play(astralcfslash);
	fsproj = create_projectile(3,361,1,0,-1,1,-1,obj_spark_slash3,1 , 1, 0 , 0 ,self.id,2,no_script);
	slashspark = instance_create(x+77.40*(1-facing*2)*size,y-21.60*size,obj_spark_slash3);
	}
	}
	if timer >= 500 && timer <= 671 && timer mod 3 = 0 && astralfinish = 1 {
	fsproj3 = create_projectile(10,361,1,0,-1,1,-1,obj_spark_hit4,1 , 1, 0 , 0 ,self.id,2,no_script);
	}
	if timer >= 372 && timer <= 650 && timer mod 3 = 0 {
	slash_fx = create_spark ( 0 , 30 , slash_eff_sprite , 0 , 0.4*(1-facing*2) , 0.2 );
	slash_fx.image_angle=random(360)
	slash_fx.y = random_range(y-0,y-60);
	slash_fx.alarm[0] = 10;
	}
	if timer >= 372 && timer <= 450 && timer mod 10 = 0 {
	if astralfinish = 1 {
	slashspark = instance_create(x,y-21.60*size,obj_spark_slash3);
	slashspark.depth = -100
	sound_play(astralcfslash);
	fsproj = create_projectile(3,361,1,0,-1,1,-1,obj_spark_slash3,1 , 1, 0 , 0 ,self.id,2,no_script);
	slashspark = instance_create(x+77.40*(1-facing*2)*size,y-21.60*size,obj_spark_slash3);
	}
	}
	if timer >= 450 && timer <= 650 && timer mod 5 = 0 {
	if astralfinish = 1 {
	slashspark = instance_create(x,y-21.60*size,obj_spark_slash3);
	slashspark.depth = -100
	sound_play(astralcfslash);
	fsproj = create_projectile(3,361,1,0,-1,1,-1,obj_spark_slash3,1 , 1, 0 , 0 ,self.id,2,no_script);
	slashspark = instance_create(x+77.40*(1-facing*2)*size,y-21.60*size,obj_spark_slash3);
	}
	}
	slash_fx.image_xscale += 0.08*(1-facing*2);
	slash_fx.image_yscale += 0.08;
	slash_fx.depth = -99;
	slash_fx.image_alpha -= 0.1 
	if timer = 650 || timer = 653 || timer = 656 || timer = 659 {
	screen_shake(10,10);
	slash_fx = create_spark ( 0 , 30 , slash_eff_sprite , 0 , 0.8*(1-facing*2) , 0.4 );
	slash_fx.image_angle=random(360)
	slash_fx.y = random_range(y-0,y-60);
	slash_fx.alarm[0] = 10;
	if astralfinish = 1 {
	sound_play(astralcfslash);
	slashspark = instance_create(x,y-21.60*size,obj_spark_slash3);
	slashspark.depth = -100
	fsproj = create_projectile(3,361,1,0,-1,1,cfslash3,obj_spark_hit4,1 , 1, 0 , 0 ,self.id,2,no_script);
	}
	}
	if astralfinish = 1 {
	if timer = 662 || timer = 665 || timer = 668 || timer = 671 {
	screen_shake(10,10);
	slashspark = instance_create(x,y-21.60*size,obj_spark_slash3);
	slashspark.depth = -100
	slash_fx = create_spark ( 0 , 30 , slash_eff_sprite , 0 , 0.8*(1-facing*2) , 0.4 );
	slash_fx.image_angle=random(360)
	slash_fx.y = random_range(y-0,y-60);
	slash_fx.alarm[0] = 10;
	sound_play(astralcfslash);
	fsproj = create_projectile(3,361,1,0,-1,1,cfslash3,obj_spark_hit4,1 , 1, 0 , 0 ,self.id,2,no_script);
	}
	}
	if timer = 384 || timer = 465 {
	sound_play(fs_snd3);
	}
	if timer = 345 {
	if astralvoicetemp = 1 {
	sound_play(astral_voice7);	
	}
	if astralvoicetemp = 2 {
	sound_play(astral_voice8);	
	}
	}
	if timer = 498 {
	if astralvoicetemp = 1 {
	sound_play(astral_voice9);	
	}
	if astralvoicetemp = 2 {
	sound_play(astral_voice10);	
	}
	}
	if timer = 665 && astralfinish = 0 {
	timer = 699
	}
	if timer = 685 && astralfinish = 1 {
		time = 1500;
		timer = 1000;
	spark = instance_create ( 0 , 0 , obj_camerazoom );
	spark.camera_l = x - 8;
	spark.camera_r = x + 8;
	spark.camera_u = y - 4 - actual_height;
	spark.camera_d = y + 4;
	spark.camera_boundary_zoom = 100;
	spark.alarm[0] = 700;
	duster = instance_create ( 0 , 0 , obj_freeze );
	duster.dontpause = self.id;
	duster.alarm[0] = 596;
	blackscreen2 = create_spark(0,0,self.id);
	blackscreen2.depth = -98;
	blackscreen2.image_alpha = 0;
	blackscreen2.image_speed = 0;
	blackscreen2.x = view_xview - 30;
	blackscreen2.y = view_yview - 30;
	blackscreen2.sprite_index = blackscreen_sprite;
	blackscreen2.image_yscale = view_hview * 1000;
	blackscreen2.image_xscale = view_hview * 1000;
	}
	if timer >= 1000 && timer <= 1010 {
		blackscreen2.image_alpha += 0.1;
	}
	if timer = 1000 {
	astralfinish_fx = create_spark ( -1 , 15 , astral_finish_fx_sprite , 0 , 0.72*(1-facing*2) , 0.72 );
	astralfinish_fx.depth = -100;
	astralfinish_fx.image_alpha = 0;
	nero_dummy.y = y+15
	
	}
	if timer >= 1001 && timer <= 1010 {
	astralfinish_fx.image_xscale -= 0.05
	astralfinish_fx.image_yscale -= 0.05
	}
	if timer >= 1001 && timer <= 1010 {
	astralfinish_fx.image_alpha += 0.1
	}
	if timer = 1010 {
	if (instance_exists(fs_fx2)) {with (fs_fx2){instance_destroy();}}
	if (instance_exists(fs_floor_fx)) {with (fs_floor_fx){instance_destroy();}}
		screen_shake(10,10);
	sound_play(target.starko_voice);
		sound_play(astralfinish_voice);
		sound_play(astralfinish_snd);
	ringeff = effect_create_above(ef_ring,x,y-15*size,0.1,c_red)
	ringeff.depth = -99
	}
	if timer = 1060 {
	whitescreen = create_spark(0,0,self.id);
	whitescreen.depth = -99;
	whitescreen.image_alpha = 0;
	whitescreen.image_speed = 0;
	whitescreen.x = view_xview - 30;
	whitescreen.y = view_yview - 30;
	whitescreen.sprite_index = whitescreen_sprite;
	whitescreen.image_yscale = view_hview * 1000;
	whitescreen.image_xscale = view_hview * 1000;
	}
	if timer = 1060 {
	fs_bg = create_spark ( 0 , -30 , fs_bg_sprite , 0.3 , 0.4*(1-facing*2) , 0.4 );
	fs_bg.loop = 999;
	fs_bg.depth = -24
	sword_fx = create_spark ( -4 , 40 , fs_fx4_sprite , 0.3 , 0.29*(1-facing*2) , 0.29 );
	sword_fx.loop = 999;
	sword_fx.depth = -27
	}
	if timer >= 1060 && timer <= 1070 {
		whitescreen.image_alpha += 0.1;
	}
	if timer >= 1150 && timer <= 1160 {
		whitescreen.image_alpha -= 0.1;
		blackscreen2.image_alpha -= 0.1;
		astralfinish_fx.image_alpha -= 0.1;
	}
	if timer = 1170 {
	if astralvoicetemp = 1 {
	sound_play(astral_voice11);	
	}
	if astralvoicetemp = 2 {
	sound_play(astral_voice12);	
	}
	}
	if timer = 1300 {
	win_fx = create_spark ( 2 , 15 , win_fx_sprite , 0 , 0.05*(1-facing*2) , 0.05 );
	win_fx.depth = -100;
	win_fx.image_alpha = 0;
		sound_play(susanoo_announcer);
	}
	if timer >= 1300 {
		win_fx.image_alpha += 0.1;
	}
	if timer >= 1300 && timer <= 1319 {
	win_fx.image_xscale += 0.005
	win_fx.image_yscale += 0.005
	}
	if timer = 1380 {
		sound_play(susanoo_win);
	}
	if timer = 1420 {
	target.dead = 1
	with (target){
	if dead = 1{
    image_angle = 0
    vspeed = 0
    hspeed = 0
    state_type = "ded"
    dead_timer = 111
	}
	}
	}
	if timer = 699 {
	target.x = x+40*(1-facing*2);
	target.y = y;
	}
	if slash_fx.image_yscale > 0 {
		slash_fx.image_yscale -= 0.05*size;
	}
	if slash_fx.image_yscale <= 0 {
		slash_fx.image_alpha = 0;
	}
	if timer = 700 {
	target.timer_speed = 1;
	slash_fx2 = create_spark ( 40 , 5 , slash_eff_sprite , 0 , 0.4*(1-facing*2) , 0.2 );
	slash_fx2.image_angle= 90*(1-facing*2);
	slash_fx2.alarm[0] = 10;
	if astralvoicetemp = 1 {
	sound_play(astral_voice11);	
	}
	if astralvoicetemp = 2 {
	sound_play(astral_voice12);	
	}
	sound_play(cfcounterslash);
	fsproj2 = create_projectile(15,angle_correct(40),8,8,-1,60,-1,obj_spark_hit4,1 , 1, 40 , 5 ,self.id,2,no_script);
	if (instance_exists(slash_fx)) {with (slash_fx){instance_destroy();}}
	if (instance_exists(fs_fx2)) {with (fs_fx2){instance_destroy();}}
	if (instance_exists(nero_dummy)) {with (nero_dummy){instance_destroy();}}
	if (instance_exists(enemy_dummy)) {with (enemy_dummy){instance_destroy();}}
	if (instance_exists(blackscreen)) {with (blackscreen){instance_destroy();}}
	if (instance_exists(fs_floor_fx)) {with (fs_floor_fx){instance_destroy();}}
	if (instance_exists(spark)) {with (spark){instance_destroy();}}
	if (instance_exists(duster)) {with (duster){instance_destroy();}}
	}
	if timer >= 700 {
		slash_fx2.image_yscale -= 0.05*size;
	}
}

	
if timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" {
    smash_power = 0
    attack_type = "none";
    intangible = 0;
    if air > 0
    state_type = "jump";
    else
    state_type = "stand";
    timer = 0;
    time =-1;
	if (instance_exists(slash_fx)) {with (slash_fx){instance_destroy();}}
	if (instance_exists(slash_fx2)) {with (slash_fx2){instance_destroy();}}
	if (instance_exists(fs_fx2)) {with (fs_fx2){instance_destroy();}}
	if (instance_exists(nero_dummy)) {with (nero_dummy){instance_destroy();}}
	if (instance_exists(enemy_dummy)) {with (enemy_dummy){instance_destroy();}}
	if (instance_exists(blackscreen)) {with (blackscreen){instance_destroy();}}
	if (instance_exists(fs_floor_fx)) {with (fs_floor_fx){instance_destroy();}}
	if (instance_exists(spark)) {with (spark){instance_destroy();}}
	if (instance_exists(duster)) {with (duster){instance_destroy();}}
	if (instance_exists(fs_bg)) {with (fs_bg){instance_destroy();}}
	if (instance_exists(sword_fx)) {with (sword_fx){instance_destroy();}}
	if (instance_exists(win_fx)) {with (win_fx){instance_destroy();}}
}