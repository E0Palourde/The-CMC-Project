if ( time == -1 )
  {
  hspeed = 0;
  state_type = "attack";
  attack_type = "bthrow";
  image_speed = 0.25;
  sprite_index = bthrow_sprite;
  image_index = 0;
  timer = 0;
  time = 28;
  timer_speed = 1;
  target.timer_speed = 0;
  target.alarm[0] = 50;
  }
  
if ( timer = 0 )
{
target.x = x + 25 * size * (1-facing*2);
target.y = y;
}
  
switch ( timer )
  {
  case 1:
    target . x = x + 20 * (1-facing*2) * size;
    target . y = y - 1 * size;
    break;
  case 2:
    target . x = x + 20 * (1-facing*2) * size;
    target . y = y - 2 * size;
	break;
  case 3:
    target . x = x + 15 * (1-facing*2) * size;
    target . y = y - 3 * size;
	break;
  case 4:
    target . x = x + 10 * (1-facing*2) * size;
    target . y = y - 4 * size;
	break;
  case 5:
    target . x = x + 6 * (1-facing*2) * size;
    target . y = y - 9 * size;
    break;
  case 6:
    target . x = x + 2 * (1-facing*2) * size;
    target . y = y - 14 * size;
    break;
  case 7:
    target . x = x - 2 * (1-facing*2) * size;
    target . y = y - 19 * size;
    break;
  case 8:
    target . x = x - 6 * (1-facing*2) * size;
    target . y = y - 24 * size;
    break;
  case 9: case 11: case 12:
    target . x = x - 9 * ( 1-facing-facing );
    target . y = y - 24 * size;
    break;
  case 10:
    target . x = x - 12 * ( 1-facing-facing );
    target . y = y - 24 * size;
    break;
  case 11:
    target . x = x - 15 * ( 1-facing-facing );
    target . y = y - 24 * size;
    break;
  case 12: case 13: case 14: case 15:
    target . x = x - 18 * ( 1-facing-facing );
    target . y = y - 24 * size;
    break;
  case 16:
    target . x = x - 18 * ( 1-facing-facing );
    target . y = y - 24 * size;
    create_throw_box ( 7 , angle_correct(150) , 5.5 , 5.2 , 6 , 1 , -1 , -1 , 0.8 , 0.8 , -25 , 40 , self.id , 1 );
    hitbox.hit_stun = 10;
    break;
  }
if ( timer = 4) {
sound_play(vine_sound3);
}

if ( timer >= 28 )
  {
  attack_type = "none";
  state_type = "stand";
  timer = 0;
  time = -1;
  }