if ( time == -1 )
  {
  hspeed = 0;
  state_type = "attack";
  attack_type = "dthrow";
  image_speed = 0.25;
  sprite_index = dthrow_sprite;
  image_index = 0;
  timer = 0;
  time = 24;
  timer_speed = 1;
  target.timer_speed = 0;
  target.alarm[0] = 50;
  }

switch ( timer )
  {
  case 0:
    target.x = x + 25 * size * (1-facing*2);
    target.y = y;
	break;
  case 1:
    target.x = x + 17 * size * (1-facing*2);
    target.y = y - 3 * size;
    break;
  case 2:
    target.x = x + 9 * size * (1-facing*2);
    target.y = y - 6 * size;
    break;
  case 3:
    target.x = x + 7.5 * size * (1-facing*2);
    target.y = y - 13 * size;
    break;
  case 4:
    target.x = x + 6 * size * (1-facing*2);
    target.y = y - 20 * size;
    break;
  case 5:
    target.x = x + 5 * size * (1-facing*2);
    target.y = y - 28.5 * size;
    break;
  case 6:
    target.x = x + 4 * size * (1-facing*2);
    target.y = y - 37 * size;
    break;
  case 7: case 8:
    target.x = x + 4.5 * size * (1-facing*2);
    target.y = y - 38 * size;
    break;
  case 7: case 8:
    target.x = x + 5 * size * (1-facing*2);
    target.y = y - 39 * size;
    break;
  case 9:
    target.x = x + 6 * size * (1-facing*2);
    target.y = y - 41 * size;
    break;
  case 10:
    target.x = x + 7 * size * (1-facing*2);
    target.y = y - 43 * size;
    break;
  case 11:
    target.x = x + 8 * size * (1-facing*2);
    target.y = y - 45 * size;
    break;
  case 12:
    target.x = x + 9 * size * (1-facing*2);
    target.y = y - 47 * size;
    break;
  case 13:
    target.x = x + 14 * size * (1-facing*2);
    target.y = y - 40 * size;
    break;
  case 14:
    target.x = x + 19 * size * (1-facing*2);
    target.y = y - 33 * size;
    break;
  case 15:
    target.x = x + 23.5 * size * (1-facing*2);
    target.y = y - 25 * size;
    break;
  case 16:
    target.x = x + 28 * size * (1-facing*2);
    target.y = y - 17 * size;
    break;
  case 17: case 18:
    target.x = x + 31.5 * size * (1-facing*2);
    target.y = y - 11 * size;
    break;
  case 17: case 18:
    target.x = x + 35 * size * (1-facing*2);
    target.y = y - 5 * size;
    break;
  case 19:
	target.x = x + 35 * size * (1-facing*2);
    target . y = y;
    create_throw_box ( 13 , 72 + 36 * facing , 7.3 , 4.4 , 10 , 12 , kick3 , obj_spark_hit2 , 0.6 , 0.8 , 32 , 0 , self.id , 2 );
    hitbox.hit_stun = 8;
    break;
  }

switch ( timer )
  {
  case 2: image_index = 1; break;
  case 4: image_index = 2; break;
  case 7: image_index = 4; break;
  case 10: image_index = 3; break;
  case 13: image_index = 5; break;
  case 15: image_index = 6; break;
  case 17: image_index = 7; break;
  case 19: image_index = 9; break;
  }

if ( timer = 2) {
sound_play(vine_sound1);
}
if ( timer = 13) {
sound_play(vine_sound5);
}

 if (timer >= 19){
if (attack_success || target.object_index == obj_enemy) && (obj_score_control.stocks[target.number-1] == 1 && dontrepeat = 0){
				if ((target.weight <= .22 && target.percent > 160) || (target.weight > .22 && target.weight < .3 && target.percent > 175) || (target.weight > .3 && target.percent > 185)){
				killspark = instance_create(enemy.x-200,enemy.y-250,obj_spark);
				killspark.sprite_index = killspark_sprite;
				killspark.image_xscale = size * 0.75;
				killspark.image_yscale = size * 0.95;
				killspark.image_yscale = size * 0.95;
				killspark.image_index = 0;
				killspark.image_speed = 0.045;
				killspark.alarm[0] = 80;
				killspark.depth = depth + 2 ;
				sound_play(killscreen_voice);
				screen_shake(30,30);
				freezer  = instance_create(enemy.x,enemy.y,obj_freeze)
				effect_create_above(ef_ellipse,enemy.x,enemy.y+10,1,c_black)
				freezer.alarm[0] = 80
				spark = instance_create ( 0 , 0 , obj_camerazoom );
				spark.camera_l = enemy.x - 30;
				spark.camera_r = enemy.x + 30;
				spark.camera_u = enemy.y - 50;
				spark.camera_d = enemy.y;
				spark.camera_boundary_zoom = 120;
				spark.alarm[0] = 50;
				spark2 = instance_create(enemy.x+8*(1-facing*2),enemy.y-26,obj_spark_hit3)
				spark2.alarm[0] = 50
				dontrepeat = 1;
				}
				}
        
  }	   

if ( timer >= 23 )
  {
  attack_type = "none";
  state_type = "stand";
  timer = 0;
  time = -1;
  }