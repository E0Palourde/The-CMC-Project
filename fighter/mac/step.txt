

if state_type = "flinch" || state_type = "air_flinch" {
var obj;
if ( place_meeting ( x , y , attack_box ) )
{
    obj = instance_nearest ( x , y , attack_box)
}
if (place_meeting ( x , y , projectile_box)) 
{
    obj = instance_nearest (x,y,projectile_box)
}
limittemptimer -= 1
limittemp = obj.damage
if limittemptimer < 0
if percent != lastpercent
limittemptimer = 1
}

if (air = 0 || state_type = "flinch" || state_type = "air_flinch" || state_type = "respawn")
{sbtemp = 0}

if state_type = "entry" || state_type = "respawn" || state_type = "out" || state_type = "dead" {
limitgauge = 0
limittemp = 0
limittemptimer = 2
limitbreak = 0
temppercent = -100
lastlimittemp = 0
limithold = 300
}

if limittemptimer = 0 {
limitgauge += limittemp
lastpercent = percent
}

if hitbox.hit > 0  {
if attack_type != "final_smash" {
limittemp = hitbox.damage
limittemptimer -= 1
}
}
else if hitbox2.hit > 0 {
limittemp = hitbox2.damage
limittemptimer -= 1
}
else if hitbox3.hit > 0 {
limittemp = hitbox3.damage
limittemptimer -= 1
}
else if hitbox4.hit > 0 {
limittemp = hitbox4.damage
limittemptimer -= 1
}
else {
if state_type != "flinch" && state_type != "air_flinch"
limittemptimer = 2
limittemp = 0
}


if limitgauge >= 80 {
limitbreak = 1
limithold = 300
sound_play(taunt_sound);
limitgauge = 0
    repeat ( 2 )
    {
    a = after_image ( 2 , c_green , .25 );
    a.image_xscale *= 1.15;
    a.image_yscale *= 1.15;
    a.x += -1 + floor ( random ( 3 ) );
    a.y += -1 + floor ( random ( 3 ) );
    }
}
if limitbreak = 1 {
limithold -= 1
if limithold <= 0 && (state_type = "flinch" || state_type = "air_flinch") {
var obj;
if ( place_meeting ( x , y , attack_box ) )
{
    obj = instance_nearest ( x , y , attack_box)
}
if (place_meeting ( x , y , projectile_box)) 
{
    obj = instance_nearest (x,y,projectile_box)
}
if obj.damage >= 10 {
    limitbreak = 0
    limitgauge = 0 }
}
limitgauge = 0
    repeat ( 2 )
    {
    a = after_image ( 2 , c_green , .25 );
    a.image_xscale *= 1.15;
    a.image_yscale *= 1.15;
    a.x += -1 + floor ( random ( 3 ) );
    a.y += -1 + floor ( random ( 3 ) );
    }
}
if global.gs_form[number-1] = 0
{
mac_timer -= 1;
if ( mac_timer <= -5 )
  {
    mac_timer = -5;
    mac_string = 0;
    mac_max = 0
    mac_min = 0
  }
if mac_string > 1 {
    if mac_min = 0 {
	sound_play(taunt_sound)
	mac_min = 1
	}
    a = after_image ( 2 , c_green , .5 );
    a.image_xscale *= 1.15;
    a.image_yscale *= 1.15;
    a.x += -1 + floor ( random ( 2 ) );
    a.y += -1 + floor ( random ( 2 ) );
}
if mac_string <= 1
with a instance_destroy()
if  mac_string >= 10 {
mac_string = 10
if mac_max = 0 {
sound_play(taunt_sound)
mac_max = 1 }
    repeat ( 2 )
    {
    a = after_image ( 2 , c_green , .25 );
    a.image_xscale *= 1.15;
    a.image_yscale *= 1.15;
    a.x += -1 + floor ( random ( 3 ) );
    a.y += -1 + floor ( random ( 3 ) );
    }
}
crusade = 1;

weight = 0.27;
grav = 0.26;
max_jumps = 3;
run_start_speed = 4.2;
run_accel = 0.4;
run_speed = 4.5;
jumptimer = 1;
jump_speed = 5.9;
mid_jump_speed = 5.4;
short_hop_speed = 2.4;
air_speed = 3.1;
fall_speed = 4.2;
air_accel = 0.3;
fric = 1.15;
}
if global.gs_form[number-1] = 1
{
crusade = 0;
if(btime = 65)
{
    if(flashingtimer > 0){flashingtimer -= 1}
    
    if(flashingtimer = 0)
    {
        flashingtimer = 5;
        if(flashing = 1){flashing = 0;}
        else if(flashing = 0){flashing = 1;}
    }
}
else
{
    flashing = 0;
}

if (state_type = "respawn") {btime = 0}

if (air = 0 || state_type = "flinch" || state_type = "air_flinch" || state_type = "respawn")
{sbtemp = 0}


if (!instance_exists(hudThing)){    
    hudThing = instance_create ( hud_x, hud_y, obj_custom_gfx);
    hudThing.step_script = hudThing_step_script;
    hudThing.draw_script = hudThing_draw_script;
	hudThing.image_xscale = 1;
	hudThing.image_yscale = 1;
	hudThing.hudalpha = obj_game_control.hud_cover[number-1];
    hudThing.owner = self.id;
    hudThing.keepmain = self.keepmain;
}

hudThing.hudalpha = obj_game_control.hud_cover[number-1];

if(limitbreak != 1)
{
hudThing.image_speed = 0;
hudThing.image_index = limitgauge * 11 /80;
if crusade = 0 {hudThing.sprite_index = meter1_sprite;}
else {hudThing.sprite_index = -1;}
}
else
{
hudThing.image_speed = 0.13;
if crusade = 0 {hudThing.sprite_index = meter2_sprite;}
else {hudThing.sprite_index = -1;}
}

}

