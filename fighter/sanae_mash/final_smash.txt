if ( ( MeterHud.cardtype = 0 ) || ( MeterHud.cardtype = 1 and floattime < maxfloattime*0.5 ) || ( MeterHud.cardtype = 2 and floattime < maxfloattime*1 ) )
{
fast_fall = 0;
fast_fall_temp = 0;
gravity_lock = 1;

if ( state_type == "stand" || state_type == "run" || state_type == "jump" || state_type == "shielding" )
  {
  hspeed = 0;
  vspeed = 0;
  size = csize;
  state_type = "air_attack";
  attack_type = "final_smash";
  image_speed = 0;
  image_index = 0;
  sprite_index = win_sprite;
  time = 96;
  timer = 0;
  timer_speed = 1;
  intangible = 1;
  final_smashes += 1;
  smash_power = 0;
  air_move = 0;
  freezer = instance_create(x,y,obj_freeze);
  freezer.alarm[0] = 48;
  freezer.dontpause = self.id;
  MeterHud.cardtype = 0;
  sound_play(spellcard1_voice);
  }
  
switch (timer)
{
case 2: image_index = 1; break;
case 4: image_index = 2; break;
case 6: image_index = 3; break;
case 8: image_index = 4; break;
case 10: image_index = 5; break;
case 12: image_index = 6; break;
case 14: image_index = 7; break;
case 16: image_index = 8; break;
case 18: image_index = 9; break;
case 20: image_index = 10; break;
case 22: image_index = 11; break;
case 24: image_index = 12; break;
case 26: image_index = 13; break;
case 28: image_index = 14; break;
case 30: image_index = 15; break;
case 32: image_index = 16; break;
case 34: image_index = 17; break;
case 36: image_index = 18; break;
case 38: image_index = 19; break;
case 40: image_index = 20; break;
case 42: image_index = 21; break;
case 44: image_index = 22; break;
case 46: image_index = 21; break;
case 48: image_index = 22; break;
case 50: image_index = 21; break;
case 52: image_index = 21; break;
case 54: image_index = 22; break;
case 56: image_index = 21; break;
case 58: image_index = 22; break;
case 60: image_index = 21; break;
case 62: image_index = 21; break;
case 64: image_index = 22; break;
case 66: image_index = 21; break;
case 68: image_index = 22; break;
case 70: image_index = 21; break;
case 72: image_index = 21; break;
case 74: image_index = 22; break;
case 76: image_index = 21; break;
case 78: image_index = 22; break;
case 80: image_index = 21; break;
case 82: image_index = 22; break;
case 84: image_index = 21; break;
case 86: image_index = 22; break;
case 88: image_index = 21; break;
case 90: image_index = 22; break;
case 92: sprite_index = usmash_sprite; image_index = 12; break;
case 94: image_index = 13; break;
}  
  
if timer = 12
{
    fsproj1 = create_projectile (2,35+facing*110,5.4,2,12,8,magic2,obj_spark_hit2,1.0,1.0,1.11,32.93,self.id,150,char_custom8);
	fsproj1.vspeed = -2 * size;
	fsproj1.type = 0;
}
  
if timer = 18
{
    fsproj2 = create_projectile (2,35+facing*110,5.4,2,12,8,magic2,obj_spark_hit2,1.0,1.0,8.14,10.17,self.id,150,char_custom8);
    fsproj2.vspeed = 2 * size;
    fsproj2.hspeed = 1 * (1-facing*2) * size;
	fsproj2.type = 0;
}  
  
if timer = 24  
{
    fsproj3 = create_projectile (2,35+facing*110,5.4,2,12,8,magic2,obj_spark_hit2,1.0,1.0,-11.10,22.94,self.id,150,char_custom8);
    fsproj3.hspeed = -2 * (1-facing*2) * size;
	fsproj3.type = 0;
}
  
if timer = 30
{
    fsproj4 = create_projectile (2,35+facing*110,5.4,2,12,8,magic2,obj_spark_hit2,1.0,1.0,11.10,22.94,self.id,150,char_custom8);
	fsproj4.hspeed = 2 * (1-facing*2) * size;
	fsproj4.type = 0;
}  

if timer = 36
{
    fsproj5 = create_projectile (2,35+facing*110,5.4,2,12,8,magic2,obj_spark_hit2,1.0,1.0,-8.14,10.17,self.id,150,char_custom8);
	fsproj5.hspeed = -1 * (1-facing*2) * size;
    fsproj5.vspeed =  2 * size;
	fsproj5.type = 0;
}
  
}


if MeterHud.cardtype = 1 and floattime >= maxfloattime*0.5
{
fast_fall = 0;
fast_fall_temp = 0;
gravity_lock = 1;

if ( state_type == "stand" || state_type == "run" || state_type == "jump" || state_type == "shielding" )
  {
  hspeed = 0;
  vspeed = 0;
  size = csize;
  state_type = "air_attack";
  attack_type = "final_smash";
  image_speed = 0;
  image_index = 0;
  sprite_index = utilt_sprite;
  timer = 0;
  time = 128;
  timer_speed = 1;
  intangible = 1;
  final_smashes += 1;
  smash_power = 0;
  air_move = 0;
  freezer = instance_create(x,y,obj_freeze);
  freezer.alarm[0] = 50;
  freezer.dontpause = self.id;
  MeterHud.cardtype = 1;
  sound_play(spellcard2_voice);
  }
  
switch (timer)
{
case 2: image_index = 1; break;
case 4: image_index = 2; break;
case 6: image_index = 3; break;
case 56: image_index = 4; break;
case 58: image_index = 5; break;
case 60: image_index = 6; break;
case 122: image_index = 7; break;
case 124: image_index = 8; break;
case 126: image_index = 9; break;
}  
  
if timer = 56 or timer = 60 or timer = 64 or timer = 68 or timer = 72 or timer = 76 or timer = 80 or timer = 84 or timer = 88 or timer = 92 or timer = 96 or timer = 100 or timer = 104 or timer = 108 or timer = 112 or timer = 116 or timer = 120
{
pillarR = create_projectile (6,15+facing*150,8.4,2.4,-1,3,water3,obj_spark_water,1.0,1.0,tempx,0,self.id,150,char_custom8);
pillarR.type = 1;

pillarL = create_projectile (6,165-facing*150,8.4,2.4,-1,3,water3,obj_spark_water,1.0,1.0,tempx,0,self.id,150,char_custom8);
pillarL.type = 1;
}  
 
if timer = 56
{
pillarR.tempx = 10;
pillarL.tempx = -10;
sound_play(water_sound);
duster = instance_create(x,y,obj_dust_effect);
duster.facing = facing;
duster.image_xscale = 0.35;
duster.image_yscale = 0.35;
duster2 = instance_create(x,y,obj_dust_effect);
duster2.facing = !facing;
duster2.image_xscale = 0.35;
duster2.image_yscale = 0.35;
screen_shake(2,-3);
}
 
if timer = 60 
{  
pillarR.tempx = 60;
pillarL.tempx = -60;
}

if timer = 64 
{  
pillarR.tempx = 110;
pillarL.tempx = -110;
}

if timer = 68 
{  
pillarR.tempx = 160;
pillarL.tempx = -160;
}

if timer = 72 
{  
pillarR.tempx = 210;
pillarL.tempx = -210;
}

if timer = 76 
{  
pillarR.tempx = 260;
pillarL.tempx = -260;
}

if timer = 80
{  
pillarR.tempx = 310;
pillarL.tempx = -310;
}

if timer = 84 
{  
pillarR.tempx = 360;
pillarL.tempx = -360;
}

if timer = 88 
{  
pillarR.tempx = 410;
pillarL.tempx = -410;
}

if timer = 92 
{  
pillarR.tempx = 460;
pillarL.tempx = -460;
}

if timer = 96 
{  
pillarR.tempx = 510;
pillarL.tempx = -510;
}

if timer = 100 
{  
pillarR.tempx = 560;
pillarL.tempx = -560;
}

if timer = 104 
{  
pillarR.tempx = 610;
pillarL.tempx = -610;
}

if timer = 108 
{  
pillarR.tempx = 660;
pillarL.tempx = -660;
}

if timer = 112 
{  
pillarR.tempx = 710;
pillarL.tempx = -710;
}

if timer = 116 
{  
pillarR.tempx = 760;
pillarL.tempx = -760;
}

if timer = 120 
{  
pillarR.tempx = 810;
pillarL.tempx = -810;
}

}


if MeterHud.cardtype = 2 and floattime >= maxfloattime*1
{
fast_fall = 0;
fast_fall_temp = 0;
gravity_lock = 1;

if ( state_type == "stand" || state_type == "run" || state_type == "jump" || state_type == "shielding" )
  {
  hspeed = 0;
  vspeed = 0;
  size = csize;
  state_type = "air_attack";
  attack_type = "final_smash";
  image_speed = 0;
  image_index = 0;
  sprite_index = final_smash_sprite;
  timer = 0;
  time = 244;
  timer_speed = 1;
  intangible = 1;
  final_smashes += 1;
  smash_power = 0;
  air_move = 0;
  freezer = instance_create(x,y,obj_freeze);
  freezer.alarm[0] = 191;
  freezer.dontpause = self.id;
  sound_play(spellcard2_voice);
  }
  
switch (timer)
{
case 2: image_index = 1; break;
case 4: image_index = 2; break;
case 6: image_index = 3; break;
case 8: image_index = 4; break;
case 10: image_index = 3; break;
case 12: image_index = 4; break;
case 14: image_index = 3; break;
case 16: image_index = 4; break;
case 18: image_index = 3; break;
case 20: image_index = 4; break;
case 22: image_index = 3; break;
case 24: image_index = 4; break;
case 26: image_index = 3; break;
case 28: image_index = 4; break;
case 30: image_index = 3; break;
case 32: image_index = 4; break;
case 34: image_index = 3; break;
case 36: image_index = 4; break;
case 38: image_index = 3; break;
case 40: image_index = 4; break;
case 42: image_index = 3; break;
case 44: image_index = 4; break;
case 46: image_index = 3; break;
case 48: image_index = 4; break;
case 52: image_index = 3; break;
case 54: image_index = 4; break;
case 56: image_index = 3; break;
case 58: image_index = 4; break;
case 61: sprite_index = final_smash_sprite2; image_index = 0; break;
case 64: image_index = 1; break;
case 67: image_index = 2; break;
case 70: image_index = 3; break;
case 73: image_index = 4; break;
case 76: image_index = 5; break;
case 79: image_index = 6; break;
case 82: image_index = 7; break;
case 85: image_index = 8; break;
case 88: image_index = 9; break;
case 91: image_index = 10; break;
case 94: image_index = 0; break;
case 97: image_index = 1; break;
case 100: image_index = 2; break;
case 103: image_index = 3; break;
case 106: image_index = 4; break;
case 109: image_index = 5; break;
case 112: image_index = 6; break;
case 115: image_index = 7; break;
case 118: image_index = 8; break;
case 121: image_index = 9; break;
case 124: image_index = 10; break;
case 127: image_index = 0; break;
case 130: image_index = 1; break;
case 133: image_index = 2; break;
case 136: image_index = 3; break;
case 139: image_index = 4; break;
case 142: image_index = 5; break;
case 145: image_index = 6; break;
case 148: image_index = 7; break;
case 151: image_index = 8; break;
case 154: image_index = 9; break;
case 157: image_index = 10; break;
case 160: image_index = 0; break;
case 163: image_index = 1; break;
case 166: image_index = 2; break;
case 169: image_index = 3; break;
case 172: image_index = 4; break;
case 175: image_index = 5; break;
case 178: image_index = 6; break;
case 181: image_index = 7; break;
case 184: image_index = 8; break;
case 187: image_index = 9; break;
case 190: image_index = 10; break;
case 192: sprite_index = upb_sprite; image_index = 0; break;
case 194: image_index = 1; break;
case 196: image_index = 2; break;
case 198: image_index = 3; break;
case 200: image_index = 4; break;
case 202: image_index = 5; break;
case 204: image_index = 6; break;
case 206: image_index = 7; break;
case 208: image_index = 8; break;
case 210: image_index = 9; break;
case 212: image_index = 10; break;
case 214: image_index = 11; break;
case 216: image_index = 12; break;
case 218: image_index = 13; break;
case 220: image_index = 14; break;
case 222: image_index = 15; break;
case 224: image_index = 16; break;
case 226: image_index = 17; break;
case 228: image_index = 18; break;
case 230: image_index = 19; break;
case 232: image_index = 20; break;
case 234: image_index = 21; break;
case 236: image_index = 22; break;
case 238: image_index = 23; break;
case 240: image_index = 24; break;
case 242: image_index = 25; break;
}  
  
  if timer = 67
  {
  lineH1 = create_projectile (1,35+facing*110,5.4,2,12,8,magic2,obj_spark_hit3,1.0,1.0,10,20,self.id,150,char_custom11);
  lineH1.type = 0;
  duster = instance_create(x,y,obj_dust_effect);
  duster.facing = facing;
  duster.image_xscale = 0.35;
  duster.image_yscale = 0.35;
  sound_play(line_sound);
  }
 
  if timer = 82
  {
  lineV1 = create_projectile (1,35+facing*110,5.4,2,12,8,magic2,obj_spark_hit3,1.0,1.0,30,20,self.id,150,char_custom11);
  lineV1.type = 1;
  duster = instance_create(x,y,obj_dust_effect);
  duster.facing = facing;
  duster.image_xscale = 0.35;
  duster.image_yscale = 0.35;
  lineV5 = create_projectile (1,35+facing*110,5.4,2,12,8,magic2,obj_spark_hit3,1.0,1.0,-30,20,self.id,150,char_custom11);
  lineV5.type = 1;
  sound_play(line_sound);
  }  
  
  if timer = 100
  {
  lineH2 = create_projectile (1,35+facing*110,5.4,2,12,8,magic2,obj_spark_hit3,1.0,1.0,10,60,self.id,150,char_custom11);
  lineH2.type = 0;
  duster = instance_create(x,y,obj_dust_effect);
  duster.facing = facing;
  duster.image_xscale = 0.35;
  duster.image_yscale = 0.35;
  sound_play(line_sound);
  }
  
  if timer = 115
  {
  lineV2 = create_projectile (1,35+facing*110,5.4,2,12,8,magic2,obj_spark_hit3,1.0,1.0,90,20,self.id,150,char_custom11);
  lineV2.type = 1;
  duster = instance_create(x,y,obj_dust_effect);
  duster.facing = facing;
  duster.image_xscale = 0.35;
  duster.image_yscale = 0.35;
  lineV6 = create_projectile (1,35+facing*110,5.4,2,12,8,magic2,obj_spark_hit3,1.0,1.0,-90,20,self.id,150,char_custom11);
  lineV6.type = 1;
  sound_play(line_sound);
  }  
  
  if timer = 133
  {
  lineH3 = create_projectile (1,35+facing*110,5.4,2,12,8,magic2,obj_spark_hit3,1.0,1.0,10,100,self.id,150,char_custom11);
  lineH3.type = 0;
  duster = instance_create(x,y,obj_dust_effect);
  duster.facing = facing;
  duster.image_xscale = 0.35;
  duster.image_yscale = 0.35;
  sound_play(line_sound);
  }
  
  if timer = 148
  {
  lineV3 = create_projectile (1,35+facing*110,5.4,2,12,8,magic2,obj_spark_hit3,1.0,1.0,150,20,self.id,150,char_custom11);
  lineV3.type = 1;
  duster = instance_create(x,y,obj_dust_effect);
  duster.facing = facing;
  duster.image_xscale = 0.35;
  duster.image_yscale = 0.35;
  sound_play(line_sound);
  }  
  
  if timer = 166
  {
  lineH4 = create_projectile (1,35+facing*110,5.4,2,12,8,magic2,obj_spark_hit3,1.0,1.0,10,140,self.id,150,char_custom11);
  lineH4.type = 0;
  duster = instance_create(x,y,obj_dust_effect);
  duster.facing = facing;
  duster.image_xscale = 0.35;
  duster.image_yscale = 0.35;
  lineH5 = create_projectile (1,35+facing*110,5.4,2,12,8,magic2,obj_spark_hit3,1.0,1.0,10,180,self.id,150,char_custom11);
  lineH5.type = 0;
  sound_play(line_sound);
  }
  
  if timer = 181
  {
  lineV4 = create_projectile (1,35+facing*110,5.4,2,12,8,magic2,obj_spark_hit3,1.0,1.0,210,20,self.id,150,char_custom11);
  lineV4.type = 1;
  duster = instance_create(x,y,obj_dust_effect);
  duster.facing = facing;
  duster.image_xscale = 0.35;
  duster.image_yscale = 0.35;
  sound_play(line_sound);
  }  
  
  if timer = 200
  {
  duster = instance_create(x,y,obj_dust_effect);
  duster.facing = facing;
  duster.image_xscale = 0.35;
  duster.image_yscale = 0.35;
  sound_play(beam_sound);
  sound_play(b_voice);
  
  beamH1 = create_projectile (1,35+facing*110,5.4,2,12,8,magic2,obj_spark_hit3,1.0,1.0,10,20,self.id,350,char_custom11);
  beamH1.type = 2;
  beamH1.redtimer = lineH1.redtimer;
  beamH1.greentimer = lineH1.greentimer;
  beamH1.bluetimer = lineH1.bluetimer;
  beamH1.redswitch = lineH1.redswitch;
  beamH1.greenswitch = lineH1.greenswitch;
  beamH1.blueswitch = lineH1.blueswitch;
  
  beamH2 = create_projectile (1,35+facing*110,5.4,2,12,8,magic2,obj_spark_hit3,1.0,1.0,10,60,self.id,350,char_custom11);
  beamH2.type = 2;
  beamH2.redtimer = lineH2.redtimer;
  beamH2.greentimer = lineH2.greentimer;
  beamH2.bluetimer = lineH2.bluetimer;
  beamH2.redswitch = lineH2.redswitch;
  beamH2.greenswitch = lineH2.greenswitch;
  beamH2.blueswitch = lineH2.blueswitch;
  
  beamH3 = create_projectile (1,35+facing*110,5.4,2,12,8,magic2,obj_spark_hit3,1.0,1.0,10,100,self.id,350,char_custom11);
  beamH3.type = 2;
  beamH3.redtimer = lineH3.redtimer;
  beamH3.greentimer = lineH3.greentimer;
  beamH3.bluetimer = lineH3.bluetimer;
  beamH3.redswitch = lineH3.redswitch;
  beamH3.greenswitch = lineH3.greenswitch;
  beamH3.blueswitch = lineH3.blueswitch;
  
  beamH4 = create_projectile (1,35+facing*110,5.4,2,12,8,magic2,obj_spark_hit3,1.0,1.0,10,140,self.id,350,char_custom11);
  beamH4.type = 2;
  beamH4.redtimer = lineH4.redtimer;
  beamH4.greentimer = lineH4.greentimer;
  beamH4.bluetimer = lineH4.bluetimer;
  beamH4.redswitch = lineH4.redswitch;
  beamH4.greenswitch = lineH4.greenswitch;
  beamH4.blueswitch = lineH4.blueswitch;
  
  beamH5 = create_projectile (1,35+facing*110,5.4,2,12,8,magic2,obj_spark_hit3,1.0,1.0,10,180,self.id,350,char_custom11);
  beamH5.type = 2;
  beamH5.redtimer = lineH5.redtimer;
  beamH5.greentimer = lineH5.greentimer;
  beamH5.bluetimer = lineH5.bluetimer;
  beamH5.redswitch = lineH5.redswitch;
  beamH5.greenswitch = lineH5.greenswitch;
  beamH5.blueswitch = lineH5.blueswitch;
  
  beamV1 = create_projectile (1,35+facing*110,5.4,2,12,8,magic2,obj_spark_hit3,1.0,1.0,30,20,self.id,350,char_custom11);
  beamV1.type = 3;
  beamV1.redtimer = lineV1.redtimer;
  beamV1.greentimer = lineV1.greentimer;
  beamV1.bluetimer = lineV1.bluetimer;
  beamV1.redswitch = lineV1.redswitch;
  beamV1.greenswitch = lineV1.greenswitch;
  beamV1.blueswitch = lineV1.blueswitch;
  
  beamV5 = create_projectile (1,35+facing*110,5.4,2,12,8,magic2,obj_spark_hit3,1.0,1.0,-30,20,self.id,350,char_custom11);
  beamV5.type = 3;
  beamV5.redtimer = lineV5.redtimer;
  beamV5.greentimer = lineV5.greentimer;
  beamV5.bluetimer = lineV5.bluetimer;
  beamV5.redswitch = lineV5.redswitch;
  beamV5.greenswitch = lineV5.greenswitch;
  beamV5.blueswitch = lineV5.blueswitch;
  
  beamV2 = create_projectile (1,35+facing*110,5.4,2,12,8,magic2,obj_spark_hit3,1.0,1.0,90,20,self.id,350,char_custom11);
  beamV2.type = 3;
  beamV2.redtimer = lineV2.redtimer;
  beamV2.greentimer = lineV2.greentimer;
  beamV2.bluetimer = lineV2.bluetimer;
  beamV2.redswitch = lineV2.redswitch;
  beamV2.greenswitch = lineV2.greenswitch;
  beamV2.blueswitch = lineV2.blueswitch;
  
  beamV6 = create_projectile (1,35+facing*110,5.4,2,12,8,magic2,obj_spark_hit3,1.0,1.0,-90,20,self.id,350,char_custom11);
  beamV6.type = 3;
  beamV6.redtimer = lineV6.redtimer;
  beamV6.greentimer = lineV6.greentimer;
  beamV6.bluetimer = lineV6.bluetimer;
  beamV6.redswitch = lineV6.redswitch;
  beamV6.greenswitch = lineV6.greenswitch;
  beamV6.blueswitch = lineV6.blueswitch;
  
  beamV3 = create_projectile (1,35+facing*110,5.4,2,12,8,magic2,obj_spark_hit3,1.0,1.0,150,20,self.id,350,char_custom11);
  beamV3.type = 3;
  beamV3.redtimer = lineV3.redtimer;
  beamV3.greentimer = lineV3.greentimer;
  beamV3.bluetimer = lineV3.bluetimer;
  beamV3.redswitch = lineV3.redswitch;
  beamV3.greenswitch = lineV3.greenswitch;
  beamV3.blueswitch = lineV3.blueswitch;
  
  beamV4 = create_projectile (1,35+facing*110,5.4,2,12,8,magic2,obj_spark_hit3,1.0,1.0,210,20,self.id,350,char_custom11);
  beamV4.type = 3;
  beamV4.redtimer = lineV4.redtimer;
  beamV4.greentimer = lineV4.greentimer;
  beamV4.bluetimer = lineV4.bluetimer;
  beamV4.redswitch = lineV4.redswitch;
  beamV4.greenswitch = lineV4.greenswitch;
  beamV4.blueswitch = lineV4.blueswitch;
  
  with (lineH1)
  {
  instance_destroy();
  }
  
  with (lineH2)
  {
  instance_destroy();
  }
  
  with (lineH3)
  {
  instance_destroy();
  }
  
  with (lineH4)
  {
  instance_destroy();
  }
  
  with (lineH5)
  {
  instance_destroy();
  }
  
  with (lineV1)
  {
  instance_destroy();
  }
  
  with (lineV2)
  {
  instance_destroy();
  }
  
  with (lineV3)
  {
  instance_destroy();
  }
  
  with (lineV4)
  {
  instance_destroy();
  }
  
  with (lineV5)
  {
  instance_destroy();
  }
  
  with (lineV6)
  {
  instance_destroy();
  }
  
  }
}

if ( timer >= time - 1 )
  {
  smash_power = 0;
  attack_type = "none";
  if MeterHud.cardtype = 1
  {
  floattime -= maxfloattime*0.5
  }
  if MeterHud.cardtype = 2
  {
  floattime -= maxfloattime*1
  }
  intangible = 0;
  if ( air > 0 )
    state_type = "jump"; 
    else
    state_type = "stand";
  timer = 0;
  time = -1;
  }