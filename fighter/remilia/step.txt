///universal cancel system start
if(timer < time && (state_type = "attack" || state_type = "air_attack") && (attack_success || hitbox.hit = 1 || hitbox2.hit = 1 || proj.hit = 1) && attack_type != "fthrow" && attack_type != "bthrow" && attack_type != "usmash" && attack_type != "dthrow" && attack_type != "final_smash")
{
    if(attack_type = "dash" || attack_type = "dash_attack" || attack_type = "jab")
    {
        if(special || smash || ((moveup || moveleft || moveright || movedown) && (attacking)))
        {
            timer = 0;
            interrupt = 1;
        }
    }
    
    if( attack_type = "utilt"|| attack_type = "stilt"|| attack_type = "dtilt")
    {
        if(special || smash)
        {
            timer = 0;
            interrupt = 1;
        }
    }
    
    if(attack_type = "ssmash" || attack_type = "dsmash" || attack_type = "nair" || attack_type = "uair" || attack_type = "fair" || attack_type = "dair" || attack_type = "bair")
    {
        if(special)
        {
            timer = 0;
            interrupt = 1;
        }
    }
	
	///airdash cancel
	if(attack_type = "nair" || attack_type = "uair" || attack_type = "fair" || attack_type = "dair" || attack_type = "bair" /*|| attack_type = "zair"*/ || attack_type = "b" || attack_type = "sideb" || /*attack_type = "upb" ||*/ attack_type = "downb")
    {
        if(air > 0 && grab)
        {
            timer = 0;
            interrupt = 1;
        }
    }
	///airdash cancel end
	
	///jump cancel start
    if(air < max_jumps-1 && movejump && timer < 1000 && (attack_type != "b" && attack_type != "upb" && attack_type != "sideb" && attack_type != "downb" && attack_type != "fair" && attack_type != "ssmash"))
    {
        if(air = 0)
        {
        timer = 1000;
        time = 1900;
        }
        else //double jump cancel
        {
            state_type = "jump";
            attack_type = "none";
            air += 1;
            vspeed = -mid_jump_speed;
			hspeed = 0;
            sprite_index = mid_jump_sprite;
            sound_play(mid_jump_sound)
            timer = time;
        }
    }
    
    if(timer = 1000)
    {sprite_index = land_sprite;}
    
    if(timer = 1003)
    {
        sound_play(jump_sound)
        if(shieldup)
        {
            attack_type = "none";
            state_type = "air_dodge";
            timer = 0;
            //interrupt = 1;
        }
        if(movejump)// full hop
        {
            vspeed = -jump_speed;
            timer = time;
        }
        else // short hop
        {
            vspeed = -short_hop_speed;
            timer = time;
        }
    }
///jump cancel end

}
///universal cancel system end


///////////////////////////////////////////// flight start

//if(instance_exists ( CardMeter ) && (state_type = "flinch" || state_type = "air_flinch" || state_type = "respawn"))
//{with (CardMeter) {instance_destroy();}}

///variables
//floatspeedv = 4;
//floatspeedh = 4;
//floatmove = 0.3;
maxfloattime = 150;
airdashcost = maxfloattime/5; //Cost for using an airdash. Equivalent of 1 Meter Orbs.
///

//Prevents float meter from draining if player accidentally floats into the blast zone
if state_type = "entry" || state_type = "respawn" || state_type = "out" || state_type = "dead" 
{floatfixtemp = 1}
else
{floatfixtemp = 0}

if (floattime > 0 && floatfixtemp != 1 && (hover_timer > 0 && vspeed = 0))
{floattime -= 1}

if (floattime < 0)
{floattime = 0}

if(floattime > maxfloattime)
{floattime = maxfloattime;} 

/////////////////Meter Start/////////////////////////////////////
if (!instance_exists(MeterHud)){
    hud_x = obj_game_control.hud_x[other.number-1];
    hud_y = window_h-128+lengthdir_y(obj_game_control.hudp_shake[i]*0.8,obj_game_control.hudp_shake[i]*60);    
    MeterHud = instance_create ( hud_x, hud_y, obj_custom_gfx);
    MeterHud.step_script = hudThing_step_script;
    MeterHud.draw_script = hudThing_draw_script;
    MeterHud.owner = self.id;
    MeterHud.keepmain = self.keepmain;
}

MeterHud.sprite_index = meter_sprite;
if(floattime = maxfloattime){MeterHud.image_index = 55;} else {MeterHud.image_index = floattime*56/maxfloattime;}
MeterHud.image_speed = 0;

//------------------------------------------------------------------------------------------------------------------------------------------
///////////////////////////////////////////////SCARLET MODE SYSTEM/////////////////////////////////////////////////////////////

//Scarlet Mode Meters
if (!instance_exists(BarHud)){
    hud_x = obj_game_control.hud_x[other.number-1];
    hud_y = window_h-128+lengthdir_y(obj_game_control.hudp_shake[i]*0.8,obj_game_control.hudp_shake[i]*60);    
    BarHud = instance_create ( hud_x, hud_y, obj_custom_gfx);
    BarHud.step_script = hudThing_step_script;
    BarHud.draw_script = hudThing_draw_script;
    BarHud.owner = self.id;
    BarHud.keepmain = self.keepmain;
}
if (!instance_exists(CardHud)){
    hud_x = obj_game_control.hud_x[other.number-1];
    hud_y = window_h-128+lengthdir_y(obj_game_control.hudp_shake[i]*0.8,obj_game_control.hudp_shake[i]*60);    
    CardHud = instance_create ( hud_x, hud_y, obj_custom_gfx);
    CardHud.step_script = hudThing_step_script;
    CardHud.draw_script = hudThing_draw_script;
    CardHud.owner = self.id;
    CardHud.keepmain = self.keepmain;
}
BarHud.sprite_index = meterbar_sprite;
BarHud.image_index = bar*251/60;
BarHud.image_speed = 0;
CardHud.sprite_index = metercard_sprite;
CardHud.image_index = card_meter;
CardHud.image_speed = 0;
CardHud.depth = -200;

if(bar < 0 ){ card_meter -= 1; bar = 59;}
if(bar > 59 && card_meter != 9 ){bar = 0; card_meter += 1; }
else if(bar > 59 && card_meter = 9 ){bar = 58;card_meter = 9; }
if(card_meter > 9 ){card_meter = 9}
if(card_meter < 0 ){card_meter = 0}

//------------------------------------------------------------------------------------------------------------------------------------------
//Meter Gain
if scarlet < 1{
		if((hitbox.hit = 1 || hitbox2.hit = 1 || hitbox3.hit = 1 || hitbox4.hit = 1 || proj.hit = 1) && zawarudo = 0 && attack_type != "dtilt" && attack_type != "sideb") {bar += 2.5 }///////how fast meter charges
		if((hitbox.hit = 1 || hitbox2.hit = 1 || hitbox3.hit = 1 || hitbox4.hit = 1 || proj.hit = 1) && zawarudo = 0 && (attack_type = "dtilt" ||  attack_type = "sideb")) {bar += 1 }
		if(bar >= 58 && card_meter = 9) {bar += 1 }
	}
//------------------------------------------------------------------------------------------------------------------------------------------
///Servant Flyer System
//Bat Circle Spawn: Creates a batcircle on hit, which fires homing bullets while active.
if(timer < time && (state_type = "attack" || state_type = "air_attack") && (attack_success || hitbox.hit = 1 || hitbox2.hit = 1) && attack_type != "bthrow" && attack_type != "usmash" && attack_type != "bair" && attack_type != "upb" && attack_type != "dthrow" && summonactive = 0 && scarlet > 0)
{
	if(attack_type = "jab" )
		{
			placex = -25; 
			placey = 30; 
			shootdmg = 1;
			shootbkb = 1;
			shootkbg = 1;
			shootangle = 20+140*facing;
			shootspeed = 7.3;
			shoottime = 13;
			delaytime = 4;
			circlehspeed = 0;
			circlevspeed = 0;
		}
	else if(attack_type = "dtilt")
		{
			placex = 5; 
			placey = 40; 
			shootdmg = 1;
			shootbkb = 1;
			shootkbg = 1;
			shootangle = 90;
			shootspeed = 7.3;
			shoottime = 13;
			delaytime = 4;
			circlehspeed = 0- (target.percent*0.01);
			circlevspeed = 0- (target.percent*0.03)-(target.percent > 125);
		}
	else if(attack_type = "utilt")
		{
			placex = -5; 
			placey = 60 + (target.percent*0.5); 
			shootdmg = 1;
			shootbkb = 1;
			shootkbg = 1;
			shootangle = 70+40*facing;
			shootspeed = 9;
			shoottime = 5;
			delaytime = 2;
			circlehspeed = 0 - ((target.percent > 110) * (target.percent*0.01));
			circlevspeed = 0 - ((target.percent > 110) * (target.percent*0.01));
		}
	else if(attack_type = "stilt")
		{
			placex = -25; 
			placey = 30; 
			shootdmg = 1.5;
			shootbkb = 1;
			shootkbg = 0.5;
			shootangle = 20+140*facing;
			shootspeed = 7.3;
			shoottime = 13;
			delaytime = 4;
			circlehspeed = 0;
			circlevspeed = 0;
		}
	else if(attack_type = "dsmash")
		{ 
			placex = -15; 
			placey = 30;
			shootdmg = 3.5;
			shootbkb = 2;
			shootkbg = 2;
			shootangle = 20+140*facing;
			shootspeed = 10;
			shoottime = 5;
			delaytime = 2;
			circlehspeed = 0 - (target.percent*0.03)-(target.percent > 125);
			circlevspeed = 0 - (target.percent*0.03)-(target.percent > 125);
		}
	else if(attack_type = "ssmash")
		{ 
			placex = -15; 
			placey = 35;
			shootdmg = 3.5;
			shootbkb = 2;
			shootkbg = 2;
			shootangle = 20+140*facing;
			shootspeed = 7.3;
			shoottime = 13;
			delaytime = 4;
			circlehspeed = 0;
			circlevspeed = 0;
		}
	else if(attack_type = "nair")
		{
			placex = 5; 
			placey = 40; 
			shootdmg = 1;
			shootbkb = 1;
			shootkbg = 1;
			shootangle = 20+140*facing;
			shootspeed = 7.3;
			shoottime = 13;
			delaytime = 4;
			circlehspeed = 0;
			circlevspeed = 0;
		}
	else if(attack_type = "dair")
		{
			placex = -15; 
			placey = 20; 
			shootdmg = 1;
			shootbkb = 1;
			shootkbg = 1;
			shootangle = 20+140*facing;
			shootspeed = 8;
			shoottime = 8;
			delaytime = 3;
			circlehspeed = 0 - (target.percent*0.02);
			circlevspeed = 0;
		}
	else if(attack_type = "fair")
		{
			placex = 5; 
			placey = 50; 
			shootdmg = 1;
			shootbkb = 1.5;
			shootkbg = 1;
			shootangle = 270;
			shootspeed = 7.3;
			shoottime = 5;
			delaytime = 2;
			circlehspeed = 0 - (target.percent*0.03)-(target.percent > 125);
			circlevspeed = 0 - (target.percent*0.03)-(target.percent > 125);
		}
	else if(attack_type = "uair")
		{
			placex = -25; 
			placey = 35; 
			shootdmg = 1;
			shootbkb = 1;
			shootkbg = 1.5;
			shootangle = 90;
			shootspeed = 7.3;
			shoottime = 13;
			delaytime = 4;
			circlehspeed = 0;
			circlevspeed = 0 - (target.percent*0.01)-(target.percent > 125);
		}
	else if(attack_type = "fthrow")
		{ 
			placex = -20; 
			placey = 40;
			shootdmg = 1.5;
			shootbkb = 1.5;
			shootkbg = 1.5;
			shootangle = 20+140*facing;
			shootspeed = 6;
			shoottime = 13;
			delaytime = 4;
			circlehspeed = 0;
			circlevspeed = 0;
		}
	else if(attack_type = "uthrow")
		{
			placex = -5; 
			placey = 60 + (target.percent*0.5); 
			shootdmg = 1;
			shootbkb = 1;
			shootkbg = 1;
			shootangle = 70+40*facing;
			shootspeed = 9;
			shoottime = 5;
			delaytime = 2;
			circlehspeed = 0 - ((target.percent > 110) * (target.percent*0.01));
			circlevspeed = 0 - ((target.percent > 110) * (target.percent*0.01));
		}
	else
		{
			placex = 5; 
			placey = 40; 
			shootdmg = 1;
			shootbkb = 1;
			shootkbg = 1;
			shootangle = 20+140*facing;
			shootspeed = 7.3;
			shoottime = 13;
			delaytime = 4;
			circlehspeed = 0;
			circlevspeed = 0;
		}
	
	
	batcircle = create_projectile(0,361,0,0,0,-1,punch1,obj_spark_hit3,0.8,0.8,placex,placey,self.id,30,summon);
	batcircle.sprite_index = batcircle_sprite;
	batcircle.image_xscale = 0.5*(1-facing*2)*size;
	batcircle.image_yscale = 0.5*size;
	batcircle.image_alpha = 0.75;
	batcircle.depth = -1;
	batcircle.hit = 2;
	batcircle.shootdmg = shootdmg;
	batcircle.shootbkb = shootbkb;
	batcircle.shootkbg = shootkbg;
	batcircle.shootangle = shootangle;
	batcircle.shootspeed = shootspeed;
	batcircle.shoottime = shoottime;
	batcircle.delaytime = delaytime;
	batcircle.circlehspeed = circlehspeed;
	batcircle.circlevspeed = circlevspeed;
	
	summonactive = 1;
	scarlet = 0;
	card_meter -= 1;
	
	if card_meter < 2 {bar = 0;}
}
//------------------------------------------------------------------------------------------------------------------------------------------
//Bat Circle Limiter: Prevents multiple batcircles from being out from one move
if attack_type = "none"
	{summonactive = 0;}
	
/*Servant Flyer Bullet Timer: Slows down the firing rate of the batcircle. Cannot fire while timer = 0
if bullettimer >= 1 
	{bullettimer -= 1;}
if bullettimer <= 0
	{bullettimer = 0;}*/

//Scarlet Mode Functions: GFX, Meter Drain, & more functions.
if scarlet > 0
	{ 
		//image_blend = c_red;
		after_image(1,c_red,0.11);
		after_image(2,c_red,0.1);
		after_image(3,c_red,0.09);
		after_image(4,c_red,0.08);
		after_image(5,c_red,0.07);
		after_image(6,c_red,0.06);
		after_image(7,c_red,0.05);
		after_image(8,c_red,0.04);
		after_image(9,c_red,0.03);
		after_image(10,c_red,0.02);
		after_image(11,c_red,0.01);
		
		offense = 1.25;
		defense = 0.5;
		
		if  attack_type != "final_smash"
			{bar -= 1.5;}
		
		if (card_meter < 1 && bar < 1) 
			{ scarlet = 0;}
	}	
if scarlet < 1
	{
		image_blend = c_white;
		offense = 1;
		defense = 1;		
	}
	
if state_type = "entry" || state_type = "respawn" || state_type = "out" || state_type = "dead" 
	{
		scarlet = 0;
		card_meter = 0;
		bar = 0;
	}
//-----------------------------------------------------------------------------------------------------------------------------------------	
///Hover & Special Regen
if air = 0 
{
	hover_time = 9999;
	candash = 1 + kaioken;
	if(floattime < maxfloattime ){floattime += 1 + scarlet;} 
	//floattemp = 1;
	canzair = 1;
	cansideb = 1;
	upbtemp = 0;
	divekicktemp = 0;
}

if (air = 0 || state_type = "flinch" || state_type = "air_flinch") 
{upb_used = 0;}

if state_type = "land" || state_type = "respawn" || state_type = "edge" || state_type = "stand"
    cansideb = 1;

if ((floattime <= 0 && air > 0) || state_type = "out" || state_type = "respawn" ) 
{
	hover = 0;
	hover_time = 0;
	hover_timer = 0;
}
//-----------------------------------------------------------------------------------------------------------------------------------------	
///Chain Combo System [Start]
if chaincombotimer >= 1 //chain combo timer countdown
	{chaincombotimer -= 1;}
if chaincombotimer <= 0
	{chaincombotimer = 0;}

if chaincombotimer >= 1 //chain combo check
	{chaincombo = 1}
else 
	{chaincombo = 0}
//-----------------------------------------------------------------------------------------------------------------------------------------	

//GFX BEGONE THOT!
if(state_type != "air_attack" && state_type != "attack")
{
	if (instance_exists(lordcradle)) {with (lordcradle){instance_destroy();}}
}

if(state_type != "air_attack" && state_type != "attack" && attack_type != "stilt")
{
	if (instance_exists(ftiltclaw)) {with (ftiltclaw){instance_destroy();}}
}

if(state_type != "air_attack" && state_type != "attack" && attack_type != "stilt")
{
	if (instance_exists(ftiltclaw1)) {with (ftiltclaw1){instance_destroy();}}
}

if(state_type != "air_attack" && state_type != "attack" && attack_type != "stilt")
{
	if (instance_exists(ftiltclaw2)) {with (ftiltclaw2){instance_destroy();}}
}

if(state_type != "air_attack" && state_type != "attack")
{
	if (instance_exists(powerspark)) {with (powerspark){instance_destroy();}}
}

if(state_type != "air_attack" && state_type != "attack")
{
	if (instance_exists(powerspark1)) {with (powerspark1){instance_destroy();}}
}

if(state_type != "air_attack" && state_type != "attack")
{
	if (instance_exists(stigmatizer)) {with (stigmatizer){instance_destroy();}}
}

///Floating During Step (from Skoops)
if godir = "up"{
variable -=0.2

if variable < -10
godir = "down"

}else if godir = "down"{
variable +=0.2

if variable > -2
godir = "up"

}
if sprite_index = stand_sprite || sprite_index = walk_sprite || sprite_index = run_sprite || (air = 0 && (sprite_index = air_dodge_sprite)) || sprite_index = roll_sprite {
shakey = variable
}


//-----------------------------------------------------------------------------------------------------------------------------------------	
//-----------------------------------------------------------------------------------------------------------------------------------------	
//-----------------------------------------------------------------------------------------------------------------------------------------	
//-----------------------------------------------------------------------------------------------------------------------------------------	
//-----------------------------------------------------------------------------------------------------------------------------------------	
///extra stuff to patch out later
if shottimer1 >= 1
{
shottimer1 -= 1;
}

if shottimer1 <= 0
{
	shottimer1 = 0;
}

if shottimer2 >= 1
{
shottimer2 -= 1;
}

if ((shottimer2 <= 0) || (air = 0))
{
	shottimer2 = 0;
}

if sidetime >= 1
{
sidetime -= 1
}

if sidetime <= 0
{
	sidetime = 0;
}

//BIG MARISA NEGRA CODE START
if ( dead || state_type == "out" )
  black_marisa = 0;

if ( black_marisa = 2 ) {
  smash_power = 0;
  size_target = min ( 2 , csize * 2 );
  size = size_target;
  size_transformation = 2;
  if ( size < csize * 2 )
    {
    offense = csize * 2 - 1;
    }
    else
    {
    offense = 1;
    }
  defense = 1.5;
  if ( black_marisa == 0 )
    {
    size_target = csize;
    size = csize;
    size_transformation = 0;
    }
}
//BIG MARISA NEGRA CODE END

if state_type = "land" || state_type = "respawn" || state_type = "edge" || state_type = "stand" {
    can_sideb = 1;
	}
if ( sprite_index == walk_sprite )
image_speed = 0.13;

if state_type = "entry" || state_type = "respawn" || state_type = "out" || state_type = "dead" {
btemp = 0
}
if btemp < 0
btemp = 0
if attack_type != "b"
btemp -= 0.04
