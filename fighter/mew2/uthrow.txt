if time = -1 {
hspeed = 0;
state_type = "attack";
attack_type = "uthrow";
image_speed = 0;
sprite_index = uthrow_sprite;
image_index = 0;
timer = 0;
time = 65;
timer_speed=1;
target.timer_speed = 0;
target.alarm[0] = 50
sound_play(uthrow_sound)
}
if timer < time {
switch ( timer )
{
case 2: image_index = 1; target.x = x + 28 * size * (1-facing*2); target.y = y - 3 * size; target.depth = depth - 1; break;
case 3: target.x = x + 21 * size * (1-facing*2); target.y = y - 4 * size; break;
case 4: image_index = 2; target.x = x + 14 * size * (1-facing*2); target.y = y - 5 * size; break;
case 5: target.x = x + 7 * size * (1-facing*2); target.y = y - 6 * size; break;
case 6: image_index = 3; target.x = x; target.y = y - 7 * size; break;
case 7: target.x = x - 7 * size * (1-facing*2); target.y = y - 8 * size; break;
case 8: image_index = 4; target.x = x - 14 * size * (1-facing*2); target.y = y - 9 * size; break;
case 9: target.x = x - 21 * size * (1-facing*2); target.y = y - 10 * size; break;
case 10: target.x = x - 28 * size * (1-facing*2); target.y = y - 11 * size; break;
case 11: target.x = x - 21 * size * (1-facing*2); target.y = y - 12 * size; target.depth = depth + 1; break;
case 12: target.x = x - 14 * size * (1-facing*2); target.y = y - 13 * size; break;
case 13: target.x = x - 7 * size * (1-facing*2); target.y = y - 14 * size; break;
case 14: target.x = x; target.y = y - 15 * size; break;
case 15: target.x = x + 7 * size * (1-facing*2); target.y = y - 16 * size; break;
case 16: target.x = x + 14 * size * (1-facing*2); target.y = y - 17 * size; break;
case 17: target.x = x + 21 * size * (1-facing*2); target.y = y - 18 * size; break;
case 18: target.x = x + 28 * size * (1-facing*2); target.y = y - 19 * size; break;
case 19: target.x = x + 21 * size * (1-facing*2); target.y = y - 20 * size; target.depth = depth - 1; break;
case 20: target.x = x + 14 * size * (1-facing*2); target.y = y - 21 * size; break;
case 21: target.x = x + 7 * size * (1-facing*2); target.y = y - 22 * size; break;
case 22: target.x = x; target.y = y - 23 * size; break;
case 23: target.x = x - 6 * size * (1-facing*2); target.y = y - 24 * size; break;
case 24: target.x = x - 12 * size * (1-facing*2); target.y = y - 25 * size; break;
case 25: target.x = x - 18 * size * (1-facing*2); target.y = y - 26 * size; break;
case 26: target.x = x - 24 * size * (1-facing*2); target.y = y - 27 * size; break;
case 27: target.x = x - 18 * size * (1-facing*2); target.y = y - 28 * size; target.depth = depth + 1; break;
case 28: target.x = x - 12 * size * (1-facing*2); target.y = y - 29 * size; break;
case 29: target.x = x - 6 * size * (1-facing*2); target.y = y - 30 * size; break;
case 30: target.x = x; target.y = y - 31 * size; break;
case 31: target.x = x + 4 * size * (1-facing*2); target.y = y - 32 * size; break;
case 32: target.x = x + 8 * size * (1-facing*2); target.y = y - 33 * size; break;
case 33: target.x = x + 12 * size * (1-facing*2); target.y = y - 34 * size; break;
case 34: target.x = x + 16 * size * (1-facing*2); target.y = y - 35 * size; break;
case 35: target.x = x + 12 * size * (1-facing*2); target.y = y - 36 * size; target.depth = depth - 1; break;
case 36: target.x = x + 8 * size * (1-facing*2); target.y = y - 37 * size; break;
case 37: target.x = x + 4 * size * (1-facing*2); target.y = y - 38 * size; break;
case 38: target.x = x; target.y = y - 39 * size; break;
case 39: target.x = x - 3 * size * (1-facing*2); target.y = y - 40 * size; break;
case 40: target.x = x - 6 * size * (1-facing*2); target.y = y - 41 * size; break;
case 41: target.x = x - 9 * size * (1-facing*2); target.y = y - 42 * size; break;
case 42: target.x = x - 12 * size * (1-facing*2); target.y = y - 43 * size; break;
case 43: target.x = x - 9 * size * (1-facing*2); target.y = y - 44 * size; target.depth = depth + 1; break;
case 44: target.x = x - 6 * size * (1-facing*2); target.y = y - 45 * size; break;
case 45: target.x = x - 3 * size * (1-facing*2); target.y = y - 46 * size; break;
case 46: target.x = x; target.y = y - 47 * size; break;
case 47: target.x = x; target.y = y - 47 * size; break;
case 48: target.x = x; target.y = y - 47 * size; image_index = 5; break;
case 54: image_index = 6; break;
case 56: image_index = 7; break;
case 58: image_index = 8; break;
case 60: image_index = 9; break;
}
if ( timer <= 1 )
{
target.x = x + 16 * size * (1-facing*2);
target.y = y;
}
if timer = 12 || timer = 16 || timer = 20 || timer = 24 || timer = 28 || timer = 32 || timer = 36 || timer = 40 || timer = 44
{
shakex = 0;
}
if timer = 10 || timer = 18 || timer = 26 || timer = 34 || timer = 42
{
shakex = 2 * (1-facing*2);
}
if timer = 14 || timer = 22 || timer = 30 || timer = 38
{
shakex = -2 * (1-facing*2);
}
    if timer = 48 
	{
        sound_play(uthrow_sound2);
        sound_play(choose(attack_voice1,attack_voice2,attack_voice3));
        create_throw_box(10,80+facing*20,5.75,7.4,1,1,-1,-1,0.6,0.75,2,45,self.id,1);
        hitbox.shake_type = 1
        hitbox.shake_ampl = 1.2
	hitbox.hit_stun = 15
	spark = instance_create(x , y - 48 * size,obj_spark_shockwave)
	spark.image_xscale = 0.35 * size;
	spark.image_yscale = 0.01 * size;
	spark. depth = -1;
	}
}

if (timer >= 48){
if (attack_success || target.object_index == obj_enemy) && (dontrepeat = 0 && obj_score_control.stocks[target.number-1] == 1){
				if ((target.weight <= .22 && target.percent > 85) || (target.weight > .22 && target.weight < .3 && target.percent > 95) || (target.weight > .3 && target.percent > 110)){
				killspark = instance_create(enemy.x-200,enemy.y-250,obj_spark);
				killspark.sprite_index = killspark_sprite;
				killspark.image_xscale = size * 0.75;
				killspark.image_yscale = size * 0.95;
				killspark.image_yscale = size * 0.95;
				killspark.image_index = 0;
				killspark.image_speed = 0.055;
				killspark.alarm[0] = 100;
				killspark.depth = depth + 2 ;
				sound_play(killscreen_voice);
				screen_shake(30,30);
				freezer  = instance_create(enemy.x,enemy.y,obj_freeze)
				effect_create_above(ef_ellipse,enemy.x,enemy.y+10,1,c_black)
				freezer.alarm[0] = 100
				spark = instance_create ( 0 , 0 , obj_camerazoom );
				spark.camera_l = enemy.x - 30;
				spark.camera_r = enemy.x + 30;
				spark.camera_u = enemy.y - 50;
				spark.camera_d = enemy.y;
				spark.camera_boundary_zoom = 120;
				spark.alarm[0] = 70;
				spark2 = instance_create(enemy.x+8*(1-facing*2),enemy.y-26,obj_spark_hit3)
				spark2.alarm[0] = 70
				dontrepeat = 1;
				}
				}
        
  }	           

if timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" {
    dontrepeat = 0;
    attack_type = "none";
    state_type = "stand";
    timer = 0;
    time =-1;
    }
        
