//----------------- Tipper Marth --------------------
if notip = 0 {
    if (state_type == "jump") {
        vspeed -= 0.1;
        state_type = "air_attack";
        attack_type = "fair";
        image_speed = 0;
        sprite_index = fair_sprite;
        image_index = 0;
        timer = 0;
        //size = image_xscale;
        time = 26;
        timer_speed = 1;
        //if (facing)
        xoff = 32; //Bigger is left
        effscale = xsize / 2.0
        if (facing == 1) {
            xoff = 34
        }
        yoff = 66; //Bigger is up
    }

    switch (timer) {
        case 1:
            image_index = 0;
            break;

        case 3:
            image_index = 1;
            break;
        case 4:
            image_index = 2;
            break;
            //case 3: image_index = 2; break;
        case 5:
            image_index = 3;
            play_attack_voice();
            sound_play(swingsnd3);
            create_hitbox2(9, 44 + facing * 92, 6.15, 3.25, 6, 7, slash2, obj_spark_slash4, 0.48, 0.31, 22.80, 39, self.id, 4, 1);
            hitbox2.image_angle = 320.44 - facing * 100.88;
            create_hitbox(10, 366 + facing, 4.5, 3, 6, 7, slash2, obj_spark_slash2, 0.58, 0.29, 17.50, 28.5, self.id, 4, 1);
            hitbox.image_angle = 22.91 + facing * 134.18;
            create_hitbox3(13, 67 + facing * 46, 5.25, 3.35, 6, 11, slash3, obj_spark_slash3, 0.8, 0.28, 23.20, 48, self.id, 4, 3);
            hitbox3.image_angle = 332.19 - facing * 127.38;
            hitbox3.hit_stun = 8;
            //image_index += 1;
            break;
        case 6:
            image_index = 4;
            hitbox.hitbox_x = size * (1 - (facing * 2)) * 15.80
            hitbox.hitbox_y = size * 17.80
            hitbox.image_xscale = size * 0.60
            hitbox.image_yscale = size * 0.36
            hitbox.image_angle = 330.95 - facing * 121.90;
            hitbox2.hitbox_x = size * (1 - (facing * 2)) * 30.5
            hitbox2.hitbox_y = size * 20.25
            hitbox2.image_xscale = size * 0.41
            hitbox2.image_yscale = size * 0.55
            hitbox2.image_angle = 0 + facing * 180;
            hitbox3.hitbox_x = size * (1 - (facing * 2)) * 39.10
            hitbox3.hitbox_y = size * 23.40
            hitbox3.image_xscale = size * 0.27
            hitbox3.image_yscale = size * 0.75
            hitbox3.image_angle = 0 + facing * 180;
            break;
        case 7:
            image_index = 5;
            hitbox.hitbox_x = size * (1 - (facing * 2)) * 11.50
            hitbox.hitbox_y = size * 13.70
            hitbox.image_xscale = size * 0.33
            hitbox.image_yscale = size * 0.58
            hitbox.image_angle = 23.89 + facing * 132.22;
            hitbox2.hitbox_x = size * (1 - (facing * 2)) * 22.20
            hitbox2.hitbox_y = size * 6.60
            hitbox2.image_xscale = size * 0.3
            hitbox2.image_yscale = size * 0.5
            hitbox2.image_angle = 316.70 - facing * 93.4;
            hitbox3.hitbox_x = size * (1 - (facing * 2)) * 30.80
            hitbox3.hitbox_y = size * 3.40
            hitbox3.image_xscale = size * 0.31
            hitbox3.image_yscale = size * 0.72
            hitbox3.image_angle = 318.30 - facing * 96.6;
            break;
        case 8:
            image_index = 6;
            hitbox.hitbox_x = size * (1 - (facing * 2)) * 3.90
            hitbox.hitbox_y = size * 15.10
            hitbox.image_xscale = size * 0.35
            hitbox.image_yscale = size * 0.48
            hitbox.image_angle = 334.23 - facing * 128.46;
            hitbox2.hitbox_x = size * (1 - (facing * 2)) * 1.5
            hitbox2.hitbox_y = size * 2.65
            hitbox2.image_xscale = size * 0.45
            hitbox2.image_yscale = size * 0.36
            hitbox2.image_angle = 339.65 - facing * 139.3;
            hitbox3.hitbox_x = size * (1 - (facing * 2)) * 2.20
            hitbox3.hitbox_y = size * -6.60
            hitbox3.image_xscale = size * 0.65
            hitbox3.image_yscale = size * 0.28
            hitbox3.image_angle = 350.56 - facing * 161.09;
            break;
        case 10:
            image_index = 7;
            break;
        case 11:
            image_index = 8;
            break;
        case 12:
            image_index = 9;
            break;
        case 14:
            image_index = 10;
            break;
        case 16:
            image_index = 11;
            break;
        case 18:
            image_index = 12;
            break;
        case 20:
            image_index = 13;
            break;
        case 23:
            interrupt = 1;
            break;
        case 26:

            break;
    }

    // Animate VFX - Tipper
	switch (timer){
		case 3:
			sword_trail = create_sword_trail2(self.id,1,10,25,10,30,sword_texture);
			sword_trail.visible_frames = 2;
			sword_trail.index = 0;
			break;
		case 4:
			sword_trail.index = 0;
			break;
		case 5:
			sword_trail.index = 2;
			break;
		case 6:
			sword_trail.index = 3;
			sword_trail.tip_radius = 10;
			sword_trail.base_radius = 4;
			recalculate_sword_trail(sword_trail,sword_trail.index);
			break;
		case 7:
			sword_trail.visible_frames = 3;
			sword_trail.index = 4;
			break;
		case 8:
			sword_trail.index = 5;
			break;
		case 10:
			sword_trail.index = 6;
			break;
		case 11:
			sword_trail.tip_radius = 2;
			recalculate_sword_trail(sword_trail,sword_trail.index);
			sword_trail.index = 7;
			break;
		case 12:
			sword_trail.index = 8;
			sword_trail.tip_radius = 1;
			recalculate_sword_trail(sword_trail,sword_trail.index);
			break;
		case 13:
			sword_trail.visible_frames = 2;
			break;
		case 14:
			with (sword_trail) instance_destroy();
			break;
	}
}



//----------------- Spread Marth --------------------
if notip = 1 {
    if (state_type == "jump") {
        vspeed -= 0.1;
        state_type = "air_attack";
        attack_type = "fair";
        image_speed = 0;
        sprite_index = fair_sprite;
        image_index = 0;
        timer = 0;
        //size = image_xscale;
        time = 38;
        timer_speed = 1;
        //if (facing)
        xoff = 32; //Bigger is left
        effscale = xsize / 2.0
        if (facing == 1) {
            xoff = 34
        }
        yoff = 66; //Bigger is up
    }

    switch (timer) {
        case 1:
            image_index = 0;
            break;
        case 3:
            image_index = 1;
            break;
        case 4:
            image_index = 2;
            break;
            //case 3: image_index = 2; break;
        case 5:
            play_attack_voice();
            sound_play(swingsnd3);
            create_hitbox2(10, 366 + facing, 5.35, 3.2, 6, 9, slash2, obj_spark_slash2, 0.48, 0.31, 22.80, 39, self.id, 4, 2);
            hitbox2.image_angle = 320.44 - facing * 100.88;
            hitbox2.hit_stun = 8
            create_hitbox(10, 366 + facing, 5.35, 3.2, 6, 9, slash2, obj_spark_slash2, 0.58, 0.29, 17.50, 28.5, self.id, 4, 2);
            hitbox.image_angle = 22.91 + facing * 134.18;
            hitbox.hit_stun = 8
            create_hitbox3(10, 366 + facing, 5.35, 3.2, 6, 9, slash2, obj_spark_slash2, 0.8, 0.28, 23.20, 48, self.id, 4, 2);
            hitbox3.image_angle = 332.19 - facing * 127.38;
            hitbox3.hit_stun = 8;
            image_index = 3;
            break;
        case 6:
            image_index = 4;
            hitbox.hitbox_x = size * (1 - (facing * 2)) * 15.80
            hitbox.hitbox_y = size * 17.80
            hitbox.image_xscale = size * 0.60
            hitbox.image_yscale = size * 0.36
            hitbox.image_angle = 330.95 - facing * 121.90;
            hitbox2.hitbox_x = size * (1 - (facing * 2)) * 30.5
            hitbox2.hitbox_y = size * 20.25
            hitbox2.image_xscale = size * 0.41
            hitbox2.image_yscale = size * 0.55
            hitbox2.image_angle = 0 + facing * 180;
            hitbox3.hitbox_x = size * (1 - (facing * 2)) * 39.10
            hitbox3.hitbox_y = size * 23.40
            hitbox3.image_xscale = size * 0.27
            hitbox3.image_yscale = size * 0.75
            hitbox3.image_angle = 0 + facing * 180;
            break;
        case 7:
            image_index = 5;
            hitbox.hitbox_x = size * (1 - (facing * 2)) * 11.50
            hitbox.hitbox_y = size * 13.70
            hitbox.image_xscale = size * 0.33
            hitbox.image_yscale = size * 0.58
            hitbox.image_angle = 23.89 + facing * 132.22;
            hitbox2.hitbox_x = size * (1 - (facing * 2)) * 22.20
            hitbox2.hitbox_y = size * 6.60
            hitbox2.image_xscale = size * 0.3
            hitbox2.image_yscale = size * 0.5
            hitbox2.image_angle = 316.70 - facing * 93.4;
            hitbox3.hitbox_x = size * (1 - (facing * 2)) * 30.80
            hitbox3.hitbox_y = size * 3.40
            hitbox3.image_xscale = size * 0.31
            hitbox3.image_yscale = size * 0.72
            hitbox3.image_angle = 318.30 - facing * 96.6;
            break;
        case 8:
            image_index = 6;
            hitbox.hitbox_x = size * (1 - (facing * 2)) * 3.90
            hitbox.hitbox_y = size * 15.10
            hitbox.image_xscale = size * 0.35
            hitbox.image_yscale = size * 0.48
            hitbox.image_angle = 334.23 - facing * 128.46;
            hitbox2.hitbox_x = size * (1 - (facing * 2)) * 1.5
            hitbox2.hitbox_y = size * 2.65
            hitbox2.image_xscale = size * 0.45
            hitbox2.image_yscale = size * 0.36
            hitbox2.image_angle = 339.65 - facing * 139.3;
            hitbox3.hitbox_x = size * (1 - (facing * 2)) * 2.20
            hitbox3.hitbox_y = size * -6.60
            hitbox3.image_xscale = size * 0.65
            hitbox3.image_yscale = size * 0.28
            hitbox3.image_angle = 350.56 - facing * 161.09;
            break;
        case 10:
            image_index = 7;
            break;
        case 11:
            image_index = 8;
            break;
        case 12:
            image_index = 9;
            break;
        case 14:
            image_index = 10;
            break;
        case 16:
            image_index = 11;
            break;
        case 18:
            image_index = 12;
            break;
        case 20:
            image_index = 13;
            break;
        case 35:
            interrupt = 1;
            break;
        case 38:

            break;
    }

    // Animate VFX - Spread
    switch (timer) {
        case 1:
            eff = create_sword_trail(self.id, 9, 30, spread_texture);
            eff.index = 0;
            //eff.max_frames -=1;
            break;
        case 2:
            eff.end_decay = 1;
            break;
        case 3:
            eff.index += 1;
            eff.end_decay = 0;
            break;
        case 4:
            eff.index += 1;
            //eff.max_frames += 1;
            eff.max_frames -= 1;
            break;
        case 5:
            eff.end_decay = 0.5;
            break;
        case 6:
            eff.index += 1;
            eff.end_decay = 0;
            break;
        case 7:
            eff.index += 1;
            break;
        case 8:
            eff.index += 1;
            break;
        case 9:
            eff.end_decay = 0.5;
            break
        case 10:
            eff.index += 1;
            eff.end_decay = 0;
            break;
            break;
        case 11:
            eff.index += 1;
            break;
        case 12:
            eff.index += 1;
            break;
        case 13:
            eff.end_decay = 1;
            break;
        case 14:
            eff.end_decay = 2;
            break;
        case 15:
            eff.end_decay = 3;
            break;
        case 16:
            with(eff) {
                instance_destroy();
            }
    }
} // End spread marth

//----------------- Centered Marth --------------------
if notip = 2 {
    if (state_type == "jump") {
        vspeed -= 0.1;
        state_type = "air_attack";
        attack_type = "fair";
        image_speed = 0;
        sprite_index = fair_sprite;
        image_index = 0;
        timer = 0;
        //size = image_xscale;
        time = 30;
        timer_speed = 1;
    }

    switch (timer) {
        case 1:
            image_index = 0;
            break;
        case 3:
            image_index = 1;
            break;
        case 4:
            image_index = 2;
            break;
            //case 3: image_index = 2; break;
        case 5:
            play_attack_voice();
            sound_play(swingsnd3);
            create_hitbox2(13, 42 + facing * 96, 6.15, 3.35, 6, 11, slash2, obj_spark_slash4, 0.48, 0.31, 22.80, 39, self.id, 4, 2);
            hitbox2.image_angle = 320.44 - facing * 100.88;
            create_hitbox(10, 42 + facing * 96, 5.25, 3.25, 6, 8, slash2, obj_spark_slash2, 0.58, 0.29, 17.50, 28.5, self.id, 4, 3);
            hitbox.image_angle = 22.91 + facing * 134.18;
            create_hitbox3(9, 42 + facing * 96, 4.5, 3, 6, 7, punch3, obj_spark_slash1, 0.8, 0.28, 23.20, 48, self.id, 4, 1);
            hitbox3.image_angle = 332.19 - facing * 127.38;
            hitbox2.hit_stun = 6;
            image_index = 3;
            break;
        case 6:
            image_index = 4;
            hitbox.hitbox_x = size * (1 - (facing * 2)) * 15.80
            hitbox.hitbox_y = size * 17.80
            hitbox.image_xscale = size * 0.60
            hitbox.image_yscale = size * 0.36
            hitbox.image_angle = 330.95 - facing * 121.90;
            hitbox2.hitbox_x = size * (1 - (facing * 2)) * 30.5
            hitbox2.hitbox_y = size * 20.25
            hitbox2.image_xscale = size * 0.41
            hitbox2.image_yscale = size * 0.55
            hitbox2.image_angle = 0 + facing * 180;
            hitbox3.hitbox_x = size * (1 - (facing * 2)) * 39.10
            hitbox3.hitbox_y = size * 23.40
            hitbox3.image_xscale = size * 0.27
            hitbox3.image_yscale = size * 0.75
            hitbox3.image_angle = 0 + facing * 180;
            break;
        case 7:
            image_index = 5;
            hitbox.hitbox_x = size * (1 - (facing * 2)) * 11.50
            hitbox.hitbox_y = size * 13.70
            hitbox.image_xscale = size * 0.33
            hitbox.image_yscale = size * 0.58
            hitbox.image_angle = 23.89 + facing * 132.22;
            hitbox2.hitbox_x = size * (1 - (facing * 2)) * 22.20
            hitbox2.hitbox_y = size * 6.60
            hitbox2.image_xscale = size * 0.3
            hitbox2.image_yscale = size * 0.5
            hitbox2.image_angle = 316.70 - facing * 93.4;
            hitbox3.hitbox_x = size * (1 - (facing * 2)) * 30.80
            hitbox3.hitbox_y = size * 3.40
            hitbox3.image_xscale = size * 0.31
            hitbox3.image_yscale = size * 0.72
            hitbox3.image_angle = 318.30 - facing * 96.6;
            break;
        case 8:
            image_index = 6;
            hitbox.hitbox_x = size * (1 - (facing * 2)) * 3.90
            hitbox.hitbox_y = size * 15.10
            hitbox.image_xscale = size * 0.35
            hitbox.image_yscale = size * 0.48
            hitbox.image_angle = 334.23 - facing * 128.46;
            hitbox2.hitbox_x = size * (1 - (facing * 2)) * 1.5
            hitbox2.hitbox_y = size * 2.65
            hitbox2.image_xscale = size * 0.45
            hitbox2.image_yscale = size * 0.36
            hitbox2.image_angle = 339.65 - facing * 139.3;
            hitbox3.hitbox_x = size * (1 - (facing * 2)) * 2.20
            hitbox3.hitbox_y = size * -6.60
            hitbox3.image_xscale = size * 0.65
            hitbox3.image_yscale = size * 0.28
            hitbox3.image_angle = 350.56 - facing * 161.09;
            break;
        case 10:
            image_index = 7;
            break;
        case 11:
            image_index = 8;
            break;
        case 12:
            image_index = 9;
            break;

        case 14:
            image_index = 10;
            break;
        case 16:
            image_index = 11;
            break;
        case 18:
            image_index = 12;
            break;
        case 20:
            image_index = 13;
            break;
        case 27:
            interrupt = 1;
            break;
        case 30:

            break;
    }

    // Animate VFX - Centered
    switch (timer) {
        case 1:
            eff = create_sword_trail(self.id, 9, 30, centered_texture);
            eff.index = 0;
            //eff.max_frames -=1;
            break;
        case 2:
            eff.end_decay = 1;
            break;
        case 3:
            eff.index += 1;
            eff.end_decay = 0;
            break;
        case 4:
            eff.index += 1;
            //eff.max_frames += 1;
            eff.max_frames -= 1;
            break;
        case 5:
            eff.end_decay = 0.5;
            break;
        case 6:
            eff.index += 1;
            eff.end_decay = 0;
            break;
        case 7:
            eff.index += 1;
            break;
        case 8:
            eff.index += 1;
            break;
        case 9:
            eff.end_decay = 0.5;
            break
        case 10:
            eff.index += 1;
            eff.end_decay = 0;
            break;
            break;
        case 11:
            eff.index += 1;
            break;
        case 12:
            eff.index += 1;
            break;
        case 13:
            eff.end_decay = 1;
            break;
        case 14:
            eff.end_decay = 2;
            break;
        case 15:
            eff.end_decay = 3;
            break;
        case 16:
            with(eff) {
                instance_destroy();
            }
    }
}


//----------------- Every Marth --------------------
if (attack_type == "none") {
    if (instance_exists(eff)) {
        with(eff) {
            instance_destroy();
        }
    }
}
if (timer >= time - 1 && state_type != "flinch" && state_type != "air_flinch") {
    //if (instance_exists(eff)){
    //  with (eff){
    //    instance_destroy();
    //  }
    //}
    attack_type = "none";
    sprite_index = jump_sprite;
    image_index = 5;
    image_speed = 0;

    if (air > 0) {
        state_type = "jump";
        //sprite_index = fall_sprite;
    } else {
        state_type = "stand";
    }
    timer = 0;
    time = -1;
    exit;
}

//if (instance_exists(eff)){
//  eff.x = x - xoff*size*(1-facing*2);
//  eff.y = y - yoff*size;
//}
if (air == 0) {
    if (instance_exists(eff)) {
        with(eff) {
            instance_destroy();
        }
    }
    state_type = "land";
    attack_type = "none";
    sprite_index = land_sprite;
    //image_index = 4;
    if notip = 0
    time = 7; // Tipper landing lag
    if notip = 1
    time = 10; // Spread landing lag
    if notip = 1 && timer > 29
    time = 5;
    if notip = 2
    time = 18; // Centered landing lag
    timer = 0;
}