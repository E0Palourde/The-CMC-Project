//----------------- Tipper Marth --------------------
if notip = 0 {
    if (state_type == "stand" || state_type == "run") {
        hspeed = 0;
        state_type = "attack";
        attack_type = "ssmash";
        image_speed = 0;
        sprite_index = ssmash_sprite;
        image_index = 0;
        timer = 0;
        time = 55;
        timer_speed = 1;
        charge_frame = 4;
        xoff = 21; //Bigger is left
        if facing = 1
        xoff = 22
        effscale = xsize / 2
        yoff = 58; //Bigger is up
        create_hurtbox_precise(self.id, 99, ssmash_mask);
    }

    switch (timer) {
        case 0:
            image_index = 0;
            break;
        case 3:
            image_index = 1;
            break;
        case 6:
            image_index = 2;
            break;
        case 8:
            image_index = 3;
            break;
        case 10:
            attacking = 0;
            sound_play(fsmash_voice);
            image_index = 4;
            sound_play(swingsnd3);
            create_hitbox(10, 366 + facing, 5.8, 6.1, 12, 10, slash1, obj_spark_slash3, 0.36, 0.47, 10.50, 35, self.id, 6, 2);
            hitbox.image_angle = 27.47 + facing * (180 - (2 * 27.47));
            create_hitbox2(14, 366 + facing, 6.25, 6.35, 14, 12, slash2, obj_spark_slash3, 0.34, 0.43, 1.40, 35, self.id, 6, 2);
            hitbox2.image_angle = 319.12 - facing * ((2 * 319.12) - 540);
            create_hitbox3(19, 366 + facing, 7.8, 6.5, 19, 15, slash3, obj_spark_slash3, 0.33, 0.41, -7, 28.70, self.id, 6, 3);
            hitbox3.image_angle = 295.56 - facing * ((2 * 295.56) - 540);
            hitbox3.hit_stun = 3;
            break;
        case 11:
            image_index = 5;
            hitbox.hitbox_x = size * (1 - (facing * 2)) * 23.10
            hitbox.hitbox_y = size * 32.90
            hitbox.image_xscale = size * 0.35
            hitbox.image_yscale = size * 0.54
            hitbox.image_angle = 337.62 - facing * ((2 * 337.62) - 540);
            hitbox2.hitbox_x = size * (1 - (facing * 2)) * 11
            hitbox2.hitbox_y = size * 38.60
            hitbox2.image_xscale = size * 0.48
            hitbox2.image_yscale = size * 0.5
            hitbox2.image_angle = 300.98 - facing * ((2 * 300.98) - 540);
            hitbox3.hitbox_x = size * (1 - (facing * 2)) * -1.50
            hitbox3.hitbox_y = size * 40.50
            hitbox3.image_xscale = size * 0.11
            hitbox3.image_yscale = size * 0.725
            hitbox3.image_angle = 308.19 - facing * ((2 * 308.19) - 540);
            hitbox3.sprite_index = spr_collision_bubble_ext
            //sword_trail = create_sword_trail(self.id, tip_x, tip_y, base_x, base_y, 6, 20, sword_texture);


            break;
        case 12:
            image_index = 6;
            hitbox.hitbox_x = size * (1 - (facing * 2)) * 30.10
            hitbox.hitbox_y = size * 17.50
            hitbox.image_xscale = size * 0.76
            hitbox.image_yscale = size * 0.32
            hitbox.image_angle = 0;
            hitbox2.hitbox_x = size * (1 - (facing * 2)) * 33.60
            hitbox2.hitbox_y = size * 27.30
            hitbox2.image_xscale = size * 0.13
            hitbox2.image_yscale = size * 0.64
            hitbox2.image_angle = 54.38 + facing * (180 - (2 * 54.38));
            hitbox2.sprite_index = spr_collision_bubble_ext2
            hitbox3.hitbox_x = size * (1 - (facing * 2)) * 36.60
            hitbox3.hitbox_y = size * 39.80
            hitbox3.image_xscale = size * 0.5
            hitbox3.image_yscale = size * 0.265
            hitbox3.image_angle = 331.34 - facing * ((2 * 331.34) - 540);

            break;
        case 13:
            image_index = 7;
            hitbox.hitbox_x = size * (1 - (facing * 2)) * 25.90
            hitbox.hitbox_y = size * 7
            hitbox.image_xscale = size * 0.34
            hitbox.image_yscale = size * 0.53
            hitbox.image_angle = 21.40 + facing * (180 - (2 * 21.40));
            hitbox2.hitbox_x = size * (1 - (facing * 2)) * 34.30
            hitbox2.hitbox_y = size * 9.70
            hitbox2.image_xscale = size * 0.18
            hitbox2.image_yscale = size * 0.63
            hitbox2.image_angle = 355 - facing * ((2 * 355) - 540);
            hitbox3.hitbox_x = size * (1 - (facing * 2)) * 51.50
            hitbox3.hitbox_y = size * 10.70
            hitbox3.image_xscale = size * 0.150
            hitbox3.image_yscale = size * 0.85
            hitbox3.image_angle = 350 - facing * ((2 * 350) - 540);
            screen_shake(1, 1);
            break;
        case 14:
            image_index = 8;
            break;
        case 16:
            image_index = 9;
            break;
        case 18:
            image_index = 10;
            break;
        case 20:
            image_index = 11;
            break;
        case 22:
            image_index = 12;
            break;
        case 24:
            image_index = 13;
            break;
        case 26:
            image_index = 14;
            break;

        case 28:
            image_index = 15;
            break;
        case 31:
            image_index = 16;
            break;
        case 34:
            image_index = 17;
            break;
        case 37:
            image_index = 18;
            break;
        case 40:
            image_index = 19;
            break;
        case 42:
            interrupt = 1;
            break;
        case 45:
            attack_type = "none";
            state_type = "stand";
            timer = 0;
            time = -1;
            break;
    } // End Tipper Timline

    //Animate VFX (Tipper)
    switch (timer) {
		case 10: 
			sword_trail = create_sword_trail2(self.id,4,7,20,7,30,sword_texture);
			sword_trail.visible_frames = 3;
			sword_trail.index = 1;
			break;
		case 11:
			sword_trail.index = 2;
			break;
		case 12:
			sword_trail.index = 3;
			break;
		case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21:
			sword_trail.visible_frames -= 3/10;
			break;
		case 22:
			with (sword_trail) {
				instance_destroy();
			}
			break;
    }

} // End Tipper

//----------------- Spread Marth --------------------
if notip = 1 {
    if (state_type == "stand" || state_type == "run") {
        hspeed = 0;
        state_type = "attack";
        attack_type = "ssmash";
        image_speed = 0;
        sprite_index = ssmash_sprite;
        image_index = 0;
        timer = 0;
        time = 45;
        timer_speed = 1;
        charge_frame = 4;
        create_hurtbox_precise(self.id, 99, ssmash_mask);

    }

    switch (timer) {
        case 0:
            image_index = 0;
            break;
        case 3:
            image_index = 1;
            break;
        case 6:
            image_index = 2;
            break;
        case 8:
            image_index = 3;
            break;
        case 10:
            attacking = 0;
            sound_play(fsmash_voice);
            image_index = 4;
            sound_play(swingsnd3);
            create_hitbox(16, 366 + facing, 6, 7.3, 17, 14, slash3, obj_spark_slash3, 0.36, 0.47, 10.50, 35, self.id, 6, 3);
            hitbox.image_angle = 27.47 + facing * (180 - (2 * 27.47));
            create_hitbox2(16, 366 + facing, 6, 7.3, 17, 14, slash3, obj_spark_slash3, 0.34, 0.43, 1.40, 35, self.id, 6, 3);
            hitbox2.image_angle = 319.12 - facing * ((2 * 319.12) - 540);
            create_hitbox3(16, 366 + facing, 6, 7.3, 17, 14, slash3, obj_spark_slash3, 0.33, 0.41, -7, 28.70, self.id, 6, 3);
            hitbox3.image_angle = 295.56 - facing * ((2 * 295.56) - 540);
            if notip = 1 {
                hitbox.damage = 17
                hitbox2.damage = 17
                hitbox3.damage = 17
                hitbox.bkb = 5.9
                hitbox2.bkb = 5.9
                hitbox3.bkb = 5.9
                hitbox.kbg = 6.9
                hitbox2.kbg = 7
                hitbox3.kbg = 7
                hitbox.shield_damage = 17
                hitbox2.shield_damage = 17
                hitbox3.shield_damage = 17
                hitbox.hitlag_frames = 14
                hitbox2.hitlag_frames = 14
                hitbox3.hitlag_frames = 14
            }
            break;
        case 11:
            image_index = 5;
            hitbox.hitbox_x = size * (1 - (facing * 2)) * 23.10
            hitbox.hitbox_y = size * 32.90
            hitbox.image_xscale = size * 0.35
            hitbox.image_yscale = size * 0.54
            hitbox.image_angle = 337.62 - facing * ((2 * 337.62) - 540);
            hitbox2.hitbox_x = size * (1 - (facing * 2)) * 11
            hitbox2.hitbox_y = size * 38.60
            hitbox2.image_xscale = size * 0.48
            hitbox2.image_yscale = size * 0.5
            hitbox2.image_angle = 300.98 - facing * ((2 * 300.98) - 540);
            hitbox3.hitbox_x = size * (1 - (facing * 2)) * -1.50
            hitbox3.hitbox_y = size * 40.50
            hitbox3.image_xscale = size * 0.11
            hitbox3.image_yscale = size * 0.725
            hitbox3.image_angle = 308.19 - facing * ((2 * 308.19) - 540);
            hitbox3.sprite_index = spr_collision_bubble_ext
            break;
        case 12:
            image_index = 6;
            hitbox.hitbox_x = size * (1 - (facing * 2)) * 30.10
            hitbox.hitbox_y = size * 17.50
            hitbox.image_xscale = size * 0.76
            hitbox.image_yscale = size * 0.32
            hitbox.image_angle = 0;
            hitbox2.hitbox_x = size * (1 - (facing * 2)) * 33.60
            hitbox2.hitbox_y = size * 27.30
            hitbox2.image_xscale = size * 0.13
            hitbox2.image_yscale = size * 0.64
            hitbox2.image_angle = 54.38 + facing * (180 - (2 * 54.38));
            hitbox2.sprite_index = spr_collision_bubble_ext2
            hitbox3.hitbox_x = size * (1 - (facing * 2)) * 36.60
            hitbox3.hitbox_y = size * 39.80
            hitbox3.image_xscale = size * 0.5
            hitbox3.image_yscale = size * 0.265
            hitbox3.image_angle = 331.34 - facing * ((2 * 331.34) - 540);
            break;
        case 13:
            image_index = 7;

            hitbox.hitbox_x = size * (1 - (facing * 2)) * 25.90
            hitbox.hitbox_y = size * 7
            hitbox.image_xscale = size * 0.34
            hitbox.image_yscale = size * 0.53
            hitbox.image_angle = 21.40 + facing * (180 - (2 * 21.40));
            hitbox2.hitbox_x = size * (1 - (facing * 2)) * 34.30
            hitbox2.hitbox_y = size * 9.70
            hitbox2.image_xscale = size * 0.18
            hitbox2.image_yscale = size * 0.63
            hitbox2.image_angle = 355 - facing * ((2 * 355) - 540);
            hitbox3.hitbox_x = size * (1 - (facing * 2)) * 51.50
            hitbox3.hitbox_y = size * 10.70
            hitbox3.image_xscale = size * 0.150
            hitbox3.image_yscale = size * 0.85
            hitbox3.image_angle = 350 - facing * ((2 * 350) - 540);
            screen_shake(1, 1);
            break;
        case 14:
            image_index = 8;
            break;
        case 16:
            image_index = 9;
            break;
        case 18:
            image_index = 10;
            break;
        case 20:
            image_index = 11;
            break;
        case 22:
            image_index = 12;
            break;
        case 24:
            image_index = 13;
            break;
        case 26:
            image_index = 14;
            break;

        case 28:
            image_index = 15;
            break;
        case 31:
            image_index = 16;
            break;
        case 34:
            image_index = 17;
            break;
        case 37:
            image_index = 18;
            break;
        case 40:
            image_index = 19;
            break;
        case 45:
            attack_type = "none";
            state_type = "stand";
            timer = 0;
            time = -1;
            break;
    }
    //Animate VFX (Spread)
    switch (timer) {
        case 6: sword_trail = create_sword_trail(self.id, 6, 30, spread_texture); sword_trail.index = 0; break;
        case 8: sword_trail.index = 1; break;
        case 10: sword_trail.index = 2; break;
        case 11: sword_trail.index = 3; sword_trail.depth = depth - 1; break;
        case 12: sword_trail.index = 4; break;
        case 13: sword_trail.index = 5; break;
        case 14: sword_trail.end_decay = 0.33; break;
        case 15: sword_Trail.end_decay = 0.66; break;
        case 16: sword_trail.end_decay = 1; break;
        case 17: sword_trail.end_decay = 1.5; break;
        case 18: sword_trail.end_decay = 2; break;
        case 19: sword_trail.end_decay = 2.5; break;
        case 20: sword_trail.end_decay = 3; break;
        case 22: sword_trail.end_decay = 3.5; break;
        case 22:
              with(sword_trail) {
                instance_destroy();
            }
            break;
    }
} // End Spread

//----------------- Centered Marth --------------------
if notip = 2 {
    if (state_type == "stand" || state_type == "run") {
        hspeed = 0;
        state_type = "attack";
        attack_type = "ssmash";
        image_speed = 0;
        sprite_index = ssmash_sprite;
        image_index = 0;
        timer = 0;
        time = 45;
        timer_speed = 1;
        charge_frame = 4;
		create_hurtbox_precise(self.id, 99, ssmash_mask);

    }
    

    switch (timer) {
        case 0:
            image_index = 0;
            break;
        case 3:
            image_index = 1;
            break;
        case 6:
            image_index = 2;
            break;
        case 8:
            image_index = 3;
            break;
        case 10:
            attacking = 0;
            sound_play(fsmash_voice);
            image_index = 4;
            sound_play(swingsnd3);
            create_hitbox2(18, 366 + facing, 6, 7.5, 19, 17, slash2, obj_spark_slash2, 0.34, 0.43, 1.40, 35, self.id, 6, 3);
            hitbox2.image_angle = 319.12 - facing * ((2 * 319.12) - 540);
            create_hitbox(14, 366 + facing, 6, 5.9, 12, 9, slash3, obj_spark_slash4, 0.36, 0.47, 10.50, 35, self.id, 6, 3);
            hitbox.image_angle = 27.47 + facing * (180 - (2 * 27.47));
            create_hitbox3(8, 366 + facing, 5.5, 5.8, 12, 9, punch3, obj_spark_slash1, 0.33, 0.41, -7, 28.70, self.id, 6, 2);
            hitbox3.image_angle = 295.56 - facing * ((2 * 295.56) - 540);
            if notip = 2 {
                hitbox.damage = 19
                hitbox2.damage = 14
                hitbox3.damage = 10
                hitbox.bkb = 6
                hitbox2.bkb = 6
                hitbox3.bkb = 5.5
                hitbox.kbg = 7.5
                hitbox2.kbg = 5
                hitbox3.kbg = 4.5
                hitbox.shield_damage = 19
                hitbox2.shield_damage = 12
                hitbox3.shield_damage = 12
                hitbox.hitlag_frames = 17
                hitbox2.hitlag_frames = 9
                hitbox3.hitlag_frames = 12
                hitbox.sfx = slash3
                hitbox2.sfx = slash2
                hitbox3.sfx = punch3
            }
            break;
        case 11:
            image_index = 5;
            hitbox.hitbox_x = size * (1 - (facing * 2)) * 23.10
            hitbox.hitbox_y = size * 32.90
            hitbox.image_xscale = size * 0.35
            hitbox.image_yscale = size * 0.54
            hitbox.image_angle = 337.62 - facing * ((2 * 337.62) - 540);
            hitbox2.hitbox_x = size * (1 - (facing * 2)) * 11
            hitbox2.hitbox_y = size * 38.60
            hitbox2.image_xscale = size * 0.48
            hitbox2.image_yscale = size * 0.5
            hitbox2.image_angle = 300.98 - facing * ((2 * 300.98) - 540);
            hitbox3.hitbox_x = size * (1 - (facing * 2)) * -1.50
            hitbox3.hitbox_y = size * 40.50
            hitbox3.image_xscale = size * 0.11
            hitbox3.image_yscale = size * 0.725
            hitbox3.image_angle = 308.19 - facing * ((2 * 308.19) - 540);
            hitbox3.sprite_index = spr_collision_bubble_ext
            break;
        case 12:
            image_index = 6;
            hitbox.hitbox_x = size * (1 - (facing * 2)) * 30.10
            hitbox.hitbox_y = size * 17.50
            hitbox.image_xscale = size * 0.76
            hitbox.image_yscale = size * 0.32
            hitbox.image_angle = 0;
            hitbox2.hitbox_x = size * (1 - (facing * 2)) * 33.60
            hitbox2.hitbox_y = size * 27.30
            hitbox2.image_xscale = size * 0.13
            hitbox2.image_yscale = size * 0.64
            hitbox2.image_angle = 54.38 + facing * (180 - (2 * 54.38));
            hitbox2.sprite_index = spr_collision_bubble_ext2
            hitbox3.hitbox_x = size * (1 - (facing * 2)) * 36.60
            hitbox3.hitbox_y = size * 39.80
            hitbox3.image_xscale = size * 0.5
            hitbox3.image_yscale = size * 0.265
            hitbox3.image_angle = 331.34 - facing * ((2 * 331.34) - 540);
            break;
        case 13:
            image_index = 7;
            hitbox.hitbox_x = size * (1 - (facing * 2)) * 25.90
            hitbox.hitbox_y = size * 7
            hitbox.image_xscale = size * 0.34
            hitbox.image_yscale = size * 0.53
            hitbox.image_angle = 21.40 + facing * (180 - (2 * 21.40));
            hitbox2.hitbox_x = size * (1 - (facing * 2)) * 34.30
            hitbox2.hitbox_y = size * 9.70
            hitbox2.image_xscale = size * 0.18
            hitbox2.image_yscale = size * 0.63
            hitbox2.image_angle = 355 - facing * ((2 * 355) - 540);
            hitbox3.hitbox_x = size * (1 - (facing * 2)) * 51.50
            hitbox3.hitbox_y = size * 10.70
            hitbox3.image_xscale = size * 0.150
            hitbox3.image_yscale = size * 0.85
            hitbox3.image_angle = 350 - facing * ((2 * 350) - 540);
            screen_shake(1, 1);
            break;
        case 14:
            image_index = 8;
            break;
        case 16:
            image_index = 9;
            break;
        case 18:
            image_index = 10;
            break;
        case 20:
            image_index = 11;
            break;
        case 22:
            image_index = 12;
            break;
        case 24:
            image_index = 13;
            break;
        case 26:
            image_index = 14;
            break;

        case 28:
            image_index = 15;
            break;
        case 31:
            image_index = 16;
            break;
        case 34:
            image_index = 17;
            break;
        case 37:
            image_index = 18;
            break;
        case 40:
            image_index = 19;
            break;
        case 45:
            attack_type = "none";
            state_type = "stand";
            timer = 0;
            time = -1;
            break;
    } 
    
    //Animate VFX (Centered)
    switch (timer) {
        case 6: sword_trail = create_sword_trail(self.id, 6, 30, centered_texture); sword_trail.index = 0; break;
        case 8: sword_trail.index = 1; break;
        case 10: sword_trail.index = 2; break;
        case 11: sword_trail.index = 3; sword_trail.depth = depth - 1; break;
        case 12: sword_trail.index = 4; break;
        case 13: sword_trail.index = 5; break;
        case 14: sword_trail.end_decay = 0.33; break;
        case 15: sword_Trail.end_decay = 0.66; break;
        case 16: sword_trail.end_decay = 1; break;
        case 17: sword_trail.end_decay = 1.5; break;
        case 18: sword_trail.end_decay = 2; break;
        case 19: sword_trail.end_decay = 2.5; break;
        case 20: sword_trail.end_decay = 3; break;
        case 22: sword_trail.end_decay = 3.5; break;
        case 22:
              with(sword_trail) {
                instance_destroy();
            }
            break;
    }
} // End Cenetered
instance_exists(hitbox3){
if (notip = 0){
if ((attack_success) || target.object_index == obj_enemy) && (dontrepeat = 0) && (distance_to_object(target < 1 )) && obj_score_control.stocks[target.number-1] == 1 {
				if ((target.weight <= .22 && target.percent > 40) || (target.weight > .22 && target.weight < .3 && target.percent > 50) || (target.weight > .3 && target.percent > 60)){
			    killspark = instance_create(enemy.x-200,enemy.y-170,obj_spark);
				killspark.sprite_index = killspark_sprite;
				killspark.image_xscale = size * 0.65;
				killspark.image_yscale = size * 0.85;
	            killspark.image_xscale = size * 0.45;
				killspark.image_yscale = size * 0.65;
                killspark.image_xscale = size * 0.65;

				killspark.image_index = 0;
				killspark.image_speed = 0.045;
				killspark.alarm[0] = 80;
				killspark.depth = depth + 5 ;
				sound_play(killscreen_voice);
				screen_shake(30,30);
				freezer  = instance_create(enemy.x,enemy.y,obj_freeze)
				freezer2  = instance_create(x,y,obj_freeze)
				effect_create_above(ef_ellipse,enemy.x,enemy.y+10,1,c_black)
				freezer.alarm[0] = 80
				freezer2.alarm[0] = 120
				spark = instance_create ( 0 , 0 , obj_camerazoom );
				spark.camera_l = enemy.x - 50;
				spark.camera_r = enemy.x + 50;
				spark.camera_u = enemy.y - 80;
				spark.camera_d = enemy.y;
				spark.camera_boundary_zoom = 20;
				spark.alarm[0] = 60;
				spark2 = instance_create(enemy.x+8*(1-facing*2),enemy.y-26,obj_spark_hit3)
				spark2.alarm[0] = 50
				dontrepeat = 1;
				}
				}
}
}
  if (timer >= time -1 && state_type != "flinch" && state_type != "air_flinch") {
  dontrepeat = 0
  }