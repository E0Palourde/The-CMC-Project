//----------------- Tipper Marth --------------------
if notip = 0 {
    if (state_type == "stand") {
        hspeed = 0;
        state_type = "attack";
        attack_type = "jab";
        image_speed = 0;
        sprite_index = jab_sprite;
        image_index = 0;
        timer = 0;
        time = 1024;
        timer_speed = 1;
        change = 0;
        xoff = -106; //Bigger is left
        if facing = 1
        xoff = -105
        effscale = xsize / 2.0
        yoff = 101; //Bigger is up
    }

    switch (timer) {
        case 1:
            image_index = 1;
            break;
        case 2:
            image_index = 2;
            break;
        case 3:
            image_index = 3;
            break;
        case 4:
            attacking = 0;
            image_index = 4;
            sound_play(swingsnd1);
            create_hitbox(4, 70 + 40 * facing, 2.4, 0, 3, 4, slash1, obj_spark_slash1, 0.55, 0.38, 23.10, 23.10, self.id, 2, 1);
            hitbox.image_angle = 349.26 - facing * ((2 * 349.26) - 540);
            create_hitbox2(4, 70 + 40 * facing, 2.4, 0, 3, 4, slash1, obj_spark_slash1, 0.35, 0.45, 35, 15, self.id, 2, 1);
            hitbox2.image_angle = 230 + facing * (540 - (2 * 230));
            hitbox2.sprite_index = spr_collision_bubble_ext
            create_hitbox3(6, 70 + 40 * facing, 2.6, 0, 3, 5, slash2, obj_spark_slash2, 0.5, 0.28, 42, 8, self.id, 2, 2);
            hitbox3.image_angle = 220 + facing * (540 - (2 * 220));
            hitbox3.sprite_index = spr_collision_bubble_ext
            hitbox.di = 0.3;
            hitbox2.di = 0.3;
            hitbox3.di = 0.3;
            hitbox.hit_stun = 6 * size;
            hitbox2.hit_stun = 6 * size;
            hitbox3.hit_stun = 6 * size;
            break;
        case 5:
            hitbox.image_xscale = 0.60 * (1 - facing * 2) * size;
            hitbox.image_yscale = 0.37 * size;
            hitbox.hitbox_x = 23.10 * (1 - facing * 2) * size;
            hitbox.hitbox_y = 32.20 * size;
            hitbox.image_angle = 28.07 + facing * (180 - (2 * 28.07));
            hitbox2.image_xscale = 0.31 * (1 - facing * 2) * size;
            hitbox2.image_yscale = 0.38 * size;
            hitbox2.hitbox_x = 38.30 * (1 - facing * 2) * size;
            hitbox2.hitbox_y = 33.50 * size;
            hitbox2.image_angle = 300 - facing * ((2 * 300) - 540);
            hitbox3.image_xscale = 0.38 * (1 - facing * 2) * size;
            hitbox3.image_yscale = 0.35 * size;
            hitbox3.hitbox_x = 50 * (1 - facing * 2) * size;
            hitbox3.hitbox_y = 35 * size;
            hitbox3.image_angle = 300 - facing * ((2 * 300) - 540);
            image_index = 5;
            break;
        case 6:
            hitbox.image_xscale = 0.56 * (1 - facing * 2) * size;
            hitbox.image_yscale = 0.37 * size;
            hitbox.hitbox_x = 2.80 * (1 - facing * 2);
            hitbox.hitbox_y = 31.50 * size;
            hitbox.image_angle = 349.77 - facing * ((2 * 349.77) - 540);
            hitbox2.image_xscale = 0.48 * (1 - facing * 2) * size;
            hitbox2.image_yscale = 0.46 * size;
            hitbox2.hitbox_x = 11.40 * (1 - facing * 2) * size;
            hitbox2.hitbox_y = 43.60 * size;
            hitbox2.image_angle = 3 + facing * (180 - (2 * 3));
            hitbox3.image_xscale = 0.6 * (1 - facing * 2) * size;
            hitbox3.image_yscale = 0.4 * size;
            hitbox3.hitbox_x = 17.40 * (1 - facing * 2) * size;
            hitbox3.hitbox_y = 54.50 * size;
            hitbox3.image_angle = 353.33 - facing * ((2 * 353.33) - 540);
            image_index = 6;
            break;
        case 7:
            image_index = 7;
            break;
        case 12:
            image_index = 8;
            break;
        case 17:
            image_index = 9;
            break;
        case 22:
            image_index = 10;
            break;

        case 101:
            sprite_index = jab2_sprite;
            xoff = -81; //Bigger is left
            if facing = 1
            xoff = -80
            effscale = xsize / 2.0
            yoff = 80; //Bigger is up
            image_index = 0;
            break;
        case 105:
            eff = create_blur(x, y, self.id);
            eff.sprite_index = jab2_effect_spr;
            //eff.image_xscale = size;
            eff.image_xscale = (effscale * size) * (-1) * (1 - facing * 2);
            eff.image_yscale = (effscale * size);
            eff.x = x - xoff * size * (1 - facing * 2);
            eff.y = y - yoff * size;
            eff.image_speed = 0;
            eff.image_index = 0;
            eff.alarm[0] = 40;
            eff.snap = self.id
            eff.depth = -2;
            sound_play(swingsnd2);
            attacking = 0;
            image_index = 1;
            create_hitbox(4, 70 + 40 * facing, 4.4, 3, 3, 4, slash1, obj_spark_slash1, 0.49, 0.37, 18.90, 21.70, self.id, 2, 1);
            hitbox.image_angle = 344.22 - facing * ((2 * 344.22) - 540);
            create_hitbox2(4, 70 + 40 * facing, 4.4, 3, 3, 4, slash1, obj_spark_slash1, 0.2, 0.45, 28.10, 13.20, self.id, 2, 1);
            hitbox2.image_angle = 340 - facing * ((2 * 340) - 540);
            hitbox2.sprite_index = spr_collision_bubble_ext
            create_hitbox3(6, 70 + 40 * facing, 4.6, 3, 3, 5, slash2, obj_spark_slash2, 0.1, 0.380, 34.60, 13.10, self.id, 2, 2);
            hitbox3.image_angle = 340 - facing * ((2 * 340) - 540);
            hitbox3.sprite_index = spr_collision_bubble_ext2
            create_hitbox4(6, 70 + 40 * facing, 4.6, 3, 3, 5, slash2, obj_spark_slash2, 0.1, 0.380, 34.60, 13.10, self.id, 1, 2);
            hitbox4.image_angle = 340 - facing * ((2 * 340) - 540);
            hitbox4.sprite_index = spr_collision_bubble_ext2
            hitbox.di = 0.3;
            hitbox2.di = 0.3;
            hitbox3.di = 0.3;
            hitbox4.di = 0.3;
            break;
        case 106:
            eff.image_speed = 0;
            eff.image_index = 1;
            image_index = 2;
            hitbox.image_xscale = 0.53 * (1 - facing * 2) * size;
            hitbox.image_yscale = 0.33 * size;
            hitbox.hitbox_x = 17.10 * (1 - facing * 2) * size;
            hitbox.hitbox_y = 31.10 * size;
            hitbox.image_angle = 6.34 + facing * (180 - (2 * 6.34));
            hitbox2.image_xscale = 0.19 * (1 - facing * 2) * size;
            hitbox2.image_yscale = 0.6 * size;
            hitbox2.hitbox_x = 33.20 * (1 - facing * 2) * size;
            hitbox2.hitbox_y = 34.50 * size;
            hitbox2.image_angle = 55 + facing * (180 - (2 * 55));
            hitbox3.image_xscale = 0.11 * (1 - facing * 2) * size;
            hitbox3.image_yscale = 0.58 * size;
            hitbox3.hitbox_x = 36.80 * (1 - facing * 2) * size;
            hitbox3.hitbox_y = 39.80 * size;
            hitbox3.image_angle = 55.97 + facing * (180 - (2 * 55.97));
            hitbox4.image_xscale = 0.07 * (1 - facing * 2) * size;
            hitbox4.image_yscale = 0.55 * size;
            hitbox4.hitbox_x = 44.80 * (1 - facing * 2) * size;
            hitbox4.hitbox_y = 28.80 * size;
            hitbox4.image_angle = 0;
            break;
        case 107:
            eff.image_speed = 0;
            eff.image_index = 2;
            image_index = 3;
            hitbox.image_xscale = 0.36 * (1 - facing * 2) * size;
            hitbox.image_yscale = 0.50 * size;
            hitbox.hitbox_x = 5 * (1 - facing * 2) * size;
            hitbox.hitbox_y = 30 * size;
            hitbox.image_angle = 28.16 + facing * (180 - (2 * 28.16));
            hitbox2.image_xscale = 0.32 * (1 - facing * 2) * size;
            hitbox2.image_yscale = 0.25 * size;
            hitbox2.hitbox_x = 6.40 * (1 - facing * 2) * size;
            hitbox2.hitbox_y = 43.10 * size;
            hitbox2.image_angle = 26.10 + facing * (180 - (2 * 26.10));
            hitbox3.image_xscale = 0.37 * (1 - facing * 2) * size;
            hitbox3.image_yscale = 0.26 * size;
            hitbox3.hitbox_x = -1 * (1 - facing * 2) * size;
            hitbox3.hitbox_y = 47.20 * size;
            hitbox3.image_angle = 8.98 + facing * (180 - (2 * 8.98));
            break;
        case 108:
            eff.image_speed = 0;
            eff.image_index = 3;
            image_index = 4;
            break;
        case 110:
            with(eff) {
                instance_destroy();
            }
            break;
        case 111:
            image_index = 5;
            break;
        case 114:
            image_index = 6;
            break;
        case 117:
            image_index = 7;
            break;
        case 120:
            image_index = 8;
            break;

        case 26:
            interrupt = 1;
            break;
        case 127:
            interrupt = 1;
            break;
        case 27:
        case 128:
            attack_type = "none";
            state_type = "stand";
            timer = 0;
            time = -1;
            break;

            if (attack_type == "none") {
                if (instance_exists(eff)) {
                    with(eff) {
                        instance_destroy();
                    }
                }
            }
    }

    // Animate VFX
    switch (timer){
      case 1: eff = create_sword_trail(self.id, 9, 30, sword_texture); break;
      case 2: eff.index = 1; break;
      case 3: eff.index = 2; break;
      case 4: eff.index = 3; break;
      case 5: eff.index = 4; break;
      case 6: eff.index = 5; break;
      case 7: eff.index = 6; break;
      case 8: eff.end_decay = 0.25; break;
      case 9: eff.end_decay = 0.5; break;
      case 10: eff.end_decay = 0.75; break;
      case 11: eff.end_decay = 1; break;
      case 12: eff.index = 7; eff.end_decay = 0; break;
      case 13: eff.end_decay = 1; break;
      case 14: eff.end_decay = 2; break;
      case 15: eff.end_decay = 2.5; break;
      case 16: with (eff) { instance_destroy(); } break;
    }

    if (timer > 7 && timer < 27 && (attacking || (ai && random(10) < 4))) {
        change = 1;
    }

    if (timer >= 20 && timer < 27 && change == 1) {
        timer = 100;
        change = 0;
        with(eff) {
            instance_destroy();
        }
    }
} // End Tipper

//----------------- Spread Marth --------------------
if notip = 1 {
    if (state_type == "stand") {
        hspeed = 0;
        state_type = "attack";
        attack_type = "jab";
        image_speed = 0;
        sprite_index = jab_sprite;
        image_index = 0;
        timer = 0;
        time = 1024;
        timer_speed = 1;
        change = 0;
        xoff = -106; //Bigger is left
        if facing = 1
        xoff = -105
        effscale = xsize / 2.0
        yoff = 101; //Bigger is up
    }

    switch (timer) {
        case 1:
            image_index = 1;
            break;
        case 2:
            image_index = 2;
            break;
        case 3:
            image_index = 3;
            break;
        case 4:
            attacking = 0;
            image_index = 4;
            sound_play(swingsnd1);
            create_hitbox(4, 78 + 24 * facing, 2.5, 0, 3, 4, slash1, obj_spark_slash1, 0.55, 0.38, 23.10, 23.10, self.id, 3, 1);
            hitbox.image_angle = 349.26 - facing * ((2 * 349.26) - 540);
            create_hitbox2(4, 65 + 50 * facing, 2.5, 0, 3, 4, slash1, obj_spark_slash1, 0.35, 0.45, 35, 15, self.id, 3, 1);
            hitbox2.image_angle = 230 + facing * (540 - (2 * 230));
            hitbox2.sprite_index = spr_collision_bubble_ext
            create_hitbox3(4, 90, 2.5, 0, 3, 4, slash2, obj_spark_slash2, 0.5, 0.28, 42, 8, self.id, 3, 1);
            hitbox3.image_angle = 220 + facing * (540 - (2 * 220));
            hitbox3.sprite_index = spr_collision_bubble_ext
            if notip = 1 {
                hitbox.damage = 5 * size;
                hitbox.bkb = 2.5 * size;
                hitbox2.damage = 5 * size;
                hitbox2.bkb = 2.5 * size;
                hitbox3.damage = 5 * size;
                hitbox3.bkb = 2.5 * size;
                hitbox3.sfx = slash1
                hitbox3.gfx = obj_spark_slash1
            }
            hitbox.di = 0.3;
            hitbox2.di = 0.3;
            hitbox3.di = 0.3;
            hitbox.hit_stun = 6 * size;
            hitbox2.hit_stun = 6 * size;
            hitbox3.hit_stun = 6 * size;
            break;
        case 5:
            hitbox.image_xscale = 0.60 * (1 - facing * 2) * size;
            hitbox.image_yscale = 0.37 * size;
            hitbox.hitbox_x = 23.10 * (1 - facing * 2) * size;
            hitbox.hitbox_y = 32.20 * size;
            hitbox.image_angle = 28.07 + facing * (180 - (2 * 28.07));
            hitbox2.image_xscale = 0.31 * (1 - facing * 2) * size;
            hitbox2.image_yscale = 0.38 * size;
            hitbox2.hitbox_x = 38.30 * (1 - facing * 2) * size;
            hitbox2.hitbox_y = 33.50 * size;
            hitbox2.image_angle = 300 - facing * ((2 * 300) - 540);
            hitbox3.image_xscale = 0.38 * (1 - facing * 2) * size;
            hitbox3.image_yscale = 0.35 * size;
            hitbox3.hitbox_x = 50 * (1 - facing * 2) * size;
            hitbox3.hitbox_y = 35 * size;
            hitbox3.image_angle = 300 - facing * ((2 * 300) - 540);
            image_index = 5;
            break;
        case 6:
            hitbox.image_xscale = 0.56 * (1 - facing * 2) * size;
            hitbox.image_yscale = 0.37 * size;
            hitbox.hitbox_x = 2.80 * (1 - facing * 2);
            hitbox.hitbox_y = 31.50 * size;
            hitbox.image_angle = 349.77 - facing * ((2 * 349.77) - 540);
            hitbox2.image_xscale = 0.48 * (1 - facing * 2) * size;
            hitbox2.image_yscale = 0.46 * size;
            hitbox2.hitbox_x = 11.40 * (1 - facing * 2) * size;
            hitbox2.hitbox_y = 43.60 * size;
            hitbox2.image_angle = 3 + facing * (180 - (2 * 3));
            hitbox3.image_xscale = 0.6 * (1 - facing * 2) * size;
            hitbox3.image_yscale = 0.4 * size;
            hitbox3.hitbox_x = 17.40 * (1 - facing * 2) * size;
            hitbox3.hitbox_y = 54.50 * size;
            hitbox3.image_angle = 353.33 - facing * ((2 * 353.33) - 540);
            image_index = 6;
            break;
        case 7:
            image_index = 7;
            break;
        case 12:
            image_index = 8;
            break;
        case 17:
            image_index = 9;
            break;
        case 22:
            image_index = 10;
            break;

        case 101:
            sprite_index = jab2_sprite;
            xoff = -81; //Bigger is left
            if facing = 1
            xoff = -80
            effscale = xsize / 2.0
            yoff = 80; //Bigger is up
            image_index = 0;
            break;
        case 105:
            eff = create_blur(x, y, self.id);
            eff.sprite_index = jab2_effect_spr;
            //eff.image_xscale = size;
            eff.image_xscale = (effscale * size) * (-1) * (1 - facing * 2);
            eff.image_yscale = (effscale * size);
            eff.x = x - xoff * size * (1 - facing * 2);
            eff.y = y - yoff * size;
            eff.image_speed = 0;
            eff.image_index = 0;
            eff.alarm[0] = 40;
            eff.snap = self.id
            eff.depth = -2;
            sound_play(swingsnd2);
            attacking = 0;
            image_index = 1;
            create_hitbox(5, 45 + 90 * facing, 4.5, 3, 3, 5, slash1, obj_spark_slash1, 0.49, 0.37, 18.90, 21.70, self.id, 2, 1);
            hitbox.image_angle = 344.22 - facing * ((2 * 344.22) - 540);
            create_hitbox2(5, 45 + 90 * facing, 4.5, 3, 3, 5, slash1, obj_spark_slash1, 0.2, 0.45, 28.10, 13.20, self.id, 2, 1);
            hitbox2.image_angle = 340 - facing * ((2 * 340) - 540);
            hitbox2.sprite_index = spr_collision_bubble_ext
            create_hitbox3(5, 45 + 90 * facing, 4.5, 3, 3, 5, slash2, obj_spark_slash2, 0.1, 0.380, 34.60, 13.10, self.id, 2, 1);
            hitbox3.image_angle = 340 - facing * ((2 * 340) - 540);
            hitbox3.sprite_index = spr_collision_bubble_ext2
            create_hitbox4(5, 45 + 90 * facing, 4.6, 3, 3, 5, slash2, obj_spark_slash2, 0.1, 0.380, 34.60, 13.10, self.id, 1, 2);
            hitbox4.image_angle = 340 - facing * ((2 * 340) - 540);
            hitbox4.sprite_index = spr_collision_bubble_ext2
            hitbox.di = 0.3;
            hitbox2.di = 0.3;
            hitbox3.di = 0.3;
            hitbox4.di = 0.3;
            if notip = 1 {
                hitbox.damage = 5 * size;
                hitbox.bkb = 4.5 * size;
                hitbox2.damage = 5 * size;
                hitbox2.bkb = 4.5 * size;
                hitbox3.damage = 5 * size;
                hitbox3.bkb = 4.5 * size;
                hitbox4.damage = 5 * size;
                hitbox4.bkb = 4.5 * size;
                hitbox.sfx = slash2
                hitbox.gfx = obj_spark_slash2
                hitbox2.sfx = slash2
                hitbox2.gfx = obj_spark_slash2
            }
            break;
        case 106:
            eff.image_speed = 0;
            eff.image_index = 1;
            image_index = 2;
            hitbox.image_xscale = 0.53 * (1 - facing * 2) * size;
            hitbox.image_yscale = 0.33 * size;
            hitbox.hitbox_x = 17.10 * (1 - facing * 2) * size;
            hitbox.hitbox_y = 31.10 * size;
            hitbox.image_angle = 6.34 + facing * (180 - (2 * 6.34));
            hitbox2.image_xscale = 0.19 * (1 - facing * 2) * size;
            hitbox2.image_yscale = 0.6 * size;
            hitbox2.hitbox_x = 33.20 * (1 - facing * 2) * size;
            hitbox2.hitbox_y = 34.50 * size;
            hitbox2.image_angle = 55 + facing * (180 - (2 * 55));
            hitbox3.image_xscale = 0.11 * (1 - facing * 2) * size;
            hitbox3.image_yscale = 0.58 * size;
            hitbox3.hitbox_x = 36.80 * (1 - facing * 2) * size;
            hitbox3.hitbox_y = 39.80 * size;
            hitbox3.image_angle = 55.97 + facing * (180 - (2 * 55.97));
            hitbox4.image_xscale = 0.07 * (1 - facing * 2) * size;
            hitbox4.image_yscale = 0.55 * size;
            hitbox4.hitbox_x = 44.80 * (1 - facing * 2) * size;
            hitbox4.hitbox_y = 28.80 * size;
            hitbox4.image_angle = 0;
            break;
        case 107:
            eff.image_speed = 0;
            eff.image_index = 2;
            image_index = 3;
            hitbox.image_xscale = 0.36 * (1 - facing * 2) * size;
            hitbox.image_yscale = 0.50 * size;
            hitbox.hitbox_x = 5 * (1 - facing * 2) * size;
            hitbox.hitbox_y = 30 * size;
            hitbox.image_angle = 28.16 + facing * (180 - (2 * 28.16));
            hitbox2.image_xscale = 0.32 * (1 - facing * 2) * size;
            hitbox2.image_yscale = 0.25 * size;
            hitbox2.hitbox_x = 6.40 * (1 - facing * 2) * size;
            hitbox2.hitbox_y = 43.10 * size;
            hitbox2.image_angle = 26.10 + facing * (180 - (2 * 26.10));
            hitbox3.image_xscale = 0.37 * (1 - facing * 2) * size;
            hitbox3.image_yscale = 0.26 * size;
            hitbox3.hitbox_x = -1 * (1 - facing * 2) * size;
            hitbox3.hitbox_y = 47.20 * size;
            hitbox3.image_angle = 8.98 + facing * (180 - (2 * 8.98));
            break;
        case 108:
            eff.image_speed = 0;
            eff.image_index = 3;
            image_index = 4;
            break;
        case 110:
            with(eff) {
                instance_destroy();
            }
            break;
        case 111:
            image_index = 5;
            break;
        case 114:
            image_index = 6;
            break;
        case 117:
            image_index = 7;
            break;
        case 120:
            image_index = 8;
            break;

        case 26:
            interrupt = 1;
            break;
        case 127:
            interrupt = 1;
            break;
        case 27:
        case 128:
            attack_type = "none";
            state_type = "stand";
            timer = 0;
            time = -1;
            break;

            if (attack_type == "none") {
                if (instance_exists(eff)) {
                    with(eff) {
                        instance_destroy();
                    }
                }
            }
    }

  // Animate VFX
    switch (timer){
      case 1: eff = create_sword_trail(self.id, 9, 30, spread_texture); break;
      case 2: eff.index = 1; break;
      case 3: eff.index = 2; break;
      case 4: eff.index = 3; break;
      case 5: eff.index = 4; break;
      case 6: eff.index = 5; break;
      case 7: eff.index = 6; break;
      case 8: eff.end_decay = 0.25; break;
      case 9: eff.end_decay = 0.5; break;
      case 10: eff.end_decay = 0.75; break;
      case 11: eff.end_decay = 1; break;
      case 12: eff.index = 7; eff.end_decay = 0; break;
      case 13: eff.end_decay = 1; break;
      case 14: eff.end_decay = 2; break;
      case 15: eff.end_decay = 2.5; break;
      case 16: with (eff) { instance_destroy(); } break;
    }

    if (timer > 7 && timer < 27 && (attacking || (ai && random(10) < 4))) {
        change = 1;
    }

    if (timer >= 20 && timer < 27 && change == 1) {
        timer = 100;
        change = 0;
        with(eff) {
            instance_destroy();
        }
    }
} // End spread

//----------------- Centered Marth --------------------
if notip = 2 {
    if (state_type == "stand") {
        hspeed = 0;
        state_type = "attack";
        attack_type = "jab";
        image_speed = 0;
        sprite_index = jab_sprite;
        image_index = 0;
        timer = 0;
        time = 24;
        timer_speed = 1;
        change = 0;
        xoff = -106; //Bigger is left
        if facing = 1
        xoff = -105
        effscale = xsize / 2.0
        yoff = 101; //Bigger is up
    }

    switch (timer) {
        case 1:
            image_index = 1;
            break;
        case 2:
            image_index = 2;
            break;
        case 3:
            image_index = 3;
            break;
        case 4:
            attacking = 0;
            image_index = 4;
            sound_play(swingsnd1);
            create_hitbox2(7, 70 + 40 * facing, 5.6, 0.5, 3, 5, slash1, obj_spark_slash2, 0.35, 0.45, 35, 15, self.id, 3, 1);
            hitbox2.image_angle = 230 + facing * (540 - (2 * 230));
            hitbox2.sprite_index = spr_collision_bubble_ext
            create_hitbox(6, 70 + 40 * facing, 5.5, 0.5, 3, 5, slash1, obj_spark_slash1, 0.55, 0.38, 23.10, 23.10, self.id, 3, 1);
            hitbox.image_angle = 349.26 - facing * ((2 * 349.26) - 540);
            create_hitbox3(3, 70 + 40 * facing, 5.3, 0.5, 3, 4, punch3, obj_spark_slash1, 0.5, 0.28, 42, 8, self.id, 3, 1);
            hitbox3.image_angle = 220 + facing * (540 - (2 * 220));
            hitbox3.sprite_index = spr_collision_bubble_ext
            if notip = 2 {
                hitbox.sfx = slash2
                hitbox2.sfx = slash2
                hitbox.gfx = obj_spark_slash2
                hitbox2.gfx = obj_spark_slash2
            }
            hitbox.di = 0.3;
            hitbox2.di = 0.3;
            hitbox3.di = 0.3;
            hitbox.hit_stun = 6 * size;
            hitbox2.hit_stun = 6 * size;
            hitbox3.hit_stun = 6 * size;
            break;
        case 5:
            hitbox.image_xscale = 0.60 * (1 - facing * 2) * size;
            hitbox.image_yscale = 0.37 * size;
            hitbox.hitbox_x = 23.10 * (1 - facing * 2) * size;
            hitbox.hitbox_y = 32.20 * size;
            hitbox.image_angle = 28.07 + facing * (180 - (2 * 28.07));
            hitbox2.image_xscale = 0.31 * (1 - facing * 2) * size;
            hitbox2.image_yscale = 0.38 * size;
            hitbox2.hitbox_x = 38.30 * (1 - facing * 2) * size;
            hitbox2.hitbox_y = 33.50 * size;
            hitbox2.image_angle = 300 - facing * ((2 * 300) - 540);
            hitbox3.image_xscale = 0.38 * (1 - facing * 2) * size;
            hitbox3.image_yscale = 0.35 * size;
            hitbox3.hitbox_x = 50 * (1 - facing * 2) * size;
            hitbox3.hitbox_y = 35 * size;
            hitbox3.image_angle = 300 - facing * ((2 * 300) - 540);
            image_index = 5;
            break;
        case 6:
            hitbox.image_xscale = 0.56 * (1 - facing * 2) * size;
            hitbox.image_yscale = 0.37 * size;
            hitbox.hitbox_x = 2.80 * (1 - facing * 2);
            hitbox.hitbox_y = 31.50 * size;
            hitbox.image_angle = 349.77 - facing * ((2 * 349.77) - 540);
            hitbox2.image_xscale = 0.48 * (1 - facing * 2) * size;
            hitbox2.image_yscale = 0.46 * size;
            hitbox2.hitbox_x = 11.40 * (1 - facing * 2) * size;
            hitbox2.hitbox_y = 43.60 * size;
            hitbox2.image_angle = 3 + facing * (180 - (2 * 3));
            hitbox3.image_xscale = 0.6 * (1 - facing * 2) * size;
            hitbox3.image_yscale = 0.4 * size;
            hitbox3.hitbox_x = 17.40 * (1 - facing * 2) * size;
            hitbox3.hitbox_y = 54.50 * size;
            hitbox3.image_angle = 353.33 - facing * ((2 * 353.33) - 540);
            image_index = 6;
            break;
        case 7:
            image_index = 7;
            break;
        case 12:
            image_index = 8;
            break;
        case 17:
            image_index = 9;
            break;
        case 22:
            image_index = 10;
            break;
        case 24:
            attack_type = "none";
            state_type = "stand";
            timer = 0;
            time = -1;
            break;

            if (attack_type == "none") {
                if (instance_exists(eff)) {
                    with(eff) {
                        instance_destroy();
                    }
                }
            }
    }

    // Animate VFX
    switch (timer){
      case 1: eff = create_sword_trail(self.id, 9, 30, centered_texture); break;
      case 2: eff.index = 1; break;
      case 3: eff.index = 2; break;
      case 4: eff.index = 3; break;
      case 5: eff.index = 4; break;
      case 6: eff.index = 5; break;
      case 7: eff.index = 6; break;
      case 8: eff.end_decay = 0.25; break;
      case 9: eff.end_decay = 0.5; break;
      case 10: eff.end_decay = 0.75; break;
      case 11: eff.end_decay = 1; break;
      case 12: eff.index = 7; eff.end_decay = 0; break;
      case 13: eff.end_decay = 1; break;
      case 14: eff.end_decay = 2; break;
      case 15: eff.end_decay = 2.5; break;
      case 16: with (eff) { instance_destroy(); } break;
    }
    if (timer > 7 && timer < 24 && (attacking || (ai && random(10) < 4))) {
        change = 1;
    }
} // End Centered