//PART 1 - START OF SETUP PART OF THE MOVE
if ( state_type = "stand" || state_type = "run" )
  {
    state_type = "attack";
    attack_type = "jab"
	
	if dtiltcancel = 0
	{
    timer = 0;
    time = 17;
    sprite_index = jab_sprite;
	image_index = 0;
	}
	
	if dtiltcancel = 1
	{
	sprite_index = jab_sprite2;
	image_index = 0;
    timer = 30;
    time = 60;
	attacking = 0;
	dtiltcancel = 0
	}
	
    image_speed = 0;
    hspeed = 0;
  }
//PART 1 - END OF SETUP PART OF THE MOVE

//PART 2 - THE JUICE OF THE MOVE - START
if ( timer < time )
  {
  state_type = "attack";
    switch ( timer )
      {
	case 1: image_index = 1; break;
	case 3: image_index = 2; break;
	case 5: image_index = 3; break;
	case 8: image_index = 4; break;
	case 11: image_index = 5; break;
	case 14: image_index = 6; break;
	
	case 31: image_index = 1; break;
	case 33: image_index = 2; break;
	case 35: image_index = 3; break;
	case 37: image_index = 4; break;
	case 42: image_index = 5; break;
	case 45: image_index = 6; break;
	case 48: image_index = 7; break;
	case 51: image_index = 8; break;
	case 54: image_index = 9; break;
	case 57: image_index = 10; break;
      }
	  
	if timer = 5
	{
	sound_play(jabswing_sound1);
	create_hitbox(3,angle_correct(0),3,0,6,3,es_jabhitsound1,obj_spark_hit2,.9,.6,abs(place_x(267)),-place_y(70),self.id,3,2);
	hitbox.image_angle = angle_correct(0)
	}
	
	if (timer >= 6 and timer < 14) and attack_success and ai
	attacking = 1
	
	if (timer >= 6 and timer < 14) and attacking and attack_success and !movedown
	{
	sprite_index = jab_sprite2;
	image_index = 0;
	hspeed = 2*(1-facing*2)
    timer = 30;
    time = 60;
	attacking = 0;
	
	}
	
	if (timer >= 6 and timer < 14) and attacking and attack_success and movedown
	{
	state_type = "crouch";
    attack_type = "none";
	hspeed = 2*(1-facing*2)	
	attack_success = 0;
	attacking = 0;
    timer = 0;
    time = -1;
    char_dtilt();
	}
	
	if (timer >= 6 and timer < 14) and special and ((moveright and !facing) or (moveleft and facing)) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
	attacking = 0;
    timer = 0;
    time = -1;
    char_sideb();
	}
	
	if (timer >= 6 and timer < 14) and special and moveup and attack_success
	{
	state_type = "stand";
    attack_type = "none";
	attacking = 0;
    timer = 0;
    time = -1;
    char_upb();
	}
	
	if (timer >= 6 and timer < 14) and special and !moveright and !moveleft and attack_success and smash_power >= 300
	{
	state_type = "jump";
    attack_type = "none";
	attacking = 0;
    timer = 0;
    time = -1;
    char_final_smash();
	}
	
	
	
	if timer = 31
	sound_play(choose(jab_voice1,jab_voice2,jab_voice3,jab_voice4))
	
	if timer = 34
	{
	sound_play(jabswing_sound2);
	}
	
	if timer = 37
	{
	jab2vfx = create_spark ( 0 , 0 , jab2_vfxsprite , 0 , .24*(1-facing*2) , .24  );
	jab2vfx.alarm[0] = 15
	jab2vfx.snap = self.id;
	jab2vfx.owner = self.id;
	jab2vfx.keepmain = self.keepmain;
	jab2vfx.script = char_custom10;
	jab2vfx.identifier = "regularvfx"
	
	create_hitbox(4,angle_correct(0),3.5,0,8,4,es_slashhitsound2,obj_spark_slash3,1.1,1.5,abs(place_x(306)),-place_y(187),self.id,5,3);
	hitbox.image_angle = angle_correct(0)
	}
	
	if (timer >= 38 and timer < 48) and attack_success and ai
	attacking = 1
	
	if (timer >= 38 and timer < 48) and attacking and attack_success and !moveup and !movedown
	{
	state_type = "stand";
    attack_type = "none";
	hspeed = 1.5*(1-facing*2)	
	attack_success = 0;
	attacking = 0;
    timer = 0;
    time = -1;
    char_stilt();
	}
	
	if (timer >= 38 and timer < 48) and attacking and attack_success and movedown
	{
	state_type = "crouch";
    attack_type = "none";
	hspeed = 2*(1-facing*2)	
	attack_success = 0;
	attacking = 0;
    timer = 0;
    time = -1;
	jabcancelvar = 1
    char_dtilt();
	}
	
	if (timer >= 38 and timer < 48) and attacking and attack_success and moveup
	{
	state_type = "stand";
    attack_type = "none";
	hspeed = 1.5*(1-facing*2)
	attack_success = 0;
	attacking = 0;
    timer = 0;
    time = -1;
    char_utilt();
	}
	
	if (timer >= 38 and timer < 48) and ((smashright and !facing) or (smashleft and facing)) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
	attacking = 0;
    timer = 0;
    time = -1;
    char_ssmash();
	}
	
	if (timer >= 38 and timer < 48) and smashup
	{
	state_type = "stand";
    attack_type = "none";
	attacking = 0;
    timer = 0;
    time = -1;
    char_usmash();
	}
	
	if (timer >= 38 and timer < 48) and smashdown
	{
	state_type = "stand";
    attack_type = "none";
	attacking = 0;
    timer = 0;
    time = -1;
    char_dsmash();
	}
	
	if (timer >= 38 and timer < 48) and special and ((moveright and !facing) or (moveleft and facing)) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
	attacking = 0;
    timer = 0;
    time = -1;
    char_sideb();
	}
	
	if (timer >= 38 and timer < 48) and special and moveup and attack_success
	{
	state_type = "stand";
    attack_type = "none";
	attacking = 0;
    timer = 0;
    time = -1;
    char_upb();
	}
	
	if (timer >= 38 and timer < 48) and special and !moveright and !moveleft and attack_success and smash_power >= 300
	{
	state_type = "jump";
    attack_type = "none";
	attacking = 0;
    timer = 0;
    time = -1;
    char_final_smash();
	}
	  
	/*
	if timer = 4
	{
	create_hitbox(1,angle_correct(angle_here),3,4,5,6,punch3,obj_spark_hit1,1,1,abs(place_x(20)),-place_y(20),self.id,10,3);
	hitbox.image_angle = angle_correct(angle_here)
	}
	*/
	
	/*
	if timer = 4
	{
	projectilething =
	create_projectile(5, angle_correct(angle_here), 5, 6.25, 15, 7.5, kick2, obj_spark_hit3, .25, .25, abs(place_x(130)), -place_y(104), self.id, 30, char_custom1);
	projectilething.sprite_index = insert_sprite_here
	projectilething.image_speed = .5;
	}
	*/
	
	/*
	if timer = 4
	{
	vfxthing = create_spark ( xpos , ypos , sprite_index , image_speed , xscale , yscale );
	vfxthing.alarm[0] = lifespan of the spark here
	vfxthing.snap = self.id;
	vfxthing.owner = self.id;
	vfxthing.keepmain = self.keepmain;
	vfxthing.script = char_custom10;
	
	//FOR GIVING PUNCHES OR KICKS EXTRA IMPACT
	burstvfx = instance_create ( place_x ( 40 ) + x , place_y ( 15 ) + y , obj_jab_burst );
	burstvfx.snap = self.id;
	burstvfx.image_xscale = xsize * 0.4;
	burstvfx.image_yscale = ysize * 0.4;
	
	//NOT SURE WHAT THIS IS BUT I GUESS IT'S FOR WHIFFING? IDK
	whiffer = gfx_ef_whiff ( x + 28 * ( 1 - facing * 2 )  * size , y - ( actual_height / 2 ) - 1 , 0.65 , 1 , 180 * facing );
	
	//A DIFFERENT VERSION OF THE DUST EFFECT, LOOKS MORE OPAQUE AND POTENT THAN THE REGULAR ONE
	duster = instance_create(x+12*(1-facing*2),y,obj_dust_effect);
	duster.image_xscale *= 0.5*size;
	duster.image_yscale *= 0.5*size;
	duster.facing = !facing; 
	
	//AN EFFECT FOR SPINNY MOVES LIKE NAIRS AND WHATNOT
	whirler = gfx_ef_whirl2 ( x  , (y-actual_height/2)+3 , 0.75*size, -20 * (1-facing*2) );
	whirler.snap = self.id
	
	//THE EFFECT THE GAME USES FOR WHEN SOMEONE LANDS ON THE FLOOR, ALSO INCLUDES A SOUND
	gfx_land_effect ( x , y , actual_width );
	
	//THE YELLOW SPARK THING THAT GETS CREATED WHEN USING A SMASH ATTACK
	part_particles_create ( psys_back , x - 20 + random ( 40) , y - 7 - random ( 9 ) , ptype_smashspark , 1 )
	
	//NEW SMASH CHARGE SPARK, THIS ONE'S BLUE AND IT LOOKS COOLER
    eff = instance_create(place_x(69)+x,place_y(25)+y,obj_smash_charge);
    eff.image_yscale = 0.4 * ysize;
    eff.image_xscale = eff.image_yscale * (1-facing*2);
    eff.depth = depth - 0.1;
    eff.image_speed = 2;
	
	//DOUBLE JUMP EFFECT
	
	spark = instance_create(x*size,y-7*size,obj_spark_shockwave);
	spark.image_xscale *= 0.5*size;
	spark.image_yscale *= 0.1*size;
	spark2 = instance_create(x*size,y-7*size,obj_spark_shockwave);
	spark2.image_xscale *= 0.7*size;
	spark2.image_yscale *= 0.2*size;
	}
	*/
    
  }
//PART 2 - THE JUICE OF THE MOVE - END

//PART 3 - GETTING OUT OF THE MOVE AND GOING BACK TO IDLE - START
if ( timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" )
  {
    state_type = "stand";
    attack_type = "none";
    timer = 0;
    time = -1;
  }
//PART 3 - GETTING OUT OF THE MOVE AND GOING BACK TO IDLE - END