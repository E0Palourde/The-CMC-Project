if state_type = "crouch" || state_type = "stand" || state_type = "run" {
        state_type = "attack";
        attack_type = "dtilt";
        image_speed = 0;
	
	if jabcancelvar = 0
	{
        sprite_index = dtilt_sprite;
        image_index=0;
        timer = 0;
        time = 18;
	}
	
	if jabcancelvar = 1
	{
		sprite_index = dtilt_sprite3;
		image_index = 0;
		timer = 70;
		time = 114;
		attacking = 0;
		jabcancelvar = 0
	}
	
        timer_speed=1;
}
if ( timer < time )
  {
  state_type = "attack";
    switch ( timer )
      {
	case 2: image_index = 1; break;
	case 4: image_index = 2; break;
	case 6: image_index = 3; break;
	case 9: image_index = 4; break;
	case 12: image_index = 5; break;
	case 15: image_index = 6; break;

	case 31: image_index = 1; break;
	case 33: image_index = 2; break;
	case 35: image_index = 3; break;
	case 37: image_index = 4; break;
	case 40: image_index = 5; break;
	case 44: image_index = 6; break;
	case 48: image_index = 7; break;
	case 52: image_index = 8; break;
	case 56: image_index = 9; break;

	case 72: image_index = 1; break;
	case 74: image_index = 2; break;
	case 77: image_index = 3; break;
	case 79: image_index = 4; break;
	case 82: image_index = 5; break;
	case 86: image_index = 6; break;
	case 90: image_index = 7; break;
	case 96: image_index = 8; break;
	case 102: image_index = 9; break;
	case 108: image_index = 10; break;

      }
	  
	if timer = 6
	{
	sound_play(jabswing_sound1);
	create_hitbox(3,angle_correct(0),3,0,6,3,es_jabhitsound1,obj_spark_hit2,.9,.6,abs(place_x(274)),-place_y(98),self.id,3,3);
	hitbox.image_angle = angle_correct(0)
	}
	
	if (timer >= 7 and timer < 15) and attack_success and ai
	attacking = 1
	
	if (timer >= 7 and timer < 15) and attacking and attack_success
	{
	sprite_index = dtilt_sprite2;
	image_index = 0;
    timer = 30;
    time = 60;
	attacking = 0;
	}
	
	if (timer >= 7 and timer < 15) and special and ((moveright and !facing) or (moveleft and facing)) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
	attacking = 0;
    timer = 0;
    time = -1;
    char_sideb();
	}
	
	if (timer >= 7 and timer < 15) and special and moveup and attack_success
	{
	state_type = "stand";
    attack_type = "none";
	attacking = 0;
    timer = 0;
    time = -1;
    char_upb();
	}
	
	if (timer >= 7 and timer < 15) and special and !moveright and !moveleft and attack_success and smash_power >= 300
	{
	state_type = "jump";
    attack_type = "none";
	attacking = 0;
    timer = 0;
    time = -1;
    char_final_smash();
	}
	
	
	
	if timer = 31
	sound_play(choose(jab_voice1,jab_voice2,jab_voice3,jab_voice4))
	
	if timer = 33
	{
	sound_play(jabswing_sound2);
	}
	  
	if timer = 37
	{
	dtilt2vfx = create_spark ( 0 , 0 , dtilt_sprite2vfx , 0 , .24*(1-facing*2) , .24  );
	dtilt2vfx.alarm[0] = 15
	dtilt2vfx.snap = self.id;
	dtilt2vfx.owner = self.id;
	dtilt2vfx.keepmain = self.keepmain;
	dtilt2vfx.script = char_custom10;
	dtilt2vfx.depth = depth-1;
	dtilt2vfx.identifier = "regularvfx"
	
	create_hitbox(4,angle_correct(170),3.3,0,8,4,es_slashhitsound2,obj_spark_slash3,1.4,.8,abs(place_x(298)),-place_y(180),self.id,3,3);
	hitbox.image_angle = angle_correct(0)
	}
	
	if (timer >= 38 and timer < 48) and attack_success and ai
	attacking = 1
	
	if (timer >= 38 and timer < 48) and attacking and attack_success and movedown
	{
	sprite_index = dtilt_sprite3;
	image_index = 0;
    timer = 70;
    time = 114;
	attacking = 0;
	}
	
	if (timer >= 38 and timer < 48) and attacking and attack_success and !movedown
	{
	state_type = "stand";
    attack_type = "none";
	attack_success = 0;
	attacking = 0;
	dtiltcancel = 1
    timer = 0;
    time = -1;
    char_jab();
	}
	
	if (timer >= 38 and timer < 48) and ((smashright and !facing) or (smashleft and facing)) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
	attacking = 0;
    timer = 0;
    time = -1;
    char_ssmash();
	}
	
	if (timer >= 38 and timer < 48) and smashup
	{
	state_type = "stand";
    attack_type = "none";
	attacking = 0;
    timer = 0;
    time = -1;
    char_usmash();
	}
	
	if (timer >= 38 and timer < 48) and smashdown
	{
	state_type = "stand";
    attack_type = "none";
	attacking = 0;
    timer = 0;
    time = -1;
    char_dsmash();
	}
	
	if (timer >= 38 and timer < 48) and special and ((moveright and !facing) or (moveleft and facing)) and attack_success
	{
	state_type = "stand";
    attack_type = "none";
	attacking = 0;
    timer = 0;
    time = -1;
    char_sideb();
	}
	
	if (timer >= 38 and timer < 48) and special and moveup and attack_success
	{
	state_type = "stand";
    attack_type = "none";
	attacking = 0;
    timer = 0;
    time = -1;
    char_upb();
	}
	
	if (timer >= 38 and timer < 48) and special and !moveright and !moveleft and attack_success and smash_power >= 300
	{
	state_type = "jump";
    attack_type = "none";
	attacking = 0;
    timer = 0;
    time = -1;
    char_final_smash();
	}

	
	
	  
	if timer = 71
	{
	sound_play(choose(dtilt3_voice,dtilt3_voice2,dtilt3_voice3,dtilt3_voice4))
	}	
	
	if timer = 77
	{
	sound_play(stiltswing_sound);
	}
	  
	if timer = 79
	{
	dtilt3vfx = create_spark ( 0 , 0 , dtilt_sprite3vfx , 0 , .24*(1-facing*2) , .24  );
	dtilt3vfx.alarm[0] = 18
	dtilt3vfx.snap = self.id;
	dtilt3vfx.owner = self.id;
	dtilt3vfx.keepmain = self.keepmain;
	dtilt3vfx.identifier = "regularvfx"
	dtilt3vfx.script = char_custom10;
	
	create_hitbox(6,angle_correct(82),5,6.7,12,6,es_slashhitsound3,obj_spark_slash4,1.2,1.8,abs(place_x(260)),-place_y(172),self.id,4,3);
	hitbox.image_angle = angle_correct(0)
	}
	
	if timer = 81
	{
	dtilt3vfx.image_index = 1
	}
	
	if (timer >= 80 and timer < 90) and attacking and attack_success and moveup
	{
	state_type = "stand";
    attack_type = "none";
	attack_success = 0;
	attacking = 0;
    timer = 0;
    time = -1;
    char_utilt();
	}
	
	if (timer >= 80 and timer < 90) and special and moveup and attack_success
	{
	state_type = "stand";
    attack_type = "none";
	attacking = 0;
    timer = 0;
    time = -1;
    char_upb();
	}
	
	if (timer >= 80 and timer < 99) and attack_success and movejump
	{
	
	sound_play(jump_sound);
	
	vspeed = -7;
	
	duster = instance_create(x+7*(1-facing*2),y,obj_dust_effect);
		duster.image_xscale = -.1*(1-facing*2)
		duster.image_yscale = .1;
		
		duster = instance_create(x-7*(1-facing*2),y,obj_dust_effect);
		duster.image_xscale = .1*(1-facing*2)
		duster.image_yscale = .1;
		
	state_type = "jump";
    attack_type = "none";
    timer = 0;
    time = -1;
	}
	  
	/*
	if timer = 4
	{
	create_hitbox(1,angle_correct(angle_here),3,4,5,6,punch3,obj_spark_hit1,1,1,abs(place_x(20)),-place_y(20),self.id,10,3);
	hitbox.image_angle = angle_correct(angle_here)
	}
	*/
	
	/*
	if timer = 4
	{
	projectilething =
	create_projectile(5, angle_correct(angle_here), 5, 6.25, 15, 7.5, kick2, obj_spark_hit3, .25, .25, abs(place_x(130)), -place_y(104), self.id, 30, char_custom1);
	projectilething.sprite_index = insert_sprite_here
	projectilething.image_speed = .5;
	}
	*/
	
	/*
	if timer = 4
	{
	vfxthing = create_spark ( xpos , ypos , sprite_index , image_speed , xscale , yscale );
	vfxthing.alarm[0] = lifespan of the spark here
	vfxthing.snap = self.id;
	vfxthing.owner = self.id;
	vfxthing.keepmain = self.keepmain;
	vfxthing.script = char_custom10;
	}
	*/
    
  }

if ( timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" )
  {
    if movedown {state_type = "crouch"; sprite_index = crouch_sprite; image_index = 2;
    timer = 6; }
	else {state_type = "stand";
    timer = 0;}
    attack_type = "none";
    time = -1;
  }
        

