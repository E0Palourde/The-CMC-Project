if time = -1 {
hspeed = 0;
state_type = "attack";
attack_type = "bthrow";
image_speed = 0;
sprite_index = bthrow_sprite;
image_index=0;
timer = 0;
time = 65;
timer_speed=1;
target1 = target
target1.timer_speed = 0;
target1.alarm[0] = 50
target1.state_type = "air_flinch";
}
if timer < time {
    state_type = "attack";
    super_armor = 1
    image_blend = c_white
	
		switch ( timer ) {
	case 0: image_index = 0; break;	
	case 4: image_index = 1; break;	
	case 8: image_index = 2; break;	
	case 12: image_index = 3; break;	
	case 16: image_index = 4; break;	
	case 20: image_index = 5; break;	
	case 24: image_index = 6; break;	
	case 28: image_index = 7; break;	
	case 31: image_index = 8; break;	
	case 34: image_index = 9; break;	
	case 37: image_index = 10; break;	
	case 41: image_index = 11; break;	
	case 44: image_index = 12; break;	
	case 47: image_index = 13; break;	
	case 50: image_index = 14; break;	
	case 54: image_index = 15; break;	
	case 57: image_index = 16; break;	
	case 61: image_index = 17; break;	
	case 64: sprite_index = stand_sprite; image_index = 0; image_xscale *= -1; break;	
	}
	
// Start of the opponent's X and Y during the back throw animation	
	if ( timer >= 0 && timer <= 4 )
	{
	target.x = x + 10 * size * (1-facing*2);
	target.y = y - 5 * size;
	target.depth = depth + 1;
	}
	
	if ( timer >= 5 && timer <= 8 )
	{
	target.x = x + 7 * size * (1-facing*2);
	target.y = y - 7 * size;
	target.depth = depth + 1;
	}
	
	if ( timer >= 9 && timer <= 12 )
	{
	target.x = x + 2 * size * (1-facing*2);
	target.y = y - 9 * size;
	target.depth = depth + 1;
	}
	
	if ( timer >= 13 && timer <= 16 )
	{
	target.x = x + (-4 * size * (1-facing*2));
	target.y = y - 7 * size;
	target.depth = depth + 1;
	}	
	
	if ( timer >= 17 && timer <= 20 )
	{
	target.x = x + (-4 * size * (1-facing*2));
	target.y = y - 7 * size;
	target.depth = depth + 1;
	}	

	if ( timer >= 21 && timer <= 24 )
	{
	target.x = x + (-4 * size * (1-facing*2));
	target.y = y - 7 * size;
	target.depth = depth + 1;
	}	
	
	if ( timer >= 25 && timer <= 27 )
	{
	target.x = x + (-15 * size * (1-facing*2));
	target.y = y - 4 * size;
	target.depth = depth + 1;
	}	
// End of opponent's X and Y during the back throw animation

	if timer = 1 {
	sound_play(choose(bthrow_voice, bthrow_voice2));	
	}
	
    if timer = 28 {
	sound_play(swingsnd3);
        script_execute(create_throw_box,12,angle_correct(140),6.5,7,1,1,-1,obj_spark_effect,0.9,1,-10,15,self.id,1);
        }
		
	if timer = 64 {
	if (!collision_point(x + ((16*(1-facing*2)*xsize)), y - 1, obj_wall, 0, 1) )
    {
      x -= (10 * (1-facing*2))*xsize;
    }		
}
		
if timer >= time-1 && state_type != "flinch" && state_type != "air_flinch" {
    attack_type = "none";
    state_type = "stand";
    timer = 0;
    time =-1;
    super_armor = 0
	facing = 1 - facing;
    }
}